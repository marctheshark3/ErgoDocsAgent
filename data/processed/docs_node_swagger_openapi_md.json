{
  "id": "docs_node_swagger_openapi_md",
  "title": "Ergo Node API v5.0.15",
  "summary": "The document provides the API documentation for Ergo Node version 5.0.15. It includes information on the base URLs, authentication using an API key, and various API endpoints such as getSnapshotsInfo, getHeaderIds, sendMinedBlock, and getFullBlockAt. The document provides code samples in multiple programming languages for interacting with these API endpoints.",
  "qa_pairs": [
    {
      "question": "What is the base URL for the Ergo Node API v5.0.15?",
      "answer": "http://213.239.193.208:9053"
    },
    {
      "question": "What type of authentication is required for the Ergo Node API?",
      "answer": "API Key (ApiKeyAuth) - Parameter Name: api_key, in: header."
    },
    {
      "question": "What is the purpose of the getSnapshotsInfo endpoint?",
      "answer": "The getSnapshotsInfo endpoint is used to retrieve information about the UTXO snapshots."
    },
    {
      "question": "What programming languages are provided for the code samples?",
      "answer": "The code samples are provided for shell, HTTP, JavaScript, Ruby, Python, and PHP."
    },
    {
      "question": "What other endpoint is mentioned in the content besides getSnapshotsInfo?",
      "answer": "The content also mentions the blocks endpoint."
    }
  ],
  "sections": [
    {
      "heading": "Ergo Node API v5.0.15",
      "level": 1,
      "content": "/// admonition | Getting Started!\nAPI docs for Ergo Node. Scroll down for code samples, example requests and responses\n///\n\n\n\nBase URLs:\n\n\n* <a href=\"http://213.239.193.208:9053\">http://213.239.193.208:9053</a>"
    },
    {
      "heading": "Authentication",
      "level": 2,
      "content": "* API Key (ApiKeyAuth)\n    - Parameter Name: **api_key**, in: header."
    },
    {
      "heading": "UTXO",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getSnapshotsInfo",
      "level": 3,
      "content": "> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X DEFAULT /utxo/getSnapshotsInfo\n    ```\n\n=== \"http\"\n\n    ```http\n    DEFAULT /utxo/getSnapshotsInfo HTTP/1.1\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    fetch('/utxo/getSnapshotsInfo',\n    {\n      method: 'DEFAULT'\n    \n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    result = RestClient.default '/utxo/getSnapshotsInfo',\n      params: {\n      }\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    \n    r = requests.default('/utxo/getSnapshotsInfo')\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('DEFAULT','/utxo/getSnapshotsInfo', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/getSnapshotsInfo\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"DEFAULT\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"DEFAULT\", \"/utxo/getSnapshotsInfo\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`DEFAULT /utxo/getSnapshotsInfo`\n\nError\n\n<h3 id=\"default__utxo_getsnapshotsinfo-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "blocks",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getHeaderIds",
      "level": 3,
      "content": "<a id=\"opIdgetHeaderIds\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks`\n\n*Get an array of header ids (hex encoded) for the given range of blockchain block heights. Returns a page of the whole list starting from `offset` and containing `limit` items.*\n\n<h3 id=\"getheaderids-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The first block height to include in the list|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      \"8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\"\n    ]\n    ```\n\n<h3 id=\"getheaderids-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of header ids|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getheaderids-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of header ids*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "sendMinedBlock",
      "level": 3,
      "content": "<a id=\"opIdsendMinedBlock\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blocks \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blocks HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"blockTransactions\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactions\": [\n          {\n            \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"inputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"spendingProof\": {\n                  \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"extension\": {\n                    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                  }\n                }\n              }\n            ],\n            \"dataInputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n              }\n            ],\n            \"outputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"value\": 147,\n                \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n                \"creationHeight\": 9149,\n                \"assets\": [\n                  {\n                    \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                    \"amount\": 1000\n                  }\n                ],\n                \"additionalRegisters\": {\n                  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n                },\n                \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"index\": 0\n              }\n            ],\n            \"size\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"adProofs\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"size\": 0\n      },\n      \"extension\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"fields\": [\n          [\n            \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        ]\n      },\n      \"size\": 0\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blocks',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blocks', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blocks', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blocks\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blocks`\n\n*Send a mined block*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"blockTransactions\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactions\": [\n          {\n            \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"inputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"spendingProof\": {\n                  \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"extension\": {\n                    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                  }\n                }\n              }\n            ],\n            \"dataInputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n              }\n            ],\n            \"outputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"value\": 147,\n                \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n                \"creationHeight\": 9149,\n                \"assets\": [\n                  {\n                    \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                    \"amount\": 1000\n                  }\n                ],\n                \"additionalRegisters\": {\n                  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n                },\n                \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"index\": 0\n              }\n            ],\n            \"size\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"adProofs\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"size\": 0\n      },\n      \"extension\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"fields\": [\n          [\n            \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        ]\n      },\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"sendminedblock-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[FullBlock](#schemafullblock)|true|none|\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"sendminedblock-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Block is valid|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getFullBlockAt",
      "level": 3,
      "content": "<a id=\"opIdgetFullBlockAt\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/at/{blockHeight} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/at/{blockHeight} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/at/{blockHeight}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/at/{blockHeight}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/at/{blockHeight}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/at/{blockHeight}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/at/{blockHeight}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/at/{blockHeight}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/at/{blockHeight}`\n\n*Get header ids at the given height*\n\n<h3 id=\"getfullblockat-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|blockHeight|path|integer(int32)|true|Height of a block to retrieve header ids|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      \"8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\"\n    ]\n    ```\n\n<h3 id=\"getfullblockat-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of header ids|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Blocks at this height doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getfullblockat-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of header ids*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getChainSlice",
      "level": 3,
      "content": "<a id=\"opIdgetChainSlice\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/chainSlice \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/chainSlice HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/chainSlice',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/chainSlice',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/chainSlice', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/chainSlice', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/chainSlice\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/chainSlice\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/chainSlice`\n\n*Get headers in a specified range of heights*\n\n<h3 id=\"getchainslice-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|fromHeight|query|integer(int32)|false|Min header height (start of the range)|\n|toHeight|query|integer(int32)|false|Max header height of the range (last header height then omitted)|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ]\n    ```\n\n<h3 id=\"getchainslice-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of headers|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getchainslice-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of headers*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[BlockHeader](#schemablockheader)]|false|none|Array of headers|\n|\u00bb id|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb timestamp|[Timestamp](#schematimestamp)(int64)|true|none|Basic timestamp definition|\n|\u00bb version|[Version](#schemaversion)(int8)|true|none|Ergo blockchain protocol version|\n|\u00bb adProofsRoot|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb stateRoot|[ADDigest](#schemaaddigest)(base16)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|\u00bb transactionsRoot|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|\u00bb extensionHash|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb powSolutions|[PowSolutions](#schemapowsolutions)|true|none|An object containing all components of pow solution|\n|\u00bb\u00bb pk|string|true|none|Base16-encoded public key|\n|\u00bb\u00bb w|string|true|none|none|\n|\u00bb\u00bb n|string|true|none|none|\n|\u00bb\u00bb d|number|true|none|none|\n|\u00bb height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|\u00bb difficulty|string|true|none|none|\n|\u00bb parentId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb votes|[Votes](#schemavotes)(base16)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|\u00bb size|integer(int32)|false|none|Size of the header in bytes|\n|\u00bb extensionId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb transactionsId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb adProofsId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getFullBlockById",
      "level": 3,
      "content": "<a id=\"opIdgetFullBlockById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/{headerId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/{headerId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/{headerId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/{headerId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/{headerId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/{headerId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/{headerId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/{headerId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/{headerId}`\n\n*Get the full block info by a given header id*\n\n<h3 id=\"getfullblockbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of the header the wanted block|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"blockTransactions\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactions\": [\n          {\n            \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"inputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"spendingProof\": {\n                  \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"extension\": {\n                    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                  }\n                }\n              }\n            ],\n            \"dataInputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n              }\n            ],\n            \"outputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"value\": 147,\n                \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n                \"creationHeight\": 9149,\n                \"assets\": [\n                  {\n                    \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                    \"amount\": 1000\n                  }\n                ],\n                \"additionalRegisters\": {\n                  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n                },\n                \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"index\": 0\n              }\n            ],\n            \"size\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"adProofs\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"size\": 0\n      },\n      \"extension\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"fields\": [\n          [\n            \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        ]\n      },\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"getfullblockbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Block object representing the full block data|[FullBlock](#schemafullblock)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Block with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getFullBlockByIds",
      "level": 3,
      "content": "<a id=\"opIdgetFullBlockByIds\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blocks/headerIds \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blocks/headerIds HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '[\n      \"string\"\n    ]';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/headerIds',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blocks/headerIds',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blocks/headerIds', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blocks/headerIds', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/headerIds\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blocks/headerIds\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blocks/headerIds`\n\n*Get full blocks by given header ids*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    [\n      \"string\"\n    ]\n    ```\n\n<h3 id=\"getfullblockbyids-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|array[string]|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"header\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        },\n        \"blockTransactions\": {\n          \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactions\": [\n            {\n              \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"inputs\": [\n                {\n                  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"spendingProof\": {\n                    \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                    \"extension\": {\n                      \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                    }\n                  }\n                }\n              ],\n              \"dataInputs\": [\n                {\n                  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n                }\n              ],\n              \"outputs\": [\n                {\n                  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"value\": 147,\n                  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n                  \"creationHeight\": 9149,\n                  \"assets\": [\n                    {\n                      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                      \"amount\": 1000\n                    }\n                  ],\n                  \"additionalRegisters\": {\n                    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n                  },\n                  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"index\": 0\n                }\n              ],\n              \"size\": 0\n            }\n          ],\n          \"size\": 0\n        },\n        \"adProofs\": {\n          \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"size\": 0\n        },\n        \"extension\": {\n          \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"fields\": [\n            [\n              \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            ]\n          ]\n        },\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getfullblockbyids-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Full blocks corresponding to ids provided|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No block exist for every id provided|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getfullblockbyids-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[FullBlock](#schemafullblock)]|false|none|[Block with header and transactions]|\n|\u00bb header|[BlockHeader](#schemablockheader)|true|none|Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.|\n|\u00bb\u00bb id|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb timestamp|[Timestamp](#schematimestamp)(int64)|true|none|Basic timestamp definition|\n|\u00bb\u00bb version|[Version](#schemaversion)(int8)|true|none|Ergo blockchain protocol version|\n|\u00bb\u00bb adProofsRoot|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb stateRoot|[ADDigest](#schemaaddigest)(base16)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|\u00bb\u00bb transactionsRoot|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|\u00bb\u00bb extensionHash|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb powSolutions|[PowSolutions](#schemapowsolutions)|true|none|An object containing all components of pow solution|\n|\u00bb\u00bb\u00bb pk|string|true|none|Base16-encoded public key|\n|\u00bb\u00bb\u00bb w|string|true|none|none|\n|\u00bb\u00bb\u00bb n|string|true|none|none|\n|\u00bb\u00bb\u00bb d|number|true|none|none|\n|\u00bb\u00bb height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|\u00bb\u00bb difficulty|string|true|none|none|\n|\u00bb\u00bb parentId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb votes|[Votes](#schemavotes)(base16)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|\u00bb\u00bb size|integer(int32)|false|none|Size of the header in bytes|\n|\u00bb\u00bb extensionId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb transactionsId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb adProofsId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb blockTransactions|[BlockTransactions](#schemablocktransactions)|true|none|Section of a block which contains transactions.|\n|\u00bb\u00bb headerId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb transactions|[[ErgoTransaction](#schemaergotransaction)]|true|none|List of ErgoTransaction objects|\n|\u00bb\u00bb\u00bb id|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Inputs, that will be spent by this transaction|\n|\u00bb\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb\u00bb spendingProof|[SpendingProof](#schemaspendingproof)|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb\u00bb\u00bb proofBytes|[SpendingProofBytes](#schemaspendingproofbytes)(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Read-only inputs, that are not going to be spent by transaction.|\n|\u00bb\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Outputs of the transaction, i.e. box candidates to be created by this transaction.|\n|\u00bb\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb\u00bb\u00bb size|integer(int32)|false|none|Size of ErgoTransaction in bytes|\n|\u00bb\u00bb size|integer(int32)|true|none|Size in bytes of all block transactions|\n|\u00bb adProofs|[BlockADProofs](#schemablockadproofs)|true|none|none|\n|\u00bb\u00bb headerId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb proofBytes|[SerializedAdProof](#schemaserializedadproof)(base16)|true|none|Base16-encoded ad proofs|\n|\u00bb\u00bb digest|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb size|integer(int32)|true|none|Size in bytes|\n|\u00bb extension|[Extension](#schemaextension)|true|none|Section of a block which contains extension data.|\n|\u00bb\u00bb headerId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb digest|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb fields|[[KeyValueItem](#schemakeyvalueitem)]\u00a6null|true|none|List of key-value records|\n|\u00bb size|integer(int32)|true|none|Size in bytes|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBlockHeaderById",
      "level": 3,
      "content": "<a id=\"opIdgetBlockHeaderById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/{headerId}/header \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/{headerId}/header HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/{headerId}/header',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/{headerId}/header',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/{headerId}/header', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/{headerId}/header', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/{headerId}/header\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/{headerId}/header\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/{headerId}/header`\n\n*Get the block header info by a given header id*\n\n<h3 id=\"getblockheaderbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of a wanted block header|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"height\": 667,\n      \"difficulty\": \"9575989248\",\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"votes\": \"000000\",\n      \"size\": 0,\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\n<h3 id=\"getblockheaderbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Block header object|[BlockHeader](#schemablockheader)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Block with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBlockTransactionsById",
      "level": 3,
      "content": "<a id=\"opIdgetBlockTransactionsById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/{headerId}/transactions \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/{headerId}/transactions HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/{headerId}/transactions',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/{headerId}/transactions',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/{headerId}/transactions', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/{headerId}/transactions', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/{headerId}/transactions\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/{headerId}/transactions\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/{headerId}/transactions`\n\n*Get the block transactions info by a given signature*\n\n<h3 id=\"getblocktransactionsbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of a wanted block transactions|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactions\": [\n        {\n          \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ],\n          \"size\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"getblocktransactionsbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Block transaction object|[BlockTransactions](#schemablocktransactions)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Block with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getProofForTx",
      "level": 3,
      "content": "<a id=\"opIdgetProofForTx\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/{headerId}/proofFor/{txId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/{headerId}/proofFor/{txId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/{headerId}/proofFor/{txId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/{headerId}/proofFor/{txId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/{headerId}/proofFor/{txId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/{headerId}/proofFor/{txId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/{headerId}/proofFor/{txId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/{headerId}/proofFor/{txId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/{headerId}/proofFor/{txId}`\n\n*Get Merkle proof for transaction*\n\n<h3 id=\"getprooffortx-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of a wanted block transactions|\n|txId|path|string|true|ID of a wanted transaction|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n      \"levels\": [\n        [\n          \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n          0\n        ]\n      ]\n    }\n    ```\n\n<h3 id=\"getprooffortx-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Merkle proof object|[MerkleProof](#schemamerkleproof)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getLastHeaders",
      "level": 3,
      "content": "<a id=\"opIdgetLastHeaders\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/lastHeaders/{count} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/lastHeaders/{count} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/lastHeaders/{count}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/lastHeaders/{count}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/lastHeaders/{count}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/lastHeaders/{count}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/lastHeaders/{count}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/lastHeaders/{count}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/lastHeaders/{count}`\n\n*Get the last headers objects*\n\n<h3 id=\"getlastheaders-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|count|path|number|true|a number of block headers to return|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ]\n    ```\n\n<h3 id=\"getlastheaders-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of block headers|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getlastheaders-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[BlockHeader](#schemablockheader)]|false|none|[Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.]|\n|\u00bb id|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb timestamp|[Timestamp](#schematimestamp)(int64)|true|none|Basic timestamp definition|\n|\u00bb version|[Version](#schemaversion)(int8)|true|none|Ergo blockchain protocol version|\n|\u00bb adProofsRoot|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb stateRoot|[ADDigest](#schemaaddigest)(base16)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|\u00bb transactionsRoot|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|\u00bb extensionHash|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb powSolutions|[PowSolutions](#schemapowsolutions)|true|none|An object containing all components of pow solution|\n|\u00bb\u00bb pk|string|true|none|Base16-encoded public key|\n|\u00bb\u00bb w|string|true|none|none|\n|\u00bb\u00bb n|string|true|none|none|\n|\u00bb\u00bb d|number|true|none|none|\n|\u00bb height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|\u00bb difficulty|string|true|none|none|\n|\u00bb parentId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb votes|[Votes](#schemavotes)(base16)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|\u00bb size|integer(int32)|false|none|Size of the header in bytes|\n|\u00bb extensionId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb transactionsId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb adProofsId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getModifierById",
      "level": 3,
      "content": "<a id=\"opIdgetModifierById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blocks/modifier/{modifierId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blocks/modifier/{modifierId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blocks/modifier/{modifierId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blocks/modifier/{modifierId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blocks/modifier/{modifierId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blocks/modifier/{modifierId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blocks/modifier/{modifierId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blocks/modifier/{modifierId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blocks/modifier/{modifierId}`\n\n*Get the persistent modifier by its id*\n\n<h3 id=\"getmodifierbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|modifierId|path|string|true|ID of a wanted modifier|\n\n> Example responses\n\n> 404 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"getmodifierbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Persistent modifier object|None|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Modifier with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "nipopow",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getPopowHeaderById",
      "level": 3,
      "content": "<a id=\"opIdgetPopowHeaderById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /nipopow/popowHeaderById/{headerId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /nipopow/popowHeaderById/{headerId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/nipopow/popowHeaderById/{headerId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/nipopow/popowHeaderById/{headerId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/nipopow/popowHeaderById/{headerId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/nipopow/popowHeaderById/{headerId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/nipopow/popowHeaderById/{headerId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/nipopow/popowHeaderById/{headerId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /nipopow/popowHeaderById/{headerId}`\n\n*Construct PoPow header according to given header id*\n\n<h3 id=\"getpopowheaderbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of wanted header|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n    ```\n\n<h3 id=\"getpopowheaderbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|PoPow header object|[PopowHeader](#schemapopowheader)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Header of extension of a corresponding block are not available|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getPopowHeaderByHeight",
      "level": 3,
      "content": "<a id=\"opIdgetPopowHeaderByHeight\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /nipopow/popowHeaderByHeight/{height} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /nipopow/popowHeaderByHeight/{height} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/nipopow/popowHeaderByHeight/{height}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/nipopow/popowHeaderByHeight/{height}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/nipopow/popowHeaderByHeight/{height}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/nipopow/popowHeaderByHeight/{height}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/nipopow/popowHeaderByHeight/{height}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/nipopow/popowHeaderByHeight/{height}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /nipopow/popowHeaderByHeight/{height}`\n\n*Construct PoPow header for best header at given height*\n\n<h3 id=\"getpopowheaderbyheight-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|height|path|integer(int32)|true|Height of a wanted header|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n    ```\n\n<h3 id=\"getpopowheaderbyheight-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|PoPow header object|[PopowHeader](#schemapopowheader)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Header of extension of a corresponding block are not available|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getPopowProof",
      "level": 3,
      "content": "<a id=\"opIdgetPopowProof\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /nipopow/proof/{minChainLength}/{suffixLength} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /nipopow/proof/{minChainLength}/{suffixLength} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/nipopow/proof/{minChainLength}/{suffixLength}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/nipopow/proof/{minChainLength}/{suffixLength}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/nipopow/proof/{minChainLength}/{suffixLength}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/nipopow/proof/{minChainLength}/{suffixLength}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/nipopow/proof/{minChainLength}/{suffixLength}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/nipopow/proof/{minChainLength}/{suffixLength}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /nipopow/proof/{minChainLength}/{suffixLength}`\n\n*Construct PoPoW proof for given min superchain length and suffix length*\n\n<h3 id=\"getpopowproof-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minChainLength|path|number|true|Minimal superchain length|\n|suffixLength|path|number|true|Suffix length|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"m\": 0,\n      \"k\": 0,\n      \"prefix\": [\n        {\n          \"header\": {\n            \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"timestamp\": 1524143059077,\n            \"version\": 2,\n            \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"nBits\": 19857408,\n            \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powSolutions\": {\n              \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n              \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n              \"n\": \"0000000000000000\",\n              \"d\": 987654321\n            },\n            \"height\": 667,\n            \"difficulty\": \"9575989248\",\n            \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"votes\": \"000000\",\n            \"size\": 0,\n            \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          },\n          \"interlinks\": [\n            \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        }\n      ],\n      \"suffixHead\": {\n        \"header\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        },\n        \"interlinks\": [\n          \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        ]\n      },\n      \"suffixTail\": [\n        {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"getpopowproof-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Nipopow proof object|[NipopowProof](#schemanipopowproof)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getPopowProofByHeaderId",
      "level": 3,
      "content": "<a id=\"opIdgetPopowProofByHeaderId\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId}`\n\n*Construct PoPoW proof for given min superchain length, suffix length and header ID*\n\n<h3 id=\"getpopowproofbyheaderid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minChainLength|path|number|true|Minimal superchain length|\n|suffixLength|path|number|true|Suffix length|\n|headerId|path|string|true|ID of wanted header|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"m\": 0,\n      \"k\": 0,\n      \"prefix\": [\n        {\n          \"header\": {\n            \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"timestamp\": 1524143059077,\n            \"version\": 2,\n            \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"nBits\": 19857408,\n            \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powSolutions\": {\n              \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n              \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n              \"n\": \"0000000000000000\",\n              \"d\": 987654321\n            },\n            \"height\": 667,\n            \"difficulty\": \"9575989248\",\n            \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"votes\": \"000000\",\n            \"size\": 0,\n            \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          },\n          \"interlinks\": [\n            \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        }\n      ],\n      \"suffixHead\": {\n        \"header\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        },\n        \"interlinks\": [\n          \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        ]\n      },\n      \"suffixTail\": [\n        {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"getpopowproofbyheaderid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Nipopow proof object|[NipopowProof](#schemanipopowproof)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "info",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getNodeInfo",
      "level": 3,
      "content": "<a id=\"opIdgetNodeInfo\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /info \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /info HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/info',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/info',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/info', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/info', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/info\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/info\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /info`\n\n*Get the information about the Node*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"name\": \"my-node-1\",\n      \"appVersion\": \"0.0.1\",\n      \"fullHeight\": 667,\n      \"headersHeight\": 667,\n      \"maxPeerHeight\": 706162,\n      \"bestFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"previousFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"bestHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"dab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateType\": \"digest\",\n      \"stateVersion\": \"fab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"isMining\": true,\n      \"peersCount\": 327,\n      \"unconfirmedCount\": 327,\n      \"difficulty\": 667,\n      \"currentTime\": 1524143059077,\n      \"launchTime\": 1524143059077,\n      \"headersScore\": 0,\n      \"fullBlocksScore\": 0,\n      \"genesisBlockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"parameters\": {\n        \"height\": 667,\n        \"storageFeeFactor\": 100000,\n        \"minValuePerByte\": 360,\n        \"maxBlockSize\": 1048576,\n        \"maxBlockCost\": 104876,\n        \"blockVersion\": 2,\n        \"tokenAccessCost\": 100,\n        \"inputCost\": 100,\n        \"dataInputCost\": 100,\n        \"outputCost\": 100\n      },\n      \"eip27Supported\": true,\n      \"restApiUrl\": \"https://example.com\"\n    }\n    ```\n\n<h3 id=\"getnodeinfo-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Node info object|[NodeInfo](#schemanodeinfo)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "transactions",
      "level": 2,
      "content": ""
    },
    {
      "heading": "sendTransaction",
      "level": 3,
      "content": "<a id=\"opIdsendTransaction\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions`\n\n*Submit an Ergo transaction to unconfirmed pool to send it over the network*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"sendtransaction-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ErgoTransaction](#schemaergotransaction)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"sendtransaction-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON with ID of the new transaction|[TransactionId](#schematransactionid)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "sendTransactionAsBytes",
      "level": 3,
      "content": "<a id=\"opIdsendTransactionAsBytes\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions/bytes \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions/bytes HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/bytes',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions/bytes',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions/bytes', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions/bytes', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/bytes\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions/bytes\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions/bytes`\n\n*Submit an Ergo transaction given as hex-encoded transaction bytes to unconfirmed pool to send it over the network*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\\\"\"\n    ```\n\n<h3 id=\"sendtransactionasbytes-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"sendtransactionasbytes-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON with ID of the new transaction|[TransactionId](#schematransactionid)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "checkTransaction",
      "level": 3,
      "content": "<a id=\"opIdcheckTransaction\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions/check \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions/check HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/check',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions/check',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions/check', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions/check', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/check\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions/check\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions/check`\n\n*Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"checktransaction-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ErgoTransaction](#schemaergotransaction)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"checktransaction-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON with ID of the new transaction|[TransactionId](#schematransactionid)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "checkTransactionAsBytes",
      "level": 3,
      "content": "<a id=\"opIdcheckTransactionAsBytes\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions/checkBytes \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions/checkBytes HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/checkBytes',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions/checkBytes',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions/checkBytes', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions/checkBytes', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/checkBytes\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions/checkBytes\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions/checkBytes`\n\n*Checks an Ergo transaction without sending it over the network given in form of hex-encoded transaction bytes. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\\\"\"\n    ```\n\n<h3 id=\"checktransactionasbytes-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"checktransactionasbytes-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON with ID of the new transaction|[TransactionId](#schematransactionid)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getUnconfirmedTransactions",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactions\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/unconfirmed \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/unconfirmed HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/unconfirmed',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/unconfirmed', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/unconfirmed', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/unconfirmed\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/unconfirmed`\n\n*Get current pool of the unconfirmed transactions pool*\n\n<h3 id=\"getunconfirmedtransactions-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getunconfirmedtransactions-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array with Ergo transactions|[Transactions](#schematransactions)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "checkUnconfirmedTransaction",
      "level": 3,
      "content": "<a id=\"opIdcheckUnconfirmedTransaction\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X HEAD /transactions/unconfirmed/{txId}\n    ```\n\n=== \"http\"\n\n    ```http\n    HEAD /transactions/unconfirmed/{txId} HTTP/1.1\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    fetch('/transactions/unconfirmed/{txId}',\n    {\n      method: 'HEAD'\n    \n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    result = RestClient.head '/transactions/unconfirmed/{txId}',\n      params: {\n      }\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    \n    r = requests.head('/transactions/unconfirmed/{txId}')\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('HEAD','/transactions/unconfirmed/{txId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/{txId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"HEAD\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"HEAD\", \"/transactions/unconfirmed/{txId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`HEAD /transactions/unconfirmed/{txId}`\n\n*Check if given transaction is unconfirmed in pool*\n\n<h3 id=\"checkunconfirmedtransaction-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txId|path|string|true|ID of a transaction in question|\n\n<h3 id=\"checkunconfirmedtransaction-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Transaction is in pool|None|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Transaction is not in pool|None|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getUnconfirmedTransactionById",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/unconfirmed/byTransactionId/{txId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/unconfirmed/byTransactionId/{txId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/byTransactionId/{txId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/unconfirmed/byTransactionId/{txId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/unconfirmed/byTransactionId/{txId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/unconfirmed/byTransactionId/{txId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/byTransactionId/{txId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/unconfirmed/byTransactionId/{txId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/unconfirmed/byTransactionId/{txId}`\n\n*Get unconfirmed transaction from pool*\n\n<h3 id=\"getunconfirmedtransactionbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txId|path|string|true|ID of a transaction in question|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"getunconfirmedtransactionbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Ergo transaction|[ErgoTransaction](#schemaergotransaction)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getUnconfirmedTransactionsByErgoTree",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionsByErgoTree\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions/unconfirmed/byErgoTree \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions/unconfirmed/byErgoTree HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/byErgoTree',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions/unconfirmed/byErgoTree',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions/unconfirmed/byErgoTree', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions/unconfirmed/byErgoTree', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/byErgoTree\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions/unconfirmed/byErgoTree\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions/unconfirmed/byErgoTree`\n\n*Finds unconfirmed transactions by ErgoTree hex of one of its output or input boxes (if present in UtxoState)*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\\\"\"\n    ```\n\n<h3 id=\"getunconfirmedtransactionsbyergotree-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getunconfirmedtransactionsbyergotree-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Ergo transaction|[Transactions](#schematransactions)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getFeeHistogram",
      "level": 3,
      "content": "<a id=\"opIdgetFeeHistogram\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/poolHistogram \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/poolHistogram HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/poolHistogram',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/poolHistogram',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/poolHistogram', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/poolHistogram', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/poolHistogram\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/poolHistogram\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/poolHistogram`\n\n*Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \"bins\"+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time >= maxtime.*\n\n<h3 id=\"getfeehistogram-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|bins|query|integer(int32)|false|The number of bins in histogram|\n|maxtime|query|integer(int64)|false|Maximal wait time in milliseconds|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"nTxns\": 0,\n        \"totalFee\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getfeehistogram-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array with fee histogram|[FeeHistogram](#schemafeehistogram)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getRecommendedFee",
      "level": 3,
      "content": "<a id=\"opIdgetRecommendedFee\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/getFee?waitTime=1&txSize=100 \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/getFee?waitTime=1&txSize=100 HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/getFee?waitTime=1&txSize=100',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/getFee',\n      params: {\n      'waitTime' => 'integer(int32)',\n    'txSize' => 'integer(int32)'\n    }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/getFee', params={\n      'waitTime': '1',  'txSize': '100'\n    }, headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/getFee', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/getFee?waitTime=1&txSize=100\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/getFee\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/getFee`\n\n*Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)*\n\n<h3 id=\"getrecommendedfee-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|waitTime|query|integer(int32)|true|Maximum transaction wait time in minutes|\n|txSize|query|integer(int32)|true|Transaction size|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    0\n    ```\n\n<h3 id=\"getrecommendedfee-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Recommended fee for the transaction (in nanoErgs)|integer|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getExpectedWaitTime",
      "level": 3,
      "content": "<a id=\"opIdgetExpectedWaitTime\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/waitTime?fee=1&txSize=100 \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/waitTime?fee=1&txSize=100 HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/waitTime?fee=1&txSize=100',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/waitTime',\n      params: {\n      'fee' => 'integer(int32)',\n    'txSize' => 'integer(int32)'\n    }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/waitTime', params={\n      'fee': '1',  'txSize': '100'\n    }, headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/waitTime', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/waitTime?fee=1&txSize=100\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/waitTime\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/waitTime`\n\n*Get expected wait time for the transaction with specified fee and size*\n\n<h3 id=\"getexpectedwaittime-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|fee|query|integer(int32)|true|Transaction fee (in nanoErgs)|\n|txSize|query|integer(int32)|true|Transaction size|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    0\n    ```\n\n<h3 id=\"getexpectedwaittime-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Expected wait time in milliseconds|integer|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "inputs",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getUnconfirmedTransactionInputBoxById",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionInputBoxById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/unconfirmed/inputs/byBoxId/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/unconfirmed/inputs/byBoxId/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/inputs/byBoxId/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/unconfirmed/inputs/byBoxId/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/unconfirmed/inputs/byBoxId/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/unconfirmed/inputs/byBoxId/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/inputs/byBoxId/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/unconfirmed/inputs/byBoxId/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/unconfirmed/inputs/byBoxId/{boxId}`\n\n*Get input box from unconfirmed transactions in pool*\n\n<h3 id=\"getunconfirmedtransactioninputboxbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of an input box in question|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n    ```\n\n<h3 id=\"getunconfirmedtransactioninputboxbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Unspent Ergo Box that is to be used as Input in unconfirmed tx|[ErgoTransactionOutput](#schemaergotransactionoutput)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "outputs",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxById",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionOutputBoxById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/unconfirmed/outputs/byBoxId/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/unconfirmed/outputs/byBoxId/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/outputs/byBoxId/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/unconfirmed/outputs/byBoxId/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/unconfirmed/outputs/byBoxId/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/unconfirmed/outputs/byBoxId/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/outputs/byBoxId/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/unconfirmed/outputs/byBoxId/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/unconfirmed/outputs/byBoxId/{boxId}`\n\n*Get output box from unconfirmed transactions in pool*\n\n<h3 id=\"getunconfirmedtransactionoutputboxbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of an output box in question|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n    ```\n\n<h3 id=\"getunconfirmedtransactionoutputboxbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Unspent Ergo Box that is to be created by unconfirmed tx|[ErgoTransactionOutput](#schemaergotransactionoutput)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByErgoTree",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionOutputBoxesByErgoTree\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions/unconfirmed/outputs/byErgoTree \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions/unconfirmed/outputs/byErgoTree HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/outputs/byErgoTree',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions/unconfirmed/outputs/byErgoTree',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions/unconfirmed/outputs/byErgoTree', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions/unconfirmed/outputs/byErgoTree', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/outputs/byErgoTree\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions/unconfirmed/outputs/byErgoTree\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions/unconfirmed/outputs/byErgoTree`\n\n*Finds all output boxes by ErgoTree hex among unconfirmed transactions*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\\\"\"\n    ```\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbyergotree-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbyergotree-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Unconfirmed transaction output boxes that correspond to given ErgoTree hex|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbyergotree-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|false|none|none|\n|\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByTokenId",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionOutputBoxesByTokenId\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /transactions/unconfirmed/outputs/byTokenId/{tokenId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /transactions/unconfirmed/outputs/byTokenId/{tokenId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/outputs/byTokenId/{tokenId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/transactions/unconfirmed/outputs/byTokenId/{tokenId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/transactions/unconfirmed/outputs/byTokenId/{tokenId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/transactions/unconfirmed/outputs/byTokenId/{tokenId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/outputs/byTokenId/{tokenId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/transactions/unconfirmed/outputs/byTokenId/{tokenId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /transactions/unconfirmed/outputs/byTokenId/{tokenId}`\n\n*Get output box from unconfirmed transactions in pool by tokenId*\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbytokenid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|string|true|ID of a token in question|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbytokenid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Unspent Ergo Boxes that are to be created by unconfirmed tx and contain given token|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbytokenid-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|false|none|none|\n|\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByRegisters",
      "level": 3,
      "content": "<a id=\"opIdgetUnconfirmedTransactionOutputBoxesByRegisters\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /transactions/unconfirmed/outputs/byRegisters \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /transactions/unconfirmed/outputs/byRegisters HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/transactions/unconfirmed/outputs/byRegisters',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/transactions/unconfirmed/outputs/byRegisters',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/transactions/unconfirmed/outputs/byRegisters', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/transactions/unconfirmed/outputs/byRegisters', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/transactions/unconfirmed/outputs/byRegisters\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/transactions/unconfirmed/outputs/byRegisters\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /transactions/unconfirmed/outputs/byRegisters`\n\n*Finds all output boxes among unconfirmed transactions that contain given registers*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    }\n    ```\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbyregisters-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[Registers](#schemaregisters)|true|none|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbyregisters-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Unconfirmed transaction output boxes that contain given registers|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getunconfirmedtransactionoutputboxesbyregisters-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|false|none|none|\n|\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "peers",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getAllPeers",
      "level": 3,
      "content": "<a id=\"opIdgetAllPeers\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /peers/all \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /peers/all HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/peers/all',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/peers/all',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/peers/all', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/peers/all', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/all\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/peers/all\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /peers/all`\n\n*Get all known peers*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"address\": \"127.0.0.1:5673\",\n        \"restApiUrl\": \"https://example.com\",\n        \"name\": \"mynode\",\n        \"lastSeen\": 1524143059077,\n        \"connectionType\": \"Incoming\"\n      }\n    ]\n    ```\n\n<h3 id=\"getallpeers-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of peer objects|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getallpeers-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[Peer](#schemapeer)]|false|none|none|\n|\u00bb address|string|true|none|none|\n|\u00bb restApiUrl|string\u00a6null|false|none|none|\n|\u00bb name|string\u00a6null|false|none|none|\n|\u00bb lastSeen|[Timestamp](#schematimestamp)(int64)|false|none|Basic timestamp definition|\n|\u00bb connectionType|string\u00a6null|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|connectionType|Incoming|\n|connectionType|Outgoing|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getConnectedPeers",
      "level": 3,
      "content": "<a id=\"opIdgetConnectedPeers\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /peers/connected \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /peers/connected HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/peers/connected',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/peers/connected',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/peers/connected', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/peers/connected', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/connected\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/peers/connected\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /peers/connected`\n\n*Get current connected peers*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"address\": \"127.0.0.1:5673\",\n        \"restApiUrl\": \"https://example.com\",\n        \"name\": \"mynode\",\n        \"lastSeen\": 1524143059077,\n        \"connectionType\": \"Incoming\"\n      }\n    ]\n    ```\n\n<h3 id=\"getconnectedpeers-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of peer objects|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getconnectedpeers-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[Peer](#schemapeer)]|false|none|none|\n|\u00bb address|string|true|none|none|\n|\u00bb restApiUrl|string\u00a6null|false|none|none|\n|\u00bb name|string\u00a6null|false|none|none|\n|\u00bb lastSeen|[Timestamp](#schematimestamp)(int64)|false|none|Basic timestamp definition|\n|\u00bb connectionType|string\u00a6null|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|connectionType|Incoming|\n|connectionType|Outgoing|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "connectToPeer",
      "level": 3,
      "content": "<a id=\"opIdconnectToPeer\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /peers/connect \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /peers/connect HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"127.0.0.1:5673\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/peers/connect',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/peers/connect',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/peers/connect', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/peers/connect', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/connect\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/peers/connect\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /peers/connect`\n\n*Add address to peers list*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"127.0.0.1:5673\\\"\"\n    ```\n\n<h3 id=\"connecttopeer-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"connecttopeer-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Attempt to connect to the peer|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "getBlacklistedPeers",
      "level": 3,
      "content": "<a id=\"opIdgetBlacklistedPeers\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /peers/blacklisted \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /peers/blacklisted HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/peers/blacklisted',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/peers/blacklisted',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/peers/blacklisted', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/peers/blacklisted', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/blacklisted\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/peers/blacklisted\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /peers/blacklisted`\n\n*Get blacklisted peers*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"addresses\": [\n        \"string\"\n      ]\n    }\n    ```\n\n<h3 id=\"getblacklistedpeers-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Array of the addresses|[BlacklistedPeers](#schemablacklistedpeers)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getPeersStatus",
      "level": 3,
      "content": "<a id=\"opIdgetPeersStatus\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /peers/status \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /peers/status HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/peers/status',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/peers/status',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/peers/status', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/peers/status', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/status\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/peers/status\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /peers/status`\n\n*Get last incoming message timestamp and current network time*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"lastIncomingMessage\": 1524143059077,\n        \"currentNetworkTime\": 1524143059077\n      }\n    ]\n    ```\n\n<h3 id=\"getpeersstatus-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Network status|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getpeersstatus-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[PeersStatus](#schemapeersstatus)]|false|none|none|\n|\u00bb lastIncomingMessage|[Timestamp](#schematimestamp)(int64)|true|none|Basic timestamp definition|\n|\u00bb currentNetworkTime|[Timestamp](#schematimestamp)(int64)|true|none|Basic timestamp definition|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getPeersSyncInfo",
      "level": 3,
      "content": "<a id=\"opIdgetPeersSyncInfo\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /peers/syncInfo \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /peers/syncInfo HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/peers/syncInfo',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/peers/syncInfo',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/peers/syncInfo', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/peers/syncInfo', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/syncInfo\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/peers/syncInfo\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /peers/syncInfo`\n\n*Get sync info reported by peers, including versions, current status and height (if available)*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"address\": \"127.0.0.1:5673\",\n        \"mode\": {\n          \"state\": \"utxo\",\n          \"verifyingTransactions\": true,\n          \"fullBlocksSuffix\": 2880\n        },\n        \"version\": \"4.0.16\",\n        \"status\": \"Older\",\n        \"height\": 65780\n      }\n    ]\n    ```\n\n<h3 id=\"getpeerssyncinfo-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Network status|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getpeerssyncinfo-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[SyncInfo](#schemasyncinfo)]|false|none|none|\n|\u00bb address|string|true|none|none|\n|\u00bb mode|[PeerMode](#schemapeermode)|true|none|none|\n|\u00bb\u00bb state|string|true|none|none|\n|\u00bb\u00bb verifyingTransactions|boolean|true|none|none|\n|\u00bb\u00bb fullBlocksSuffix|integer|true|none|none|\n|\u00bb version|string|true|none|none|\n|\u00bb status|string|true|none|none|\n|\u00bb height|integer|true|none|none|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getPeersTrackInfo",
      "level": 3,
      "content": "<a id=\"opIdgetPeersTrackInfo\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /peers/trackInfo \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /peers/trackInfo HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/peers/trackInfo',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/peers/trackInfo',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/peers/trackInfo', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/peers/trackInfo', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/peers/trackInfo\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/peers/trackInfo\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /peers/trackInfo`\n\n*Get track info reported by peers, including count of invalid modifiers and details of requested and received modifiers*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"invalidModifierApproxSize\": 65780,\n        \"requested\": {\n          \"property1\": {\n            \"property1\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"checks\": 4\n            },\n            \"property2\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"checks\": 4\n            }\n          },\n          \"property2\": {\n            \"property1\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"checks\": 4\n            },\n            \"property2\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"checks\": 4\n            }\n          }\n        },\n        \"received\": {\n          \"property1\": {\n            \"property1\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"lastMessage\": 1524143059077\n            },\n            \"property2\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"lastMessage\": 1524143059077\n            }\n          },\n          \"property2\": {\n            \"property1\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"lastMessage\": 1524143059077\n            },\n            \"property2\": {\n              \"address\": \"127.0.0.1:5673\",\n              \"version\": \"4.0.26\",\n              \"lastMessage\": 1524143059077\n            }\n          }\n        }\n      }\n    ]\n    ```\n\n<h3 id=\"getpeerstrackinfo-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Network status|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getpeerstrackinfo-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[TrackInfo](#schematrackinfo)]|false|none|none|\n|\u00bb invalidModifierApproxSize|integer|true|none|none|\n|\u00bb requested|object|true|none|Currently requested modifiers|\n|\u00bb\u00bb **additionalProperties**|[RequestedInfoByModifierId](#schemarequestedinfobymodifierid)|false|none|none|\n|\u00bb\u00bb\u00bb **additionalProperties**|[RequestedInfo](#schemarequestedinfo)|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb address|string|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb version|string|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb checks|integer|true|none|How many times we checked for modifier delivery status|\n|\u00bb received|object|true|none|Received modifiers|\n|\u00bb\u00bb **additionalProperties**|[ConnectedPeerByModifierId](#schemaconnectedpeerbymodifierid)|false|none|none|\n|\u00bb\u00bb\u00bb **additionalProperties**|[ConnectedPeer](#schemaconnectedpeer)|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb address|string|true|none|none|\n|\u00bb\u00bb\u00bb\u00bb version|string|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb lastMessage|[Timestamp](#schematimestamp)(int64)|false|none|Basic timestamp definition|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "utils",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getRandomSeed",
      "level": 3,
      "content": "<a id=\"opIdgetRandomSeed\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utils/seed \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utils/seed HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/seed',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utils/seed',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utils/seed', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utils/seed', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/seed\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utils/seed\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utils/seed`\n\n*Get random seed of 32 bytes*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"\\\"7e1e79dd4936bdc7d09f4ba9212849136b589fba4bcf4263a0961a95b65d08cb16\\\"\"\n    ```\n\n<h3 id=\"getrandomseed-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Base16-encoded 32 byte seed|string|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "CheckAddressValidityWithGet",
      "level": 3,
      "content": "<a id=\"opIdCheckAddressValidityWithGet\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utils/address/{address} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utils/address/{address} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/address/{address}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utils/address/{address}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utils/address/{address}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utils/address/{address}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/address/{address}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utils/address/{address}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utils/address/{address}`\n\n*Check address validity (prefer POST request as addresses can be too big)*\n\n<h3 id=\"checkaddressvaliditywithget-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|[ErgoAddress](#schemaergoaddress)|true|address to check|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"isValid\": true,\n      \"error\": \"string\"\n    }\n    ```\n\n<h3 id=\"checkaddressvaliditywithget-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Address validity with validation error|[AddressValidity](#schemaaddressvalidity)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "CheckAddressValidity",
      "level": 3,
      "content": "<a id=\"opIdCheckAddressValidity\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /utils/address \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /utils/address HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/address',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/utils/address',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/utils/address', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/utils/address', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/address\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/utils/address\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /utils/address`\n\n*Checks address validity*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\\\"\"\n    ```\n\n<h3 id=\"checkaddressvalidity-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|address to check|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"isValid\": true,\n      \"error\": \"string\"\n    }\n    ```\n\n<h3 id=\"checkaddressvalidity-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Address validity with validation error|[AddressValidity](#schemaaddressvalidity)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "AddressToRaw",
      "level": 3,
      "content": "<a id=\"opIdAddressToRaw\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utils/addressToRaw/{address} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utils/addressToRaw/{address} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/addressToRaw/{address}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utils/addressToRaw/{address}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utils/addressToRaw/{address}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utils/addressToRaw/{address}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/addressToRaw/{address}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utils/addressToRaw/{address}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utils/addressToRaw/{address}`\n\n*Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)*\n\n<h3 id=\"addresstoraw-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|[ErgoAddress](#schemaergoaddress)|true|address to extract public key from|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    ```\n\n<h3 id=\"addresstoraw-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|hex-encoded public key (serialized secp256k1 element)|string|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "RawToAddress",
      "level": 3,
      "content": "<a id=\"opIdRawToAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utils/rawToAddress/{pubkeyHex} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utils/rawToAddress/{pubkeyHex} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/rawToAddress/{pubkeyHex}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utils/rawToAddress/{pubkeyHex}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utils/rawToAddress/{pubkeyHex}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utils/rawToAddress/{pubkeyHex}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/rawToAddress/{pubkeyHex}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utils/rawToAddress/{pubkeyHex}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utils/rawToAddress/{pubkeyHex}`\n\n*Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)*\n\n<h3 id=\"rawtoaddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|pubkeyHex|path|string|true|public key to get address from|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ```\n\n<h3 id=\"rawtoaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Pay-to-public-key (P2PK) address|[ErgoAddress](#schemaergoaddress)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "ErgoTreeToAddressWithGet",
      "level": 3,
      "content": "<a id=\"opIdErgoTreeToAddressWithGet\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utils/ergoTreeToAddress/{ergoTreeHex} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utils/ergoTreeToAddress/{ergoTreeHex} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/ergoTreeToAddress/{ergoTreeHex}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utils/ergoTreeToAddress/{ergoTreeHex}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utils/ergoTreeToAddress/{ergoTreeHex}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utils/ergoTreeToAddress/{ergoTreeHex}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/ergoTreeToAddress/{ergoTreeHex}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utils/ergoTreeToAddress/{ergoTreeHex}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utils/ergoTreeToAddress/{ergoTreeHex}`\n\n*Generate Ergo address from hex-encoded ErgoTree (prefer POST request as ErgoTree can be too big)*\n\n<h3 id=\"ergotreetoaddresswithget-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|ergoTreeHex|path|string|true|ErgoTree to derive an address from|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ```\n\n<h3 id=\"ergotreetoaddresswithget-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Ergo address|[ErgoAddress](#schemaergoaddress)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "ErgoTreeToAddress",
      "level": 3,
      "content": "<a id=\"opIdErgoTreeToAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /utils/ergoTreeToAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /utils/ergoTreeToAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/ergoTreeToAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/utils/ergoTreeToAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/utils/ergoTreeToAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/utils/ergoTreeToAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/ergoTreeToAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/utils/ergoTreeToAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /utils/ergoTreeToAddress`\n\n*Generate Ergo address from hex-encoded ErgoTree*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\\\"\"\n    ```\n\n<h3 id=\"ergotreetoaddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|ErgoTree hex to derive an address from|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ```\n\n<h3 id=\"ergotreetoaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Ergo address|[ErgoAddress](#schemaergoaddress)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getRandomSeedWithLength",
      "level": 3,
      "content": "<a id=\"opIdgetRandomSeedWithLength\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utils/seed/{length} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utils/seed/{length} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/seed/{length}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utils/seed/{length}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utils/seed/{length}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utils/seed/{length}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/seed/{length}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utils/seed/{length}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utils/seed/{length}`\n\n*Generate random seed of specified length in bytes*\n\n<h3 id=\"getrandomseedwithlength-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|length|path|string|true|seed length in bytes|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"\\\"83375fd213cfd7dfd984ce1901d62c302a1db53160b416674c8da1a393a6bbc316\\\"\"\n    ```\n\n<h3 id=\"getrandomseedwithlength-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Base16-encoded N byte seed|string|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "hashBlake2b",
      "level": 3,
      "content": "<a id=\"opIdhashBlake2b\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /utils/hash/blake2b \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /utils/hash/blake2b HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/utils/hash/blake2b',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/utils/hash/blake2b',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/utils/hash/blake2b', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/utils/hash/blake2b', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utils/hash/blake2b\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/utils/hash/blake2b\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /utils/hash/blake2b`\n\n*Return Blake2b hash of specified message*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\\\"\"\n    ```\n\n<h3 id=\"hashblake2b-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"\\\"6ed54addddaf10fe8fcda330bd443a57914fbce38a9fa27248b07e361cc76a41\\\"\"\n    ```\n\n<h3 id=\"hashblake2b-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Base16-encoded 32 byte hash|string|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "wallet",
      "level": 2,
      "content": ""
    },
    {
      "heading": "walletInit",
      "level": 3,
      "content": "<a id=\"opIdwalletInit\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/init \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/init HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"pass\": \"string\",\n      \"mnemonicPass\": \"string\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/init',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/init',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/init', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/init', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/init\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/init\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/init`\n\n*Initialize new wallet with randomly generated seed*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"pass\": \"string\",\n      \"mnemonicPass\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletinit-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[InitWallet](#schemainitwallet)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"mnemonic\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletinit-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|New wallet with randomly generated seed created successfully|[InitWalletResult](#schemainitwalletresult)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletRestore",
      "level": 3,
      "content": "<a id=\"opIdwalletRestore\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/restore \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/restore HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"pass\": \"string\",\n      \"mnemonic\": \"string\",\n      \"mnemonicPass\": \"string\",\n      \"usePre1627KeyDerivation\": true\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/restore',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/restore',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/restore', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/restore', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/restore\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/restore\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/restore`\n\n*Create new wallet from existing mnemonic seed*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"pass\": \"string\",\n      \"mnemonic\": \"string\",\n      \"mnemonicPass\": \"string\",\n      \"usePre1627KeyDerivation\": true\n    }\n    ```\n\n<h3 id=\"walletrestore-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[RestoreWallet](#schemarestorewallet)|true|none|\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletrestore-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Wallet restored successfully|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "checkSeed",
      "level": 3,
      "content": "<a id=\"opIdcheckSeed\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/check \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/check HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"mnemonic\": \"string\",\n      \"mnemonicPass\": \"string\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/check',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/check',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/check', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/check', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/check\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/check\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/check`\n\n*Check whether mnemonic phrase is corresponding to the wallet seed*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"mnemonic\": \"string\",\n      \"mnemonicPass\": \"string\"\n    }\n    ```\n\n<h3 id=\"checkseed-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[CheckWallet](#schemacheckwallet)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"matched\": true\n    }\n    ```\n\n<h3 id=\"checkseed-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Whether passphrase match wallet|[PassphraseMatch](#schemapassphrasematch)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletUnlock",
      "level": 3,
      "content": "<a id=\"opIdwalletUnlock\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/unlock \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/unlock HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"pass\": \"string\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/unlock',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/unlock',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/unlock', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/unlock', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/unlock\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/unlock\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/unlock`\n\n*Unlock wallet*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"pass\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletunlock-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[UnlockWallet](#schemaunlockwallet)|true|none|\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletunlock-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Wallet unlocked successfully|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletLock",
      "level": 3,
      "content": "<a id=\"opIdwalletLock\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/lock \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/lock HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/lock',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/lock',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/lock', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/lock', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/lock\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/lock\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/lock`\n\n*Lock wallet*\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletlock-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Wallet locked successfully|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletRescan",
      "level": 3,
      "content": "<a id=\"opIdwalletRescan\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/rescan \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/rescan HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"fromHeight\": 0\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/rescan',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/rescan',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/rescan', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/rescan', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/rescan\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/rescan\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/rescan`\n\n*Rescan wallet (all the available full blocks). When fromHeight is set wallet would not see any boxes below it.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"fromHeight\": 0\n    }\n    ```\n\n<h3 id=\"walletrescan-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|object|false|none|\n|\u00bb fromHeight|body|integer(int32)|true|none|\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletrescan-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Wallet rescanned|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "getWalletStatus",
      "level": 3,
      "content": "<a id=\"opIdgetWalletStatus\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/status \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/status HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/status',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/status',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/status', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/status', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/status\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/status\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/status`\n\n*Get wallet status*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"isInitialized\": true,\n      \"isUnlocked\": true,\n      \"changeAddress\": \"3WzCFq7mkykKqi4Ykdk8BK814tkh6EsPmA42pQZxU2NRwSDgd6yB\",\n      \"walletHeight\": 0,\n      \"error\": \"string\"\n    }\n    ```\n\n<h3 id=\"getwalletstatus-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Wallet status|[WalletStatus](#schemawalletstatus)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletUpdateChangeAddress",
      "level": 3,
      "content": "<a id=\"opIdwalletUpdateChangeAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/updateChangeAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/updateChangeAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/updateChangeAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/updateChangeAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/updateChangeAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/updateChangeAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/updateChangeAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/updateChangeAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/updateChangeAddress`\n\n*Update address to be used to send change to*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ```\n\n<h3 id=\"walletupdatechangeaddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ErgoAddress](#schemaergoaddress)|true|none|\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"walletupdatechangeaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Change address updated successfully|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletDeriveKey",
      "level": 3,
      "content": "<a id=\"opIdwalletDeriveKey\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/deriveKey \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/deriveKey HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"derivationPath\": \"m/1/2\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/deriveKey',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/deriveKey',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/deriveKey', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/deriveKey', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/deriveKey\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/deriveKey\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/deriveKey`\n\n*Derive new key according to a provided path*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"derivationPath\": \"m/1/2\"\n    }\n    ```\n\n<h3 id=\"walletderivekey-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[DeriveKey](#schemaderivekey)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```\n\n<h3 id=\"walletderivekey-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Resulted address|[DeriveKeyResult](#schemaderivekeyresult)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletDeriveNextKey",
      "level": 3,
      "content": "<a id=\"opIdwalletDeriveNextKey\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/deriveNextKey \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/deriveNextKey HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/deriveNextKey',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/deriveNextKey',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/deriveNextKey', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/deriveNextKey', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/deriveNextKey\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/deriveNextKey\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/deriveNextKey`\n\n*Derive next key*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"derivationPath\": \"m/1/2\",\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```\n\n<h3 id=\"walletderivenextkey-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Resulted secret path and address|[DeriveNextKeyResult](#schemaderivenextkeyresult)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletBalances",
      "level": 3,
      "content": "<a id=\"opIdwalletBalances\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/balances \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/balances HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/balances',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/balances',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/balances', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/balances', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/balances\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/balances\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/balances`\n\n*Get total amount of confirmed Ergo tokens and assets*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"height\": 0,\n      \"balance\": 0,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"walletbalances-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Get total amount of confirmed Ergo tokens and assets|[BalancesSnapshot](#schemabalancessnapshot)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletTransactions",
      "level": 3,
      "content": "<a id=\"opIdwalletTransactions\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/transactions \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/transactions HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transactions',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/transactions',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/transactions', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/transactions', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transactions\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/transactions\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/transactions`\n\n*Get a list of all wallet-related transactions*\n\n<h3 id=\"wallettransactions-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minInclusionHeight|query|integer(int32)|false|Minimal tx inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximal tx inclusion height|\n|minConfirmations|query|integer(int32)|false|Minimal confirmations number|\n|maxConfirmations|query|integer(int32)|false|Maximal confirmations number|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"inclusionHeight\": 20998,\n        \"numConfirmations\": 20998,\n        \"scans\": [\n          1\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"wallettransactions-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|A list of all wallet-related transactions|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"wallettransactions-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletTransaction](#schemawallettransaction)]|false|none|[Transaction augmented with some useful information]|\n|\u00bb id|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Transaction inputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb spendingProof|[SpendingProof](#schemaspendingproof)|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb proofBytes|[SpendingProofBytes](#schemaspendingproofbytes)(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Transaction data inputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Transaction outputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|\u00bb scans|[integer]|true|none|Scan identifiers the transaction relates to|\n|\u00bb size|integer(int32)|false|none|Size in bytes|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletGetTransaction",
      "level": 3,
      "content": "<a id=\"opIdwalletGetTransaction\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/transactionById?id=string \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/transactionById?id=string HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transactionById?id=string',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/transactionById',\n      params: {\n      'id' => 'string'\n    }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/transactionById', params={\n      'id': 'string'\n    }, headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/transactionById', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transactionById?id=string\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/transactionById\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/transactionById`\n\n*Get wallet-related transaction by id*\n\n<h3 id=\"walletgettransaction-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|id|query|string|true|Transaction id|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"inclusionHeight\": 20998,\n        \"numConfirmations\": 20998,\n        \"scans\": [\n          1\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"walletgettransaction-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Wallet-related transaction|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Transaction with specified id not found in wallet|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"walletgettransaction-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletTransaction](#schemawallettransaction)]|false|none|[Transaction augmented with some useful information]|\n|\u00bb id|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Transaction inputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb spendingProof|[SpendingProof](#schemaspendingproof)|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb proofBytes|[SpendingProofBytes](#schemaspendingproofbytes)(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Transaction data inputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Transaction outputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|\u00bb scans|[integer]|true|none|Scan identifiers the transaction relates to|\n|\u00bb size|integer(int32)|false|none|Size in bytes|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletTransactionsByScanId",
      "level": 3,
      "content": "<a id=\"opIdwalletTransactionsByScanId\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/transactionsByScanId/{scanId} \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/transactionsByScanId/{scanId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transactionsByScanId/{scanId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/transactionsByScanId/{scanId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/transactionsByScanId/{scanId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/transactionsByScanId/{scanId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transactionsByScanId/{scanId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/transactionsByScanId/{scanId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/transactionsByScanId/{scanId}`\n\n*Get scan-related transactions by scan id*\n\n<h3 id=\"wallettransactionsbyscanid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|scanId|path|integer(int32)|true|identifier of a scan|\n|minInclusionHeight|query|integer(int32)|false|Minimal tx inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximal tx inclusion height|\n|minConfirmations|query|integer(int32)|false|Minimal confirmations number|\n|maxConfirmations|query|integer(int32)|false|Maximal confirmations number|\n|includeUnconfirmed|query|boolean|false|Include transactions from mempool|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"inclusionHeight\": 20998,\n        \"numConfirmations\": 20998,\n        \"scans\": [\n          1\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"wallettransactionsbyscanid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Scan-related transactions|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Transactions with related scan id not found in wallet|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"wallettransactionsbyscanid-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletTransaction](#schemawallettransaction)]|false|none|[Transaction augmented with some useful information]|\n|\u00bb id|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Transaction inputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb spendingProof|[SpendingProof](#schemaspendingproof)|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb proofBytes|[SpendingProofBytes](#schemaspendingproofbytes)(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Transaction data inputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Transaction outputs|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|\u00bb scans|[integer]|true|none|Scan identifiers the transaction relates to|\n|\u00bb size|integer(int32)|false|none|Size in bytes|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletBoxes",
      "level": 3,
      "content": "<a id=\"opIdwalletBoxes\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/boxes \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/boxes HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/boxes',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/boxes',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/boxes', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/boxes', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/boxes\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/boxes\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/boxes`\n\n*Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included.*\n\n<h3 id=\"walletboxes-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"box\": {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        },\n        \"confirmationsNum\": 147,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"onchain\": true,\n        \"spent\": false,\n        \"creationOutIndex\": 2,\n        \"scans\": [\n          1\n        ]\n      }\n    ]\n    ```\n\n<h3 id=\"walletboxes-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|A list of all wallet-related boxes|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"walletboxes-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletBox](#schemawalletbox)]|false|none|none|\n|\u00bb box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletBoxesCollect",
      "level": 3,
      "content": "<a id=\"opIdwalletBoxesCollect\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/boxes/collect \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/boxes/collect HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"targetAssets\": [\n        [\n          \"string\",\n          \"string\"\n        ]\n      ],\n      \"targetBalance\": 0\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/boxes/collect',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/boxes/collect',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/boxes/collect', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/boxes/collect', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/boxes/collect\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/boxes/collect\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/boxes/collect`\n\n*Get a list of collected boxes.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"targetAssets\": [\n        [\n          \"string\",\n          \"string\"\n        ]\n      ],\n      \"targetBalance\": 0\n    }\n    ```\n\n<h3 id=\"walletboxescollect-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[BoxesRequestHolder](#schemaboxesrequestholder)|true|This API method recieves balance and assets, according to which, it's collecting result|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"box\": {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        },\n        \"confirmationsNum\": 147,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"onchain\": true,\n        \"spent\": false,\n        \"creationOutIndex\": 2,\n        \"scans\": [\n          1\n        ]\n      }\n    ]\n    ```\n\n<h3 id=\"walletboxescollect-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|A list of all collected boxes|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"walletboxescollect-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletBox](#schemawalletbox)]|false|none|none|\n|\u00bb box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletUnspentBoxes",
      "level": 3,
      "content": "<a id=\"opIdwalletUnspentBoxes\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/boxes/unspent \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/boxes/unspent HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/boxes/unspent',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/boxes/unspent',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/boxes/unspent', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/boxes/unspent', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/boxes/unspent\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/boxes/unspent\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/boxes/unspent`\n\n*Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.*\n\n<h3 id=\"walletunspentboxes-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"box\": {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        },\n        \"confirmationsNum\": 147,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"onchain\": true,\n        \"spent\": false,\n        \"creationOutIndex\": 2,\n        \"scans\": [\n          1\n        ]\n      }\n    ]\n    ```\n\n<h3 id=\"walletunspentboxes-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|A list of unspent boxes|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"walletunspentboxes-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletBox](#schemawalletbox)]|false|none|none|\n|\u00bb box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletBalancesUnconfirmed",
      "level": 3,
      "content": "<a id=\"opIdwalletBalancesUnconfirmed\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/balances/withUnconfirmed \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/balances/withUnconfirmed HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/balances/withUnconfirmed',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/balances/withUnconfirmed',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/balances/withUnconfirmed', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/balances/withUnconfirmed', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/balances/withUnconfirmed\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/balances/withUnconfirmed\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/balances/withUnconfirmed`\n\n*Get summary amount of confirmed plus unconfirmed Ergo tokens and assets*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"height\": 0,\n      \"balance\": 0,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"walletbalancesunconfirmed-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Get summary amount of confirmed plus unconfirmed Ergo tokens and assets|[BalancesSnapshot](#schemabalancessnapshot)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletAddresses",
      "level": 3,
      "content": "<a id=\"opIdwalletAddresses\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /wallet/addresses \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /wallet/addresses HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/addresses',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/wallet/addresses',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/wallet/addresses', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/wallet/addresses', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/addresses\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/wallet/addresses\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /wallet/addresses`\n\n*Get wallet addresses*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ]\n    ```\n\n<h3 id=\"walletaddresses-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|String with encoded wallet addresses|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"walletaddresses-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoAddress](#schemaergoaddress)]|false|none|[Encoded Ergo Address]|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletTransactionGenerate",
      "level": 3,
      "content": "<a id=\"opIdwalletTransactionGenerate\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/transaction/generate \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/transaction/generate HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transaction/generate',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/transaction/generate',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/transaction/generate', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/transaction/generate', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transaction/generate\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/transaction/generate\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/transaction/generate`\n\n*Generate arbitrary transaction from array of requests.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\n<h3 id=\"wallettransactiongenerate-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[RequestsHolder](#schemarequestsholder)|true|This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \"assets\" and \"registers\" fields are not needed. For asset issuance request, \"registers\" field is not needed.|"
    },
    {
      "heading": "Detailed descriptions",
      "level": 5,
      "content": "**body**: This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \"assets\" and \"registers\" fields are not needed. For asset issuance request, \"registers\" field is not needed.\nYou may specify boxes to spend by providing them in \"inputsRaw\". Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \"inputsRaw\" empty.\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"wallettransactiongenerate-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Generated Ergo transaction|[ErgoTransaction](#schemaergotransaction)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad transaction request|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletUnsignedTransactionGenerate",
      "level": 3,
      "content": "<a id=\"opIdwalletUnsignedTransactionGenerate\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/transaction/generateUnsigned \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/transaction/generateUnsigned HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transaction/generateUnsigned',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/transaction/generateUnsigned',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/transaction/generateUnsigned', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/transaction/generateUnsigned', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transaction/generateUnsigned\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/transaction/generateUnsigned\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/transaction/generateUnsigned`\n\n*Generate unsigned transaction from array of requests.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\n<h3 id=\"walletunsignedtransactiongenerate-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[RequestsHolder](#schemarequestsholder)|true|The same as /wallet/transaction/generate but generates unsigned transaction.|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"walletunsignedtransactiongenerate-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Generated unsigned Ergo transaction|[UnsignedErgoTransaction](#schemaunsignedergotransaction)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad transaction request|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletTransactionSign",
      "level": 3,
      "content": "<a id=\"opIdwalletTransactionSign\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/transaction/sign \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/transaction/sign HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ],\n      \"hints\": {\n        \"secretHints\": [\n          {\n            \"01\": [\n              {\n                \"hint\": \"cmtWithSecret\",\n                \"pubkey\": {\n                  \"op\": -51,\n                  \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n                },\n                \"position\": \"0-1\",\n                \"type\": \"dlog\",\n                \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n                \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n              }\n            ]\n          }\n        ],\n        \"publicHints\": [\n          {\n            \"01\": [\n              {\n                \"hint\": \"cmtWithSecret\",\n                \"pubkey\": {\n                  \"op\": -51,\n                  \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n                },\n                \"position\": \"0-1\",\n                \"type\": \"dlog\",\n                \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n                \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n              }\n            ]\n          }\n        ]\n      },\n      \"secrets\": {\n        \"dlog\": [\n          \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n        ],\n        \"dht\": [\n          {\n            \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n            \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n          }\n        ]\n      }\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transaction/sign',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/transaction/sign',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/transaction/sign', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/transaction/sign', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transaction/sign\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/transaction/sign\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/transaction/sign`\n\n*Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ],\n      \"hints\": {\n        \"secretHints\": [\n          {\n            \"01\": [\n              {\n                \"hint\": \"cmtWithSecret\",\n                \"pubkey\": {\n                  \"op\": -51,\n                  \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n                },\n                \"position\": \"0-1\",\n                \"type\": \"dlog\",\n                \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n                \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n              }\n            ]\n          }\n        ],\n        \"publicHints\": [\n          {\n            \"01\": [\n              {\n                \"hint\": \"cmtWithSecret\",\n                \"pubkey\": {\n                  \"op\": -51,\n                  \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n                },\n                \"position\": \"0-1\",\n                \"type\": \"dlog\",\n                \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n                \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n              }\n            ]\n          }\n        ]\n      },\n      \"secrets\": {\n        \"dlog\": [\n          \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n        ],\n        \"dht\": [\n          {\n            \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n            \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n          }\n        ]\n      }\n    }\n    ```\n\n<h3 id=\"wallettransactionsign-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[TransactionSigningRequest](#schematransactionsigningrequest)|true|With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported.|"
    },
    {
      "heading": "Detailed descriptions",
      "level": 5,
      "content": "**body**: With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported.\nPlease note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \"inputsRaw\" and \"dataInputsRaw\" fields.\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"wallettransactionsign-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Generated Ergo transaction|[ErgoTransaction](#schemaergotransaction)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad transaction request|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletTransactionGenerateAndSend",
      "level": 3,
      "content": "<a id=\"opIdwalletTransactionGenerateAndSend\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/transaction/send \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/transaction/send HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/transaction/send',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/transaction/send',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/transaction/send', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/transaction/send', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/transaction/send\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/transaction/send\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/transaction/send`\n\n*Generate and send arbitrary transaction*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\n<h3 id=\"wallettransactiongenerateandsend-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[RequestsHolder](#schemarequestsholder)|true|See description of /wallet/transaction/generate|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"wallettransactiongenerateandsend-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Identifier of an Ergo transaction generated|[TransactionId](#schematransactionid)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad transaction request|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletPaymentTransactionGenerateAndSend",
      "level": 3,
      "content": "<a id=\"opIdwalletPaymentTransactionGenerateAndSend\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/payment/send \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/payment/send HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '[\n      {\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"value\": 1,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"registers\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        }\n      }\n    ]';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/payment/send',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/payment/send',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/payment/send', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/payment/send', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/payment/send\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/payment/send\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/payment/send`\n\n*Generate and send payment transaction (default fee of 0.001 Erg is used)*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"value\": 1,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"registers\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        }\n      }\n    ]\n    ```\n\n<h3 id=\"walletpaymenttransactiongenerateandsend-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[PaymentRequest](#schemapaymentrequest)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"walletpaymenttransactiongenerateandsend-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Identifier of an Ergo transaction generated|[TransactionId](#schematransactionid)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad payment request|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "walletGetPrivateKey",
      "level": 3,
      "content": "<a id=\"opIdwalletGetPrivateKey\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/getPrivateKey \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/getPrivateKey HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/getPrivateKey',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/getPrivateKey',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/getPrivateKey', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/getPrivateKey', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/getPrivateKey\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/getPrivateKey\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/getPrivateKey`\n\n*Get the private key corresponding to a known address*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ```\n\n<h3 id=\"walletgetprivatekey-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ErgoAddress](#schemaergoaddress)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n    ```\n\n<h3 id=\"walletgetprivatekey-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Successfully retrieved secret key|[DlogSecret](#schemadlogsecret)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Address not found in wallet database|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "generateCommitments",
      "level": 3,
      "content": "<a id=\"opIdgenerateCommitments\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/generateCommitments \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/generateCommitments HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"secrets\": {\n        \"dlog\": [\n          \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n        ],\n        \"dht\": [\n          {\n            \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n            \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n          }\n        ]\n      },\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/generateCommitments',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/generateCommitments',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/generateCommitments', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/generateCommitments', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/generateCommitments\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/generateCommitments\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/generateCommitments`\n\n*Generate signature commitments for inputs of an unsigned transaction*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"secrets\": {\n        \"dlog\": [\n          \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n        ],\n        \"dht\": [\n          {\n            \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n            \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n          }\n        ]\n      },\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\n<h3 id=\"generatecommitments-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[GenerateCommitmentsRequest](#schemageneratecommitmentsrequest)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"secretHints\": [\n        {\n          \"01\": [\n            {\n              \"hint\": \"cmtWithSecret\",\n              \"pubkey\": {\n                \"op\": -51,\n                \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n              },\n              \"position\": \"0-1\",\n              \"type\": \"dlog\",\n              \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n              \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n            }\n          ]\n        }\n      ],\n      \"publicHints\": [\n        {\n          \"01\": [\n            {\n              \"hint\": \"cmtWithSecret\",\n              \"pubkey\": {\n                \"op\": -51,\n                \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n              },\n              \"position\": \"0-1\",\n              \"type\": \"dlog\",\n              \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n              \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n            }\n          ]\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"generatecommitments-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Transaction-related hints|[TransactionHintsBag](#schematransactionhintsbag)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Error|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "extractHints",
      "level": 3,
      "content": "<a id=\"opIdextractHints\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /wallet/extractHints \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /wallet/extractHints HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"real\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ],\n      \"simulated\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ],\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/wallet/extractHints',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/wallet/extractHints',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/wallet/extractHints', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/wallet/extractHints', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/wallet/extractHints\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/wallet/extractHints\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /wallet/extractHints`\n\n*Extract hints from a transaction*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"real\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ],\n      \"simulated\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ],\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\n<h3 id=\"extracthints-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[HintExtractionRequest](#schemahintextractionrequest)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"secretHints\": [\n        {\n          \"01\": [\n            {\n              \"hint\": \"cmtWithSecret\",\n              \"pubkey\": {\n                \"op\": -51,\n                \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n              },\n              \"position\": \"0-1\",\n              \"type\": \"dlog\",\n              \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n              \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n            }\n          ]\n        }\n      ],\n      \"publicHints\": [\n        {\n          \"01\": [\n            {\n              \"hint\": \"cmtWithSecret\",\n              \"pubkey\": {\n                \"op\": -51,\n                \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n              },\n              \"position\": \"0-1\",\n              \"type\": \"dlog\",\n              \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n              \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n            }\n          ]\n        }\n      ]\n    }\n    ```\n\n<h3 id=\"extracthints-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Hints for the transaction|[TransactionHintsBag](#schematransactionhintsbag)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Error|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "mining",
      "level": 2,
      "content": ""
    },
    {
      "heading": "miningRequestBlockCandidate",
      "level": 3,
      "content": "<a id=\"opIdminingRequestBlockCandidate\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /mining/candidate \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /mining/candidate HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/mining/candidate',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/mining/candidate',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/mining/candidate', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/mining/candidate', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/mining/candidate\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/mining/candidate\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /mining/candidate`\n\n*Request block candidate*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"b\": 987654321,\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"proof\": {\n        \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n        \"txProofs\": [\n          {\n            \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n            \"levels\": [\n              [\n                \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n                0\n              ]\n            ]\n          }\n        ]\n      }\n    }\n    ```\n\n<h3 id=\"miningrequestblockcandidate-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|External candidate|[WorkMessage](#schemaworkmessage)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "miningRequestBlockCandidateWithMandatoryTransactions",
      "level": 3,
      "content": "<a id=\"opIdminingRequestBlockCandidateWithMandatoryTransactions\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /mining/candidateWithTxs \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /mining/candidateWithTxs HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '[\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      }\n    ]';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/mining/candidateWithTxs',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/mining/candidateWithTxs',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/mining/candidateWithTxs', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/mining/candidateWithTxs', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/mining/candidateWithTxs\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/mining/candidateWithTxs\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /mining/candidateWithTxs`\n\n*Request block candidate*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"miningrequestblockcandidatewithmandatorytransactions-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[Transactions](#schematransactions)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"b\": 987654321,\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"proof\": {\n        \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n        \"txProofs\": [\n          {\n            \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n            \"levels\": [\n              [\n                \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n                0\n              ]\n            ]\n          }\n        ]\n      }\n    }\n    ```\n\n<h3 id=\"miningrequestblockcandidatewithmandatorytransactions-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|External candidate|[WorkMessage](#schemaworkmessage)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "miningReadMinerRewardAddress",
      "level": 3,
      "content": "<a id=\"opIdminingReadMinerRewardAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /mining/rewardAddress \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /mining/rewardAddress HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/mining/rewardAddress',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/mining/rewardAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/mining/rewardAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/mining/rewardAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/mining/rewardAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/mining/rewardAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /mining/rewardAddress`\n\n*Read miner reward address*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"rewardAddress\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```\n\n<h3 id=\"miningreadminerrewardaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Miner Reward Script (in P2S format)|[RewardAddress](#schemarewardaddress)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "miningReadMinerRewardPubkey",
      "level": 3,
      "content": "<a id=\"opIdminingReadMinerRewardPubkey\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /mining/rewardPublicKey \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /mining/rewardPublicKey HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/mining/rewardPublicKey',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/mining/rewardPublicKey',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/mining/rewardPublicKey', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/mining/rewardPublicKey', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/mining/rewardPublicKey\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/mining/rewardPublicKey\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /mining/rewardPublicKey`\n\n*Read public key associated with miner rewards*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"rewardPubkey\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    }\n    ```\n\n<h3 id=\"miningreadminerrewardpubkey-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Public key for miner rewards (as hex-encoded secp256k1 point)|[RewardPubKey](#schemarewardpubkey)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "miningSubmitSolution",
      "level": 3,
      "content": "<a id=\"opIdminingSubmitSolution\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /mining/solution \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /mining/solution HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/mining/solution',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/mining/solution',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/mining/solution', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/mining/solution', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/mining/solution\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/mining/solution\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /mining/solution`\n\n*Submit solution for current candidate*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    }\n    ```\n\n<h3 id=\"miningsubmitsolution-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[PowSolutions](#schemapowsolutions)|true|none|\n\n> Example responses\n\n> 400 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"miningsubmitsolution-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Solution is valid|None|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Solution is invalid|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "utxo",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getBoxesBinaryProof",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesBinaryProof\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /utxo/getBoxesBinaryProof \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /utxo/getBoxesBinaryProof HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '[\n      \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/utxo/getBoxesBinaryProof',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/utxo/getBoxesBinaryProof',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/utxo/getBoxesBinaryProof', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/utxo/getBoxesBinaryProof', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/getBoxesBinaryProof\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/utxo/getBoxesBinaryProof\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /utxo/getBoxesBinaryProof`\n\n*Get serialized batch proof for given set of boxes*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    [\n      \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]\n    ```\n\n<h3 id=\"getboxesbinaryproof-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[TransactionBoxId](#schematransactionboxid)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"getboxesbinaryproof-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Serialized batch proof|[SerializedAdProof](#schemaserializedadproof)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Prove error|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "getBoxById",
      "level": 3,
      "content": "<a id=\"opIdgetBoxById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utxo/byId/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utxo/byId/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utxo/byId/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utxo/byId/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utxo/byId/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utxo/byId/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/byId/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utxo/byId/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utxo/byId/{boxId}`\n\n*Get box contents for a box by a unique identifier.*\n\n<h3 id=\"getboxbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a wanted box|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n    ```\n\n<h3 id=\"getboxbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Box object|[ErgoTransactionOutput](#schemaergotransactionoutput)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Box with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxByIdBinary",
      "level": 3,
      "content": "<a id=\"opIdgetBoxByIdBinary\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utxo/byIdBinary/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utxo/byIdBinary/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utxo/byIdBinary/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utxo/byIdBinary/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utxo/byIdBinary/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utxo/byIdBinary/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/byIdBinary/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utxo/byIdBinary/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utxo/byIdBinary/{boxId}`\n\n*Get serialized box from UTXO pool in Base16 encoding by an identifier.*\n\n<h3 id=\"getboxbyidbinary-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a wanted box|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\n<h3 id=\"getboxbyidbinary-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Json containing box identifier and hex-encoded box bytes|[SerializedBox](#schemaserializedbox)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Box with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxWithPoolById",
      "level": 3,
      "content": "<a id=\"opIdgetBoxWithPoolById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utxo/withPool/byId/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utxo/withPool/byId/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utxo/withPool/byId/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utxo/withPool/byId/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utxo/withPool/byId/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utxo/withPool/byId/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/withPool/byId/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utxo/withPool/byId/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utxo/withPool/byId/{boxId}`\n\n*Get box contents for a box by a unique identifier, from UTXO set and also the mempool.*\n\n<h3 id=\"getboxwithpoolbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a box to obtain|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n    ```\n\n<h3 id=\"getboxwithpoolbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Box object|[ErgoTransactionOutput](#schemaergotransactionoutput)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Box with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxWithPoolByIds",
      "level": 3,
      "content": "<a id=\"opIdgetBoxWithPoolByIds\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /utxo/withPool/byIds \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /utxo/withPool/byIds HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '[\n      \"string\"\n    ]';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/utxo/withPool/byIds',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/utxo/withPool/byIds',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/utxo/withPool/byIds', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/utxo/withPool/byIds', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/withPool/byIds\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/utxo/withPool/byIds\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /utxo/withPool/byIds`\n\n*Get boxes for ids provided, from UTXO or the mempool.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    [\n      \"string\"\n    ]\n    ```\n\n<h3 id=\"getboxwithpoolbyids-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|array[string]|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"getboxwithpoolbyids-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Box object|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No any box exists for every id provided|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxwithpoolbyids-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|false|none|none|\n|\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxWithPoolByIdBinary",
      "level": 3,
      "content": "<a id=\"opIdgetBoxWithPoolByIdBinary\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utxo/withPool/byIdBinary/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utxo/withPool/byIdBinary/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utxo/withPool/byIdBinary/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utxo/withPool/byIdBinary/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utxo/withPool/byIdBinary/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utxo/withPool/byIdBinary/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/withPool/byIdBinary/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utxo/withPool/byIdBinary/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utxo/withPool/byIdBinary/{boxId}`\n\n*Get serialized box in Base16 encoding by an identifier, considering also the mempool.*\n\n<h3 id=\"getboxwithpoolbyidbinary-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a wanted box|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\n<h3 id=\"getboxwithpoolbyidbinary-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Json containing box identifier and hex-encoded box bytes|[SerializedBox](#schemaserializedbox)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Box with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getSnapshotsInfo",
      "level": 3,
      "content": "<a id=\"opIdgetSnapshotsInfo\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utxo/getSnapshotsInfo\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utxo/getSnapshotsInfo HTTP/1.1\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    fetch('/utxo/getSnapshotsInfo',\n    {\n      method: 'GET'\n    \n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    result = RestClient.get '/utxo/getSnapshotsInfo',\n      params: {\n      }\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    \n    r = requests.get('/utxo/getSnapshotsInfo')\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utxo/getSnapshotsInfo', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/getSnapshotsInfo\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utxo/getSnapshotsInfo\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utxo/getSnapshotsInfo`\n\n*Get information about locally stored UTXO snapshots*\n\n<h3 id=\"getsnapshotsinfo-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|A list of saved snapshots|None|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "genesisBoxes",
      "level": 3,
      "content": "<a id=\"opIdgenesisBoxes\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /utxo/genesis \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /utxo/genesis HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/utxo/genesis',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/utxo/genesis',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/utxo/genesis', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/utxo/genesis', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/utxo/genesis\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/utxo/genesis\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /utxo/genesis`\n\n*Get genesis boxes (boxes existed before the very first block)*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n    ```\n\n<h3 id=\"genesisboxes-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|A list of all the genesis boxes|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Box with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"genesisboxes-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|false|none|none|\n|\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "script",
      "level": 2,
      "content": ""
    },
    {
      "heading": "scriptP2SAddress",
      "level": 3,
      "content": "<a id=\"opIdscriptP2SAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /script/p2sAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /script/p2sAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"source\": \"string\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/script/p2sAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/script/p2sAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/script/p2sAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/script/p2sAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/script/p2sAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/script/p2sAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /script/p2sAddress`\n\n*Create P2SAddress from Sigma source*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"source\": \"string\"\n    }\n    ```\n\n<h3 id=\"scriptp2saddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[SourceHolder](#schemasourceholder)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```\n\n<h3 id=\"scriptp2saddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Ergo address derived from source|[AddressHolder](#schemaaddressholder)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad source|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "scriptP2SHAddress",
      "level": 3,
      "content": "<a id=\"opIdscriptP2SHAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /script/p2shAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /script/p2shAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"source\": \"string\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/script/p2shAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/script/p2shAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/script/p2shAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/script/p2shAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/script/p2shAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/script/p2shAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /script/p2shAddress`\n\n*Create P2SHAddress from Sigma source*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"source\": \"string\"\n    }\n    ```\n\n<h3 id=\"scriptp2shaddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[SourceHolder](#schemasourceholder)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```\n\n<h3 id=\"scriptp2shaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|P2SH address derived from source|[AddressHolder](#schemaaddressholder)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad source|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "addressToTree",
      "level": 3,
      "content": "<a id=\"opIdaddressToTree\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /script/addressToTree/{address} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /script/addressToTree/{address} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/script/addressToTree/{address}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/script/addressToTree/{address}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/script/addressToTree/{address}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/script/addressToTree/{address}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/script/addressToTree/{address}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/script/addressToTree/{address}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /script/addressToTree/{address}`\n\n*Convert an address to hex-encoded serialized ErgoTree (script)*\n\n<h3 id=\"addresstotree-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|[ErgoAddress](#schemaergoaddress)|true|address to get a script from|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"tree\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    }\n    ```\n\n<h3 id=\"addresstotree-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Base16-encoded ErgoTree (script)|[ErgoTreeObject](#schemaergotreeobject)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "addressToBytes",
      "level": 3,
      "content": "<a id=\"opIdaddressToBytes\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /script/addressToBytes/{address} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /script/addressToBytes/{address} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/script/addressToBytes/{address}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/script/addressToBytes/{address}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/script/addressToBytes/{address}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/script/addressToBytes/{address}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/script/addressToBytes/{address}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/script/addressToBytes/{address}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /script/addressToBytes/{address}`\n\n*Convert an address to hex-encoded Sigma byte array constant which contains script bytes*\n\n<h3 id=\"addresstobytes-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|[ErgoAddress](#schemaergoaddress)|true|address to get a script from|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\n<h3 id=\"addresstobytes-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Base16-encoded Sigma byte array constant which contains script bytes|[ScriptBytes](#schemascriptbytes)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "executeWithContext",
      "level": 3,
      "content": "<a id=\"opIdexecuteWithContext\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /script/executeWithContext \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /script/executeWithContext HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"script\": \"string\",\n      \"namedConstants\": {},\n      \"context\": {\n        \"lastBlockUtxoRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"headers\": [\n          {\n            \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"timestamp\": 1524143059077,\n            \"version\": 2,\n            \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"stateRoot\": {\n              \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"treeFlags\": 0,\n              \"keyLength\": 0,\n              \"valueLength\": 0\n            },\n            \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"nBits\": 19857408,\n            \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"height\": 667,\n            \"size\": 667,\n            \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powSolutions\": {\n              \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n              \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n              \"n\": \"0000000000000000\",\n              \"d\": 987654321\n            },\n            \"votes\": \"000000\",\n            \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powDistance\": 123456789\n          }\n        ],\n        \"preHeader\": {\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"nBits\": 19857408,\n          \"height\": 667,\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n        },\n        \"dataBoxes\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"boxesToSpend\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"spendingTransaction\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ]\n        },\n        \"selfIndex\": 0,\n        \"extension\": {},\n        \"validationSettings\": \"10e8070001e9070001ea070001eb070001ec070001ed070001ee070001ef070001f0070001f1070001f2070001f3070001f4070001f5070001f6070001f7070001\",\n        \"costLimit\": 0,\n        \"initCost\": 0\n      }\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/script/executeWithContext',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/script/executeWithContext',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/script/executeWithContext', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/script/executeWithContext', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/script/executeWithContext\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/script/executeWithContext\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /script/executeWithContext`\n\n*Execute script with context*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"script\": \"string\",\n      \"namedConstants\": {},\n      \"context\": {\n        \"lastBlockUtxoRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"headers\": [\n          {\n            \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"timestamp\": 1524143059077,\n            \"version\": 2,\n            \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"stateRoot\": {\n              \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"treeFlags\": 0,\n              \"keyLength\": 0,\n              \"valueLength\": 0\n            },\n            \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"nBits\": 19857408,\n            \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"height\": 667,\n            \"size\": 667,\n            \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powSolutions\": {\n              \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n              \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n              \"n\": \"0000000000000000\",\n              \"d\": 987654321\n            },\n            \"votes\": \"000000\",\n            \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powDistance\": 123456789\n          }\n        ],\n        \"preHeader\": {\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"nBits\": 19857408,\n          \"height\": 667,\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n        },\n        \"dataBoxes\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"boxesToSpend\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"spendingTransaction\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ]\n        },\n        \"selfIndex\": 0,\n        \"extension\": {},\n        \"validationSettings\": \"10e8070001e9070001ea070001eb070001ec070001ed070001ee070001ef070001f0070001f1070001f2070001f3070001f4070001f5070001f6070001f7070001\",\n        \"costLimit\": 0,\n        \"initCost\": 0\n      }\n    }\n    ```\n\n<h3 id=\"executewithcontext-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ExecuteScript](#schemaexecutescript)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"value\": {\n        \"op\": -45,\n        \"condition\": true\n      },\n      \"cost\": 10\n    }\n    ```\n\n<h3 id=\"executewithcontext-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Result of reduceToCrypto|[CryptoResult](#schemacryptoresult)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Compiler error|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "scan",
      "level": 2,
      "content": ""
    },
    {
      "heading": "registerScan",
      "level": 3,
      "content": "<a id=\"opIdregisterScan\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /scan/register \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /scan/register HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"scanName\": \"Assets Tracker\",\n      \"walletInteraction\": \"off\",\n      \"removeOffchain\": true,\n      \"trackingRule\": {\n        \"predicate\": \"containsAsset\",\n        \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n      }\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/register',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/scan/register',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/scan/register', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/scan/register', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/register\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/scan/register\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /scan/register`\n\n*Register a scan*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanName\": \"Assets Tracker\",\n      \"walletInteraction\": \"off\",\n      \"removeOffchain\": true,\n      \"trackingRule\": {\n        \"predicate\": \"containsAsset\",\n        \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n      }\n    }\n    ```\n\n<h3 id=\"registerscan-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ScanRequest](#schemascanrequest)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0\n    }\n    ```\n\n<h3 id=\"registerscan-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Identifier of a scan generated|[ScanId](#schemascanid)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad request|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "deregisterScan",
      "level": 3,
      "content": "<a id=\"opIdderegisterScan\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /scan/deregister \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /scan/deregister HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"scanId\": 0\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/deregister',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/scan/deregister',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/scan/deregister', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/scan/deregister', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/deregister\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/scan/deregister\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /scan/deregister`\n\n*Stop tracking and deregister scan*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0\n    }\n    ```\n\n<h3 id=\"deregisterscan-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ScanId](#schemascanid)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0\n    }\n    ```\n\n<h3 id=\"deregisterscan-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Identifier of a scan removed|[ScanId](#schemascanid)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|No scan found|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "listAllScans",
      "level": 3,
      "content": "<a id=\"opIdlistAllScans\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /scan/listAll \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /scan/listAll HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/listAll',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/scan/listAll',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/scan/listAll', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/scan/listAll', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/listAll\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/scan/listAll\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /scan/listAll`\n\n*List all the registered scans*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"scanId\": 2,\n        \"scanName\": \"Assets Tracker\",\n        \"walletInteraction\": \"off\",\n        \"removeOffchain\": true,\n        \"trackingRule\": {\n          \"predicate\": \"containsAsset\",\n          \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n        }\n      }\n    ]\n    ```\n\n<h3 id=\"listallscans-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|List of scans registered|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"listallscans-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[Scan](#schemascan)]|false|none|none|\n|\u00bb scanName|string|false|none|none|\n|\u00bb scanId|integer|false|none|none|\n|\u00bb walletInteraction|string|false|none|none|\n|\u00bb removeOffchain|boolean|false|none|none|\n|\u00bb trackingRule|[ScanningPredicate](#schemascanningpredicate)|false|none|none|\n|\u00bb\u00bb predicate|string|true|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|walletInteraction|off|\n|walletInteraction|shared|\n|walletInteraction|forced|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "listUnspentScans",
      "level": 3,
      "content": "<a id=\"opIdlistUnspentScans\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /scan/unspentBoxes/{scanId} \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /scan/unspentBoxes/{scanId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/unspentBoxes/{scanId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/scan/unspentBoxes/{scanId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/scan/unspentBoxes/{scanId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/scan/unspentBoxes/{scanId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/unspentBoxes/{scanId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/scan/unspentBoxes/{scanId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /scan/unspentBoxes/{scanId}`\n\n*List boxes which are not spent.*\n\n<h3 id=\"listunspentscans-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|scanId|path|integer(int32)|true|identifier of a scan|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"box\": {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        },\n        \"confirmationsNum\": 147,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"onchain\": true,\n        \"spent\": false,\n        \"creationOutIndex\": 2,\n        \"scans\": [\n          1\n        ]\n      }\n    ]\n    ```\n\n<h3 id=\"listunspentscans-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|List of unspent boxes|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"listunspentscans-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletBox](#schemawalletbox)]|false|none|none|\n|\u00bb box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "listSpentScans",
      "level": 3,
      "content": "<a id=\"opIdlistSpentScans\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /scan/spentBoxes/{scanId} \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /scan/spentBoxes/{scanId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/spentBoxes/{scanId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.get '/scan/spentBoxes/{scanId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.get('/scan/spentBoxes/{scanId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/scan/spentBoxes/{scanId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/spentBoxes/{scanId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/scan/spentBoxes/{scanId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /scan/spentBoxes/{scanId}`\n\n*List boxes which are spent.*\n\n<h3 id=\"listspentscans-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|scanId|path|integer(int32)|true|identifier of a scan|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"box\": {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        },\n        \"confirmationsNum\": 147,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"onchain\": true,\n        \"spent\": false,\n        \"creationOutIndex\": 2,\n        \"scans\": [\n          1\n        ]\n      }\n    ]\n    ```\n\n<h3 id=\"listspentscans-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|List of spent boxes|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"listspentscans-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[WalletBox](#schemawalletbox)]|false|none|none|\n|\u00bb box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "scanStopTracking",
      "level": 3,
      "content": "<a id=\"opIdscanStopTracking\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /scan/stopTracking \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /scan/stopTracking HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"scanId\": 0,\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/stopTracking',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/scan/stopTracking',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/scan/stopTracking', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/scan/stopTracking', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/stopTracking\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/scan/stopTracking\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /scan/stopTracking`\n\n*Stop scan-related box tracking*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0,\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\n<h3 id=\"scanstoptracking-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ScanIdBoxId](#schemascanidboxid)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0,\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\n<h3 id=\"scanstoptracking-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|The box is not tracked anymore|[ScanIdBoxId](#schemascanidboxid)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "scriptP2SRule",
      "level": 3,
      "content": "<a id=\"opIdscriptP2SRule\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /scan/p2sRule \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /scan/p2sRule HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '4MQyML64GnzMxZgm';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/p2sRule',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/scan/p2sRule',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/scan/p2sRule', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/scan/p2sRule', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/p2sRule\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/scan/p2sRule\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /scan/p2sRule`\n\n*Create and register a scan to track P2S address provided*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"4MQyML64GnzMxZgm\"\n    ```\n\n<h3 id=\"scriptp2srule-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0\n    }\n    ```\n\n<h3 id=\"scriptp2srule-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Id of custom scan generated and registered|[ScanId](#schemascanid)|\n|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|Bad source|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "addBox",
      "level": 3,
      "content": "<a id=\"opIdaddBox\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /scan/addBox \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /scan/addBox HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '{\n      \"scanIds\": [\n        0\n      ],\n      \"box\": {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    }';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/scan/addBox',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/scan/addBox',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/scan/addBox', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/scan/addBox', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/scan/addBox\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/scan/addBox\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /scan/addBox`\n\n*Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanIds\": [\n        0\n      ],\n      \"box\": {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    }\n    ```\n\n<h3 id=\"addbox-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|[ScanIdsBox](#schemascanidsbox)|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\n<h3 id=\"addbox-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|It the box is added successfully, then its id is returned|[TransactionId](#schematransactionid)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "node",
      "level": 2,
      "content": ""
    },
    {
      "heading": "nodeShutdown",
      "level": 3,
      "content": "<a id=\"opIdnodeShutdown\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /node/shutdown \\\n      -H 'Accept: application/json' \\\n      -H 'api_key: API_KEY'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /node/shutdown HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json',\n      'api_key':'API_KEY'\n    };\n    \n    fetch('/node/shutdown',\n    {\n      method: 'POST',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json',\n      'api_key' => 'API_KEY'\n    }\n    \n    result = RestClient.post '/node/shutdown',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json',\n      'api_key': 'API_KEY'\n    }\n    \n    r = requests.post('/node/shutdown', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n        'api_key' => 'API_KEY',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/node/shutdown', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/node/shutdown\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n            \"api_key\": []string{\"API_KEY\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/node/shutdown\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /node/shutdown`\n\n*Shuts down the node*\n\n> Example responses\n\n> default Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\n<h3 id=\"nodeshutdown-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|The node will be shut down in 5 seconds|None|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"warning\">\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )\n</aside>"
    },
    {
      "heading": "emission",
      "level": 2,
      "content": ""
    },
    {
      "heading": "emissionAt",
      "level": 3,
      "content": "<a id=\"opIdemissionAt\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /emission/at/{blockHeight} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /emission/at/{blockHeight} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/emission/at/{blockHeight}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/emission/at/{blockHeight}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/emission/at/{blockHeight}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/emission/at/{blockHeight}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/emission/at/{blockHeight}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/emission/at/{blockHeight}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /emission/at/{blockHeight}`\n\n*Get emission data for a given height*\n\n<h3 id=\"emissionat-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|blockHeight|path|integer(int32)|true|Height to get emission data for|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"minerReward\": 0,\n      \"totalCoinsIssued\": 0,\n      \"totalRemainCoins\": 0,\n      \"reemitted\": 0\n    }\n    ```\n\n<h3 id=\"emissionat-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Emission data|[EmissionInfo](#schemaemissioninfo)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "emissionScripts",
      "level": 3,
      "content": "<a id=\"opIdemissionScripts\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /emission/scripts \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /emission/scripts HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/emission/scripts',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/emission/scripts',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/emission/scripts', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/emission/scripts', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/emission/scripts\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/emission/scripts\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /emission/scripts`\n\n*Print emission-related scripts*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"emission\": \"string\",\n      \"reemission\": \"string\",\n      \"pay2Reemission\": \"string\"\n    }\n    ```\n\n<h3 id=\"emissionscripts-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Emission-related scripts|[EmissionScripts](#schemaemissionscripts)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "blockchain",
      "level": 2,
      "content": ""
    },
    {
      "heading": "getIndexedHeight",
      "level": 3,
      "content": "<a id=\"opIdgetIndexedHeight\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/indexedHeight \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/indexedHeight HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/indexedHeight',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/indexedHeight',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/indexedHeight', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/indexedHeight', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/indexedHeight\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/indexedHeight\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/indexedHeight`\n\n*Get current indexed block height. (The indexer has processed all blocks up to this height.)*\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"indexedHeight\": 0,\n      \"fullHeight\": 0\n    }\n    ```\n\n<h3 id=\"getindexedheight-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|height of the indexer and full height|Inline|\n\n<h3 id=\"getindexedheight-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb indexedHeight|integer|false|none|number of blocks indexed|\n|\u00bb fullHeight|integer|false|none|number of all known blocks|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getTxById",
      "level": 3,
      "content": "<a id=\"opIdgetTxById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/transaction/byId/{txId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/transaction/byId/{txId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/transaction/byId/{txId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/transaction/byId/{txId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/transaction/byId/{txId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/transaction/byId/{txId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/transaction/byId/{txId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/transaction/byId/{txId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/transaction/byId/{txId}`\n\n*Retrieve a transaction by its id*\n\n<h3 id=\"gettxbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txId|path|string|true|id of the wanted transaction|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"inclusionHeight\": 20998,\n      \"numConfirmations\": 20998,\n      \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"index\": 3,\n      \"globalIndex\": 3565445,\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"gettxbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|transaction with wanted id|[IndexedErgoTransaction](#schemaindexedergotransaction)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Transaction with this id doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getTxByIndex",
      "level": 3,
      "content": "<a id=\"opIdgetTxByIndex\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/transaction/byIndex/{txIndex} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/transaction/byIndex/{txIndex} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/transaction/byIndex/{txIndex}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/transaction/byIndex/{txIndex}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/transaction/byIndex/{txIndex}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/transaction/byIndex/{txIndex}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/transaction/byIndex/{txIndex}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/transaction/byIndex/{txIndex}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/transaction/byIndex/{txIndex}`\n\n*Retrieve a transaction by global index number*\n\n<h3 id=\"gettxbyindex-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txIndex|path|number|true|index of the wanted transaction|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"inclusionHeight\": 20998,\n      \"numConfirmations\": 20998,\n      \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"index\": 3,\n      \"globalIndex\": 3565445,\n      \"size\": 0\n    }\n    ```\n\n<h3 id=\"gettxbyindex-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|transaction with wanted index|[IndexedErgoTransaction](#schemaindexedergotransaction)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Transaction with this index doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getTxsByAddress",
      "level": 3,
      "content": "<a id=\"opIdgetTxsByAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blockchain/transaction/byAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blockchain/transaction/byAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/transaction/byAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blockchain/transaction/byAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blockchain/transaction/byAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blockchain/transaction/byAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/transaction/byAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blockchain/transaction/byAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blockchain/transaction/byAddress`\n\n*Retrieve transactions by their associated address*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\\\"\"\n    ```\n\n<h3 id=\"gettxsbyaddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"items\": [\n        {\n          \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ],\n          \"inclusionHeight\": 20998,\n          \"numConfirmations\": 20998,\n          \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"index\": 3,\n          \"globalIndex\": 3565445,\n          \"size\": 0\n        }\n      ],\n      \"total\": 0\n    }\n    ```\n\n<h3 id=\"gettxsbyaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|transactions associated with wanted address|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No transactions found for wanted address|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"gettxsbyaddress-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[[IndexedErgoTransaction](#schemaindexedergotransaction)]|false|none|Array of transactions|\n|\u00bb\u00bb id|[TransactionId](#schematransactionid)(base16)|true|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Transaction inputs|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb spendingProof|[SpendingProof](#schemaspendingproof)|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb\u00bb proofBytes|[SpendingProofBytes](#schemaspendingproofbytes)(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Transaction data inputs|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Transaction outputs|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb\u00bb numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|\u00bb\u00bb blockId|[ModifierId](#schemamodifierid)(base16)|true|none|Id of the block the transaction was included in|\n|\u00bb\u00bb timestamp|[Timestamp](#schematimestamp)(int64)|true|none|Basic timestamp definition|\n|\u00bb\u00bb index|integer(int32)|true|none|index of the transaction in the block it was included in|\n|\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the transaction in the blockchain|\n|\u00bb\u00bb size|integer(int32)|true|none|Size in bytes|\n|\u00bb total|integer|false|none|Total count of retreived transactions|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getTxRange",
      "level": 3,
      "content": "<a id=\"opIdgetTxRange\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/transaction/range \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/transaction/range HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/transaction/range',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/transaction/range',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/transaction/range', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/transaction/range', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/transaction/range\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/transaction/range\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/transaction/range`\n\n*Get a range of transaction ids*\n\n<h3 id=\"gettxrange-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]\n    ```\n\n<h3 id=\"gettxrange-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|transactions ids in wanted range|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"gettxrange-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of transaction ids*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ModifierId](#schemamodifierid)]|false|none|Array of transaction ids|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxById",
      "level": 3,
      "content": "<a id=\"opIdgetBoxById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/box/byId/{boxId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/box/byId/{boxId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/byId/{boxId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/box/byId/{boxId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/box/byId/{boxId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/box/byId/{boxId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/byId/{boxId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/box/byId/{boxId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/box/byId/{boxId}`\n\n*Retrieve a box by its id*\n\n<h3 id=\"getboxbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|id of the wanted box|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n    ```\n\n<h3 id=\"getboxbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|box with wanted id|[IndexedErgoBox](#schemaindexedergobox)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No box found with wanted id|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxByIndex",
      "level": 3,
      "content": "<a id=\"opIdgetBoxByIndex\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/box/byIndex/{boxIndex} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/box/byIndex/{boxIndex} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/byIndex/{boxIndex}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/box/byIndex/{boxIndex}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/box/byIndex/{boxIndex}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/box/byIndex/{boxIndex}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/byIndex/{boxIndex}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/box/byIndex/{boxIndex}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/box/byIndex/{boxIndex}`\n\n*Retrieve a box by global index number*\n\n<h3 id=\"getboxbyindex-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxIndex|path|number|true|index of the wanted box|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n    ```\n\n<h3 id=\"getboxbyindex-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|box with wanted index|[IndexedErgoBox](#schemaindexedergobox)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Box with this index doesn't exist|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxesByTokenId",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesByTokenId\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/box/byTokenId/{tokenId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/box/byTokenId/{tokenId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/byTokenId/{tokenId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/box/byTokenId/{tokenId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/box/byTokenId/{tokenId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/box/byTokenId/{tokenId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/byTokenId/{tokenId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/box/byTokenId/{tokenId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/box/byTokenId/{tokenId}`\n\n*Retrieve boxes by an associated token id*\n\n<h3 id=\"getboxesbytokenid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|[ModifierId](#schemamodifierid)|true|id of the token|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"items\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0,\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingHeight\": 147,\n          \"inclusionHeight\": 147,\n          \"globalIndex\": 83927\n        }\n      ],\n      \"total\": 0\n    }\n    ```\n\n<h3 id=\"getboxesbytokenid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|boxes associated with wanted token|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No boxes found for wanted token|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxesbytokenid-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\n\n*allOf*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n*and*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\n\n*continued*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxesByTokenIdUnspent",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesByTokenIdUnspent\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/box/unspent/byTokenId/{tokenId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/box/unspent/byTokenId/{tokenId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/unspent/byTokenId/{tokenId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/box/unspent/byTokenId/{tokenId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/box/unspent/byTokenId/{tokenId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/box/unspent/byTokenId/{tokenId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/unspent/byTokenId/{tokenId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/box/unspent/byTokenId/{tokenId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/box/unspent/byTokenId/{tokenId}`\n\n*Retrieve unspent boxes by an associated token id*\n\n<h3 id=\"getboxesbytokenidunspent-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|[ModifierId](#schemamodifierid)|true|id of the token|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|sortDirection|query|string|false|desc = new boxes first ; asc = old boxes first|\n|includeUnconfirmed|query|boolean|false|if true include unconfirmed transactions from mempool|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"globalIndex\": 83927\n      }\n    ]\n    ```\n\n<h3 id=\"getboxesbytokenidunspent-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|unspent boxes associated with wanted token|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No unspent boxes found for wanted token|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxesbytokenidunspent-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of boxes*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[allOf]|false|none|Array of boxes|\n\n*allOf*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n*and*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb\u00bb spentTransactionId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxesByAddress",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesByAddress\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blockchain/box/byAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blockchain/box/byAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/byAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blockchain/box/byAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blockchain/box/byAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blockchain/box/byAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/byAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blockchain/box/byAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blockchain/box/byAddress`\n\n*Retrieve boxes by their associated address*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\\\"\"\n    ```\n\n<h3 id=\"getboxesbyaddress-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"items\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0,\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingHeight\": 147,\n          \"inclusionHeight\": 147,\n          \"globalIndex\": 83927\n        }\n      ],\n      \"total\": 0\n    }\n    ```\n\n<h3 id=\"getboxesbyaddress-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|boxes associated with wanted address|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No boxes found for wanted address|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxesbyaddress-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\n\n*allOf*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n*and*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\n\n*continued*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxesByAddressUnspent",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesByAddressUnspent\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blockchain/box/unspent/byAddress \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blockchain/box/unspent/byAddress HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/unspent/byAddress',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blockchain/box/unspent/byAddress',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blockchain/box/unspent/byAddress', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blockchain/box/unspent/byAddress', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/unspent/byAddress\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blockchain/box/unspent/byAddress\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blockchain/box/unspent/byAddress`\n\n*Retrieve unspent boxes by their associated address*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\\\"\"\n    ```\n\n<h3 id=\"getboxesbyaddressunspent-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|sortDirection|query|string|false|desc = new boxes first ; asc = old boxes first|\n|includeUnconfirmed|query|boolean|false|if true include unconfirmed transactions from mempool|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0,\n        \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n        \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingHeight\": 147,\n        \"inclusionHeight\": 147,\n        \"globalIndex\": 83927\n      }\n    ]\n    ```\n\n<h3 id=\"getboxesbyaddressunspent-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|unspent boxes associated with wanted address|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No unspent boxes found for wanted address|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxesbyaddressunspent-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of boxes*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[allOf]|false|none|Array of boxes|\n\n*allOf*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n|\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n*and*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb\u00bb spentTransactionId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxRange",
      "level": 3,
      "content": "<a id=\"opIdgetBoxRange\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/box/range \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/box/range HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/range',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/box/range',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/box/range', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/box/range', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/range\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/box/range\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/box/range`\n\n*Get a range of box ids*\n\n<h3 id=\"getboxrange-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    [\n      \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]\n    ```\n\n<h3 id=\"getboxrange-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|box ids in wanted range|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxrange-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n*Array of box ids*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ModifierId](#schemamodifierid)]|false|none|Array of box ids|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxesByErgoTree",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesByErgoTree\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blockchain/box/byErgoTree \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blockchain/box/byErgoTree HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/byErgoTree',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blockchain/box/byErgoTree',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blockchain/box/byErgoTree', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blockchain/box/byErgoTree', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/byErgoTree\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blockchain/box/byErgoTree\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blockchain/box/byErgoTree`\n\n*Retrieve boxes by their associated ergotree*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\\\"\"\n    ```\n\n<h3 id=\"getboxesbyergotree-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"items\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0,\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingHeight\": 147,\n          \"inclusionHeight\": 147,\n          \"globalIndex\": 83927\n        }\n      ],\n      \"total\": 0\n    }\n    ```\n\n<h3 id=\"getboxesbyergotree-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|boxes with wanted ergotree|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxesbyergotree-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\n\n*allOf*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n*and*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\n\n*continued*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getBoxesByErgoTreeUnspent",
      "level": 3,
      "content": "<a id=\"opIdgetBoxesByErgoTreeUnspent\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blockchain/box/unspent/byErgoTree \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blockchain/box/unspent/byErgoTree HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/box/unspent/byErgoTree',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blockchain/box/unspent/byErgoTree',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blockchain/box/unspent/byErgoTree', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blockchain/box/unspent/byErgoTree', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/box/unspent/byErgoTree\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blockchain/box/unspent/byErgoTree\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blockchain/box/unspent/byErgoTree`\n\n*Retrieve unspent boxes by their associated ergotree*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\\\"\"\n    ```\n\n<h3 id=\"getboxesbyergotreeunspent-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|sortDirection|query|string|false|desc = new boxes first ; asc = old boxes first|\n|includeUnconfirmed|query|boolean|false|if true include unconfirmed transactions from mempool|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"items\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0,\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingHeight\": 147,\n          \"inclusionHeight\": 147,\n          \"globalIndex\": 83927\n        }\n      ],\n      \"total\": 0\n    }\n    ```\n\n<h3 id=\"getboxesbyergotreeunspent-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|unspent boxes with wanted ergotree|Inline|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No unspent box found with wanted ergotree|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getboxesbyergotreeunspent-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\n\n*allOf*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n|\u00bb\u00bb\u00bb boxId|[TransactionBoxId](#schematransactionboxid)(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|[ErgoTree](#schemaergotree)(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|[Digest32](#schemadigest32)(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb **additionalProperties**|[SValue](#schemasvalue)(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|[TransactionId](#schematransactionid)(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n\n*and*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb *anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|[ModifierId](#schemamodifierid)(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\n\n*continued*\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getTokenById",
      "level": 3,
      "content": "<a id=\"opIdgetTokenById\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X GET /blockchain/token/byId/{tokenId} \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    GET /blockchain/token/byId/{tokenId} HTTP/1.1\n    \n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    \n    const headers = {\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/token/byId/{tokenId}',\n    {\n      method: 'GET',\n    \n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.get '/blockchain/token/byId/{tokenId}',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Accept': 'application/json'\n    }\n    \n    r = requests.get('/blockchain/token/byId/{tokenId}', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('GET','/blockchain/token/byId/{tokenId}', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/token/byId/{tokenId}\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"GET\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"GET\", \"/blockchain/token/byId/{tokenId}\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`GET /blockchain/token/byId/{tokenId}`\n\n*Retrieve minting information about a token*\n\n<h3 id=\"gettokenbyid-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|string|true|id of the wanted token|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"boxId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"emissionAmount\": 3500000,\n      \"name\": \"string\",\n      \"description\": \"string\",\n      \"decimals\": 8\n    }\n    ```\n\n<h3 id=\"gettokenbyid-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|token with wanted id|[IndexedToken](#schemaindexedtoken)|\n|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|No token found with wanted id|[ApiError](#schemaapierror)|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "getAddressBalanceTotal",
      "level": 3,
      "content": "<a id=\"opIdgetAddressBalanceTotal\"></a>\n\n> Code samples\n\n=== \"shell\"\n\n    ```shell\n    ## You can also use wget\n    curl -X POST /blockchain/balance \\\n      -H 'Content-Type: application/json' \\\n      -H 'Accept: application/json'\n    ```\n\n=== \"http\"\n\n    ```http\n    POST /blockchain/balance HTTP/1.1\n    \n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n=== \"javascript\"\n\n    ```javascript\n    const inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\n    const headers = {\n      'Content-Type':'application/json',\n      'Accept':'application/json'\n    };\n    \n    fetch('/blockchain/balance',\n    {\n      method: 'POST',\n      body: inputBody,\n      headers: headers\n    })\n    .then(function(res) {\n        return res.json();\n    }).then(function(body) {\n        console.log(body);\n    });\n    ```\n\n=== \"ruby\"\n\n    ```ruby\n    require 'rest-client'\n    require 'json'\n    \n    headers = {\n      'Content-Type' => 'application/json',\n      'Accept' => 'application/json'\n    }\n    \n    result = RestClient.post '/blockchain/balance',\n      params: {\n      }, headers: headers\n    \n    p JSON.parse(result)\n    ```\n\n=== \"python\"\n\n    ```python\n    import requests\n    headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n    \n    r = requests.post('/blockchain/balance', headers = headers)\n    \n    print(r.json())\n    ```\n\n=== \"php\"\n\n    ```php\n    <?php\n    \n    require 'vendor/autoload.php';\n    \n    $headers = array(\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    );\n    \n    $client = new \\GuzzleHttp\\Client();\n    \n    // Define array of request body.\n    $request_body = array();\n    \n    try {\n        $response = $client->request('POST','/blockchain/balance', array(\n            'headers' => $headers,\n            'json' => $request_body,\n           )\n        );\n        print_r($response->getBody()->getContents());\n     }\n     catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n        // handle exception or api errors.\n        print_r($e->getMessage());\n     }\n    \n     // ...\n    ```\n\n=== \"java\"\n\n    ```java\n    URL obj = new URL(\"/blockchain/balance\");\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    con.setRequestMethod(\"POST\");\n    int responseCode = con.getResponseCode();\n    BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    System.out.println(response.toString());\n    ```\n\n=== \"go\"\n\n    ```go\n    package main\n    \n    import (\n           \"bytes\"\n           \"net/http\"\n    )\n    \n    func main() {\n    \n        headers := map[string][]string{\n            \"Content-Type\": []string{\"application/json\"},\n            \"Accept\": []string{\"application/json\"},\n        }\n    \n        data := bytes.NewBuffer([]byte{jsonReq})\n        req, err := http.NewRequest(\"POST\", \"/blockchain/balance\", data)\n        req.Header = headers\n    \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        // ...\n    }\n    ```\n\n`POST /blockchain/balance`\n\n*Retrieve confirmed and unconfirmed balance of an address*\n\n> Body parameter\n\n=== \"json\"\n\n    ```json\n    \"\\\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\\\"\"\n    ```\n\n<h3 id=\"getaddressbalancetotal-parameters\">Parameters</h3>\n\n|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n\n> Example responses\n\n> 200 Response\n\n=== \"json\"\n\n    ```json\n    {\n      \"confirmed\": {\n        \"nanoErgs\": 0,\n        \"tokens\": [\n          {\n            \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 0,\n            \"decimals\": 0,\n            \"name\": \"string\"\n          }\n        ]\n      },\n      \"unconfirmed\": {\n        \"nanoErgs\": 0,\n        \"tokens\": [\n          {\n            \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 0,\n            \"decimals\": 0,\n            \"name\": \"string\"\n          }\n        ]\n      }\n    }\n    ```\n\n<h3 id=\"getaddressbalancetotal-responses\">Responses</h3>\n\n|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|balance information|Inline|\n|default|Default|Error|[ApiError](#schemaapierror)|\n\n<h3 id=\"getaddressbalancetotal-responseschema\">Response Schema</h3>\n\nStatus Code **200**\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb confirmed|[BalanceInfo](#schemabalanceinfo)|false|none|Balance information|\n|\u00bb\u00bb nanoErgs|integer(int64)|true|none|Balance of nanoERGs|\n|\u00bb\u00bb tokens|[object]|true|none|Balance of tokens|\n|\u00bb\u00bb\u00bb tokenId|[ModifierId](#schemamodifierid)(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb amount|integer(int64)|false|none|Amount of the token|\n|\u00bb\u00bb\u00bb decimals|integer|false|none|Number of decimals of the token|\n|\u00bb\u00bb\u00bb name|string|false|none|Name of the token, if any|\n|\u00bb unconfirmed|[BalanceInfo](#schemabalanceinfo)|false|none|Balance information|\n\n<aside class=\"success\">\nThis operation does not require authentication\n</aside>"
    },
    {
      "heading": "Schemas",
      "level": 2,
      "content": ""
    },
    {
      "heading": "ErgoTransactionInput",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotransactioninput\"></a>\n<a id=\"schema_ErgoTransactionInput\"></a>\n<a id=\"tocSergotransactioninput\"></a>\n<a id=\"tocsergotransactioninput\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|[TransactionBoxId](#schematransactionboxid)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|spendingProof|[SpendingProof](#schemaspendingproof)|true|none|Spending proof for transaction input|"
    },
    {
      "heading": "ErgoTransactionDataInput",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotransactiondatainput\"></a>\n<a id=\"schema_ErgoTransactionDataInput\"></a>\n<a id=\"tocSergotransactiondatainput\"></a>\n<a id=\"tocsergotransactiondatainput\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|[TransactionBoxId](#schematransactionboxid)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|"
    },
    {
      "heading": "ErgoTransactionUnsignedInput",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotransactionunsignedinput\"></a>\n<a id=\"schema_ErgoTransactionUnsignedInput\"></a>\n<a id=\"tocSergotransactionunsignedinput\"></a>\n<a id=\"tocsergotransactionunsignedinput\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extension\": {\n        \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|[TransactionBoxId](#schematransactionboxid)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|extension|object|false|none|none|\n|\u00bb **additionalProperties**|[SValue](#schemasvalue)|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "SpendingProof",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaspendingproof\"></a>\n<a id=\"schema_SpendingProof\"></a>\n<a id=\"tocSspendingproof\"></a>\n<a id=\"tocsspendingproof\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extension\": {\n        \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n      }\n    }\n    ```\n\nSpending proof for transaction input"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|proofBytes|[SpendingProofBytes](#schemaspendingproofbytes)|true|none|Base16-encoded spending proofs|\n|extension|object|true|none|Variables to be put into context|\n|\u00bb **additionalProperties**|[SValue](#schemasvalue)|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "SerializedBox",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaserializedbox\"></a>\n<a id=\"schema_SerializedBox\"></a>\n<a id=\"tocSserializedbox\"></a>\n<a id=\"tocsserializedbox\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|[TransactionBoxId](#schematransactionboxid)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|bytes|[HexString](#schemahexstring)|true|none|Base16-encoded bytes|"
    },
    {
      "heading": "ScriptBytes",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascriptbytes\"></a>\n<a id=\"schema_ScriptBytes\"></a>\n<a id=\"tocSscriptbytes\"></a>\n<a id=\"tocsscriptbytes\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|bytes|[HexString](#schemahexstring)|true|none|Base16-encoded bytes|"
    },
    {
      "heading": "SnapshotsInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasnapshotsinfo\"></a>\n<a id=\"schema_SnapshotsInfo\"></a>\n<a id=\"tocSsnapshotsinfo\"></a>\n<a id=\"tocssnapshotsinfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"availableManifests\": [\n        {}\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|availableManifests|[object]|true|none|Map of available manifests height -> manifestId|"
    },
    {
      "heading": "ErgoTransactionOutput",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotransactionoutput\"></a>\n<a id=\"schema_ErgoTransactionOutput\"></a>\n<a id=\"tocSergotransactionoutput\"></a>\n<a id=\"tocsergotransactionoutput\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|[TransactionBoxId](#schematransactionboxid)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|value|integer(int64)|true|none|Amount of Ergo token|\n|ergoTree|[ErgoTree](#schemaergotree)|true|none|Base16-encoded ergo tree bytes|\n|creationHeight|integer(int32)|true|none|Height the output was created at|\n|assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|additionalRegisters|[Registers](#schemaregisters)|true|none|Ergo box registers|\n|transactionId|[TransactionId](#schematransactionid)|false|none|Base16-encoded transaction id bytes|\n|index|integer(int32)|false|none|Index in the transaction outputs|"
    },
    {
      "heading": "WalletBox",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemawalletbox\"></a>\n<a id=\"schema_WalletBox\"></a>\n<a id=\"tocSwalletbox\"></a>\n<a id=\"tocswalletbox\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"box\": {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      },\n      \"confirmationsNum\": 147,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"onchain\": true,\n      \"spent\": false,\n      \"creationOutIndex\": 2,\n      \"scans\": [\n        1\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|\n|confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|creationTransaction|[ModifierId](#schemamodifierid)|true|none|Transaction which created the box|\n|spendingTransaction|[ModifierId](#schemamodifierid)|true|none|Transaction which created the box|\n|spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|spent|boolean|true|none|A flag signalling whether the box was spent|\n|creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|scans|[integer]|true|none|Scan identifiers the box relates to|"
    },
    {
      "heading": "BalanceInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemabalanceinfo\"></a>\n<a id=\"schema_BalanceInfo\"></a>\n<a id=\"tocSbalanceinfo\"></a>\n<a id=\"tocsbalanceinfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"nanoErgs\": 0,\n      \"tokens\": [\n        {\n          \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 0,\n          \"decimals\": 0,\n          \"name\": \"string\"\n        }\n      ]\n    }\n    ```\n\nBalance information"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|nanoErgs|integer(int64)|true|none|Balance of nanoERGs|\n|tokens|[object]|true|none|Balance of tokens|\n|\u00bb tokenId|[ModifierId](#schemamodifierid)|false|none|Identifier of the token|\n|\u00bb amount|integer(int64)|false|none|Amount of the token|\n|\u00bb decimals|integer|false|none|Number of decimals of the token|\n|\u00bb name|string|false|none|Name of the token, if any|"
    },
    {
      "heading": "IndexedErgoBox",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaindexedergobox\"></a>\n<a id=\"schema_IndexedErgoBox\"></a>\n<a id=\"tocSindexedergobox\"></a>\n<a id=\"tocsindexedergobox\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[ErgoTransactionOutput](#schemaergotransactionoutput)|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|Box indexed with extra information|\n|\u00bb address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|\u00bb spentTransactionId|[ModifierId](#schemamodifierid)|true|none|Transaction which spent the box|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|"
    },
    {
      "heading": "IndexedToken",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaindexedtoken\"></a>\n<a id=\"schema_IndexedToken\"></a>\n<a id=\"tocSindexedtoken\"></a>\n<a id=\"tocsindexedtoken\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"boxId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"emissionAmount\": 3500000,\n      \"name\": \"string\",\n      \"description\": \"string\",\n      \"decimals\": 8\n    }\n    ```\n\nToken indexed with extra information"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[ModifierId](#schemamodifierid)|true|none|Id of the token|\n|boxId|[ModifierId](#schemamodifierid)|true|none|Id of the box that created the token|\n|emissionAmount|integer(int64)|true|none|The total supply of the token|\n|name|string|true|none|The name of the token|\n|description|string|true|none|The description of the token|\n|decimals|integer(int32)|true|none|The number of decimals the token supports|"
    },
    {
      "heading": "UnsignedErgoTransaction",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaunsignedergotransaction\"></a>\n<a id=\"schema_UnsignedErgoTransaction\"></a>\n<a id=\"tocSunsignedergotransaction\"></a>\n<a id=\"tocsunsignedergotransaction\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ]\n    }\n    ```\n\nUnsigned Ergo transaction"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[TransactionId](#schematransactionid)|false|none|Base16-encoded transaction id bytes|\n|inputs|[[ErgoTransactionUnsignedInput](#schemaergotransactionunsignedinput)]|true|none|Unsigned inputs of the transaction|\n|dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Data inputs of the transaction|\n|outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Outputs of the transaction|"
    },
    {
      "heading": "ErgoTransaction",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotransaction\"></a>\n<a id=\"schema_ErgoTransaction\"></a>\n<a id=\"tocSergotransaction\"></a>\n<a id=\"tocsergotransaction\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\nErgoTransaction is an atomic operation which changes UTXO state."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[TransactionId](#schematransactionid)|false|none|Id of the transaction|\n|inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Inputs, that will be spent by this transaction|\n|dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Read-only inputs, that are not going to be spent by transaction.|\n|outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Outputs of the transaction, i.e. box candidates to be created by this transaction.|\n|size|integer(int32)|false|none|Size of ErgoTransaction in bytes|"
    },
    {
      "heading": "WalletTransaction",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemawallettransaction\"></a>\n<a id=\"schema_WalletTransaction\"></a>\n<a id=\"tocSwallettransaction\"></a>\n<a id=\"tocswallettransaction\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"inclusionHeight\": 20998,\n      \"numConfirmations\": 20998,\n      \"scans\": [\n        1\n      ],\n      \"size\": 0\n    }\n    ```\n\nTransaction augmented with some useful information"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[TransactionId](#schematransactionid)|false|none|Base16-encoded transaction id bytes|\n|inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Transaction inputs|\n|dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Transaction data inputs|\n|outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Transaction outputs|\n|inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|scans|[integer]|true|none|Scan identifiers the transaction relates to|\n|size|integer(int32)|false|none|Size in bytes|"
    },
    {
      "heading": "IndexedErgoTransaction",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaindexedergotransaction\"></a>\n<a id=\"schema_IndexedErgoTransaction\"></a>\n<a id=\"tocSindexedergotransaction\"></a>\n<a id=\"tocsindexedergotransaction\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"inclusionHeight\": 20998,\n      \"numConfirmations\": 20998,\n      \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"index\": 3,\n      \"globalIndex\": 3565445,\n      \"size\": 0\n    }\n    ```\n\nTransaction indexed with extra information"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[TransactionId](#schematransactionid)|true|none|Base16-encoded transaction id bytes|\n|inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|Transaction inputs|\n|dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|Transaction data inputs|\n|outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|Transaction outputs|\n|inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|blockId|[ModifierId](#schemamodifierid)|true|none|Id of the block the transaction was included in|\n|timestamp|[Timestamp](#schematimestamp)|true|none|Basic timestamp definition|\n|index|integer(int32)|true|none|index of the transaction in the block it was included in|\n|globalIndex|integer(int64)|true|none|Global index of the transaction in the blockchain|\n|size|integer(int32)|true|none|Size in bytes|"
    },
    {
      "heading": "ErgoAddress",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergoaddress\"></a>\n<a id=\"schema_ErgoAddress\"></a>\n<a id=\"tocSergoaddress\"></a>\n<a id=\"tocsergoaddress\"></a>\n\n=== \"json\"\n\n    ```json\n    \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    ```\n\nEncoded Ergo Address"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string|false|none|Encoded Ergo Address|"
    },
    {
      "heading": "RewardAddress",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemarewardaddress\"></a>\n<a id=\"schema_RewardAddress\"></a>\n<a id=\"tocSrewardaddress\"></a>\n<a id=\"tocsrewardaddress\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"rewardAddress\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|rewardAddress|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "RewardPubKey",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemarewardpubkey\"></a>\n<a id=\"schema_RewardPubKey\"></a>\n<a id=\"tocSrewardpubkey\"></a>\n<a id=\"tocsrewardpubkey\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"rewardPubkey\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|rewardPubkey|string|true|none|none|"
    },
    {
      "heading": "DlogSecret",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemadlogsecret\"></a>\n<a id=\"schema_DlogSecret\"></a>\n<a id=\"tocSdlogsecret\"></a>\n<a id=\"tocsdlogsecret\"></a>\n\n=== \"json\"\n\n    ```json\n    \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n    ```\n\nHex-encoded big-endian 256-bits secret exponent"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string|false|none|Hex-encoded big-endian 256-bits secret exponent|"
    },
    {
      "heading": "DhtSecret",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemadhtsecret\"></a>\n<a id=\"schema_DhtSecret\"></a>\n<a id=\"tocSdhtsecret\"></a>\n<a id=\"tocsdhtsecret\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n      \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n      \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n      \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n      \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    }\n    ```\n\nHex-encoded big-endian 256-bits secret exponent \"w\" along with generators \"g\", \"h\", and group elements \"u\", \"v\", such as g^w = u, h^w = v"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|secret|string|true|none|Hex-encoded big-endian 256-bits secret exponent|\n|g|string|true|none|Hex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)|\n|h|string|true|none|Hex-encoded \"h\" generator for the Diffie-Hellman tuple (secp256k1 curve point)|\n|u|string|true|none|Hex-encoded \"u\" group element of the Diffie-Hellman tuple (secp256k1 curve point)|\n|v|string|true|none|Hex-encoded \"v\" group element of the Diffie-Hellman tuple (secp256k1 curve point)|"
    },
    {
      "heading": "TransactionSigningRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematransactionsigningrequest\"></a>\n<a id=\"schema_TransactionSigningRequest\"></a>\n<a id=\"tocStransactionsigningrequest\"></a>\n<a id=\"tocstransactionsigningrequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ],\n      \"hints\": {\n        \"secretHints\": [\n          {\n            \"01\": [\n              {\n                \"hint\": \"cmtWithSecret\",\n                \"pubkey\": {\n                  \"op\": -51,\n                  \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n                },\n                \"position\": \"0-1\",\n                \"type\": \"dlog\",\n                \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n                \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n              }\n            ]\n          }\n        ],\n        \"publicHints\": [\n          {\n            \"01\": [\n              {\n                \"hint\": \"cmtWithSecret\",\n                \"pubkey\": {\n                  \"op\": -51,\n                  \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n                },\n                \"position\": \"0-1\",\n                \"type\": \"dlog\",\n                \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n                \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n              }\n            ]\n          }\n        ]\n      },\n      \"secrets\": {\n        \"dlog\": [\n          \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n        ],\n        \"dht\": [\n          {\n            \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n            \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n          }\n        ]\n      }\n    }\n    ```\n\nA request to sign a transaction with secrets provided"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tx|[UnsignedErgoTransaction](#schemaunsignedergotransaction)|true|none|Unsigned transaction to sign|\n|inputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|hints|[TransactionHintsBag](#schematransactionhintsbag)|false|none|Optional list of hints used for signing|\n|secrets|object|true|none|Secrets used for signing|\n|\u00bb dlog|[[DlogSecret](#schemadlogsecret)]|false|none|Sequence of secret exponents (DLOG secrets)|\n|\u00bb dht|[[DhtSecret](#schemadhtsecret)]|false|none|Sequence of secret Diffie-Hellman tuple exponents (DHT secrets)|"
    },
    {
      "heading": "AddressHolder",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaaddressholder\"></a>\n<a id=\"schema_AddressHolder\"></a>\n<a id=\"tocSaddressholder\"></a>\n<a id=\"tocsaddressholder\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```\n\nHolds encoded ErgoAddress"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "BoxesRequestHolder",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaboxesrequestholder\"></a>\n<a id=\"schema_BoxesRequestHolder\"></a>\n<a id=\"tocSboxesrequestholder\"></a>\n<a id=\"tocsboxesrequestholder\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"targetAssets\": [\n        [\n          \"string\",\n          \"string\"\n        ]\n      ],\n      \"targetBalance\": 0\n    }\n    ```\n\nHolds request for wallet boxes"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|targetAssets|[array]|true|none|Target assets|\n\nanyOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|string|false|none|TokenId|\n\nor\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|integer|false|none|Long|\n\ncontinued\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|targetBalance|integer(int64)|true|none|Target balance|"
    },
    {
      "heading": "RequestsHolder",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemarequestsholder\"></a>\n<a id=\"schema_RequestsHolder\"></a>\n<a id=\"tocSrequestsholder\"></a>\n<a id=\"tocsrequestsholder\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"requests\": [\n        {\n          \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n          \"value\": 1,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"registers\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          }\n        }\n      ],\n      \"fee\": 1000000,\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\nHolds many transaction requests and transaction fee"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|requests|[anyOf]|true|none|Sequence of transaction requests|\n\nanyOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[PaymentRequest](#schemapaymentrequest)|false|none|Request for generation of payment transaction to a given address|\n\nor\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[BurnTokensRequest](#schemaburntokensrequest)|false|none|Request for burning tokens in wallet|\n\nor\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[AssetIssueRequest](#schemaassetissuerequest)|false|none|Request for generation of asset issue transaction|\n\ncontinued\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|fee|integer(int64)|false|none|Transaction fee|\n|inputsRaw|[string]|false|none|List of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|List of data inputs to be used in serialized form|"
    },
    {
      "heading": "SourceHolder",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasourceholder\"></a>\n<a id=\"schema_SourceHolder\"></a>\n<a id=\"tocSsourceholder\"></a>\n<a id=\"tocssourceholder\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"source\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|source|string|true|none|Sigma source to be compiled|"
    },
    {
      "heading": "ErgoLikeTransaction",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergoliketransaction\"></a>\n<a id=\"schema_ErgoLikeTransaction\"></a>\n<a id=\"tocSergoliketransaction\"></a>\n<a id=\"tocsergoliketransaction\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|inputs|[[ErgoTransactionInput](#schemaergotransactioninput)]|true|none|none|\n|dataInputs|[[ErgoTransactionDataInput](#schemaergotransactiondatainput)]|true|none|none|\n|outputs|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|none|"
    },
    {
      "heading": "SigmaHeader",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasigmaheader\"></a>\n<a id=\"schema_SigmaHeader\"></a>\n<a id=\"tocSsigmaheader\"></a>\n<a id=\"tocssigmaheader\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": {\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"treeFlags\": 0,\n        \"keyLength\": 0,\n        \"valueLength\": 0\n      },\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"height\": 667,\n      \"size\": 667,\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"votes\": \"000000\",\n      \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n      \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n      \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powDistance\": 123456789\n    }\n    ```\n\nBlock header format used for sigma ErgoLikeContext"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|\n|timestamp|[Timestamp](#schematimestamp)|true|none|Basic timestamp definition|\n|version|[Version](#schemaversion)|true|none|Ergo blockchain protocol version|\n|adProofsRoot|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|adProofsId|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|\n|stateRoot|[AvlTreeData](#schemaavltreedata)|true|none|none|\n|transactionsRoot|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|transactionsId|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|\n|nBits|integer(int64)|true|none|none|\n|extensionHash|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|extensionRoot|[Digest32](#schemadigest32)|false|none|Base16-encoded 32 byte digest|\n|extensionId|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|\n|height|integer(int32)|true|none|none|\n|size|integer(int32)|false|none|none|\n|parentId|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|powSolutions|[PowSolutions](#schemapowsolutions)|false|none|An object containing all components of pow solution|\n|votes|[Votes](#schemavotes)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|minerPk|string|false|none|none|\n|powOnetimePk|string|false|none|none|\n|powNonce|[Digest32](#schemadigest32)|false|none|Base16-encoded 32 byte digest|\n|powDistance|number|false|none|sigma.BigInt|"
    },
    {
      "heading": "PreHeader",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapreheader\"></a>\n<a id=\"schema_PreHeader\"></a>\n<a id=\"tocSpreheader\"></a>\n<a id=\"tocspreheader\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"nBits\": 19857408,\n      \"height\": 667,\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"votes\": \"000000\",\n      \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|timestamp|[Timestamp](#schematimestamp)|true|none|Basic timestamp definition|\n|version|[Version](#schemaversion)|true|none|Ergo blockchain protocol version|\n|nBits|integer(int64)|true|none|none|\n|height|integer(int32)|true|none|none|\n|parentId|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|votes|[Votes](#schemavotes)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|minerPk|string|false|none|none|"
    },
    {
      "heading": "AvlTreeData",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaavltreedata\"></a>\n<a id=\"schema_AvlTreeData\"></a>\n<a id=\"tocSavltreedata\"></a>\n<a id=\"tocsavltreedata\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"treeFlags\": 0,\n      \"keyLength\": 0,\n      \"valueLength\": 0\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|digest|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|treeFlags|integer(int32)|false|none|none|\n|keyLength|integer(int32)|false|none|none|\n|valueLength|integer(int32)\u00a6null|false|none|none|"
    },
    {
      "heading": "ErgoLikeContext",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergolikecontext\"></a>\n<a id=\"schema_ErgoLikeContext\"></a>\n<a id=\"tocSergolikecontext\"></a>\n<a id=\"tocsergolikecontext\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"lastBlockUtxoRoot\": {\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"treeFlags\": 0,\n        \"keyLength\": 0,\n        \"valueLength\": 0\n      },\n      \"headers\": [\n        {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": {\n            \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"treeFlags\": 0,\n            \"keyLength\": 0,\n            \"valueLength\": 0\n          },\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"height\": 667,\n          \"size\": 667,\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"votes\": \"000000\",\n          \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n          \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n          \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powDistance\": 123456789\n        }\n      ],\n      \"preHeader\": {\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"nBits\": 19857408,\n        \"height\": 667,\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n      },\n      \"dataBoxes\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"boxesToSpend\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"spendingTransaction\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"selfIndex\": 0,\n      \"extension\": {},\n      \"validationSettings\": \"10e8070001e9070001ea070001eb070001ec070001ed070001ee070001ef070001f0070001f1070001f2070001f3070001f4070001f5070001f6070001f7070001\",\n      \"costLimit\": 0,\n      \"initCost\": 0\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|lastBlockUtxoRoot|[AvlTreeData](#schemaavltreedata)|true|none|state root before current block application|\n|headers|[[SigmaHeader](#schemasigmaheader)]|true|none|fixed number of last block headers in descending order (first header is the newest one)|\n|preHeader|[PreHeader](#schemapreheader)|true|none|fields of block header with the current `spendingTransaction`, that can be predicted by a miner before its formation|\n|dataBoxes|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|boxes, that corresponds to id's of `spendingTransaction.dataInputs`|\n|boxesToSpend|[[ErgoTransactionOutput](#schemaergotransactionoutput)]|true|none|boxes, that corresponds to id's of `spendingTransaction.inputs`|\n|spendingTransaction|[ErgoLikeTransaction](#schemaergoliketransaction)|true|none|transaction that contains `self` box|\n|selfIndex|integer(int64)|true|none|index of the box in `boxesToSpend` that contains the script we're evaluating|\n|extension|object|true|none|prover-defined key-value pairs, that may be used inside a script|\n|validationSettings|string|true|none|validation parameters passed to Interpreter.verify to detect soft-fork conditions|\n|costLimit|integer(int64)|true|none|hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown|\n|initCost|integer(int64)|true|none|initial value of execution cost already accumulated before Interpreter.verify is called|"
    },
    {
      "heading": "ExecuteScript",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaexecutescript\"></a>\n<a id=\"schema_ExecuteScript\"></a>\n<a id=\"tocSexecutescript\"></a>\n<a id=\"tocsexecutescript\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"script\": \"string\",\n      \"namedConstants\": {},\n      \"context\": {\n        \"lastBlockUtxoRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"headers\": [\n          {\n            \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"timestamp\": 1524143059077,\n            \"version\": 2,\n            \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"stateRoot\": {\n              \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"treeFlags\": 0,\n              \"keyLength\": 0,\n              \"valueLength\": 0\n            },\n            \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"nBits\": 19857408,\n            \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"height\": 667,\n            \"size\": 667,\n            \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powSolutions\": {\n              \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n              \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n              \"n\": \"0000000000000000\",\n              \"d\": 987654321\n            },\n            \"votes\": \"000000\",\n            \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powDistance\": 123456789\n          }\n        ],\n        \"preHeader\": {\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"nBits\": 19857408,\n          \"height\": 667,\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n        },\n        \"dataBoxes\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"boxesToSpend\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"spendingTransaction\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ]\n        },\n        \"selfIndex\": 0,\n        \"extension\": {},\n        \"validationSettings\": \"10e8070001e9070001ea070001eb070001ec070001ed070001ee070001ef070001f0070001f1070001f2070001f3070001f4070001f5070001f6070001f7070001\",\n        \"costLimit\": 0,\n        \"initCost\": 0\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|script|string|true|none|Sigma script to be executed|\n|namedConstants|object\u00a6null|true|none|Environment for compiler|\n|context|[ErgoLikeContext](#schemaergolikecontext)|true|none|Interpreter context|"
    },
    {
      "heading": "SigmaBoolean",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasigmaboolean\"></a>\n<a id=\"schema_SigmaBoolean\"></a>\n<a id=\"tocSsigmaboolean\"></a>\n<a id=\"tocssigmaboolean\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n    ```\n\nAlgebraic data type of sigma proposition expressions"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|op|integer(int8)|true|none|Sigma opCode|\n|h|[HexString](#schemahexstring)|false|none|Base16-encoded bytes|\n|g|[HexString](#schemahexstring)|false|none|Base16-encoded bytes|\n|u|[HexString](#schemahexstring)|false|none|Base16-encoded bytes|\n|v|[HexString](#schemahexstring)|false|none|Base16-encoded bytes|\n|condition|boolean|false|none|none|"
    },
    {
      "heading": "SigmaBooleanAndPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasigmabooleanandpredicate\"></a>\n<a id=\"schema_SigmaBooleanAndPredicate\"></a>\n<a id=\"tocSsigmabooleanandpredicate\"></a>\n<a id=\"tocssigmabooleanandpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"args\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[SigmaBoolean](#schemasigmaboolean)|false|none|Algebraic data type of sigma proposition expressions|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb args|[[SigmaBoolean](#schemasigmaboolean)]|false|none|[Algebraic data type of sigma proposition expressions]|"
    },
    {
      "heading": "SigmaBooleanOrPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasigmabooleanorpredicate\"></a>\n<a id=\"schema_SigmaBooleanOrPredicate\"></a>\n<a id=\"tocSsigmabooleanorpredicate\"></a>\n<a id=\"tocssigmabooleanorpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"args\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[SigmaBoolean](#schemasigmaboolean)|false|none|Algebraic data type of sigma proposition expressions|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb args|[[SigmaBoolean](#schemasigmaboolean)]|false|none|[Algebraic data type of sigma proposition expressions]|"
    },
    {
      "heading": "SigmaBooleanThresholdPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasigmabooleanthresholdpredicate\"></a>\n<a id=\"schema_SigmaBooleanThresholdPredicate\"></a>\n<a id=\"tocSsigmabooleanthresholdpredicate\"></a>\n<a id=\"tocssigmabooleanthresholdpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"args\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[SigmaBoolean](#schemasigmaboolean)|false|none|Algebraic data type of sigma proposition expressions|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb args|[[SigmaBoolean](#schemasigmaboolean)]|false|none|[Algebraic data type of sigma proposition expressions]|"
    },
    {
      "heading": "CryptoResult",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacryptoresult\"></a>\n<a id=\"schema_CryptoResult\"></a>\n<a id=\"tocScryptoresult\"></a>\n<a id=\"tocscryptoresult\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"value\": {\n        \"op\": -45,\n        \"condition\": true\n      },\n      \"cost\": 10\n    }\n    ```\n\nResult of executeWithContext request (reduceToCrypto)"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|value|[SigmaBoolean](#schemasigmaboolean)|true|none|value of SigmaProp type which represents a statement verifiable via sigma protocol|\n|cost|integer(int64)|true|none|Estimated cost of contract execution|"
    },
    {
      "heading": "ScanningPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascanningpredicate\"></a>\n<a id=\"schema_ScanningPredicate\"></a>\n<a id=\"tocSscanningpredicate\"></a>\n<a id=\"tocsscanningpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"predicate\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|predicate|string|true|none|none|"
    },
    {
      "heading": "ContainsPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacontainspredicate\"></a>\n<a id=\"schema_ContainsPredicate\"></a>\n<a id=\"tocScontainspredicate\"></a>\n<a id=\"tocscontainspredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"predicate\": \"string\",\n      \"register\": \"string\",\n      \"bytes\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[ScanningPredicate](#schemascanningpredicate)|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb register|string|false|none|none|\n|\u00bb bytes|string|false|none|none|"
    },
    {
      "heading": "EqualsPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaequalspredicate\"></a>\n<a id=\"schema_EqualsPredicate\"></a>\n<a id=\"tocSequalspredicate\"></a>\n<a id=\"tocsequalspredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"predicate\": \"string\",\n      \"register\": \"string\",\n      \"bytes\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[ScanningPredicate](#schemascanningpredicate)|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb register|string|false|none|none|\n|\u00bb bytes|string|false|none|none|"
    },
    {
      "heading": "ContainsAssetPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacontainsassetpredicate\"></a>\n<a id=\"schema_ContainsAssetPredicate\"></a>\n<a id=\"tocScontainsassetpredicate\"></a>\n<a id=\"tocscontainsassetpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"predicate\": \"string\",\n      \"assetId\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[ScanningPredicate](#schemascanningpredicate)|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb assetId|string|false|none|none|"
    },
    {
      "heading": "AndPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaandpredicate\"></a>\n<a id=\"schema_AndPredicate\"></a>\n<a id=\"tocSandpredicate\"></a>\n<a id=\"tocsandpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"predicate\": \"string\",\n      \"args\": [\n        {\n          \"predicate\": \"string\"\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[ScanningPredicate](#schemascanningpredicate)|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb args|[[ScanningPredicate](#schemascanningpredicate)]|false|none|none|"
    },
    {
      "heading": "OrPredicate",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaorpredicate\"></a>\n<a id=\"schema_OrPredicate\"></a>\n<a id=\"tocSorpredicate\"></a>\n<a id=\"tocsorpredicate\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"predicate\": \"string\",\n      \"args\": [\n        {\n          \"predicate\": \"string\"\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "allOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[ScanningPredicate](#schemascanningpredicate)|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n\nand\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|object|false|none|none|\n|\u00bb args|[[ScanningPredicate](#schemascanningpredicate)]|false|none|none|"
    },
    {
      "heading": "ScanRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascanrequest\"></a>\n<a id=\"schema_ScanRequest\"></a>\n<a id=\"tocSscanrequest\"></a>\n<a id=\"tocsscanrequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanName\": \"Assets Tracker\",\n      \"walletInteraction\": \"off\",\n      \"removeOffchain\": true,\n      \"trackingRule\": {\n        \"predicate\": \"containsAsset\",\n        \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanName|string|false|none|none|\n|removeOffchain|boolean|false|none|none|\n|walletInteraction|string|false|none|none|\n|trackingRule|[ScanningPredicate](#schemascanningpredicate)|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|walletInteraction|off|\n|walletInteraction|shared|\n|walletInteraction|forced|"
    },
    {
      "heading": "Scan",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascan\"></a>\n<a id=\"schema_Scan\"></a>\n<a id=\"tocSscan\"></a>\n<a id=\"tocsscan\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 2,\n      \"scanName\": \"Assets Tracker\",\n      \"walletInteraction\": \"off\",\n      \"removeOffchain\": true,\n      \"trackingRule\": {\n        \"predicate\": \"containsAsset\",\n        \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanName|string|false|none|none|\n|scanId|integer|false|none|none|\n|walletInteraction|string|false|none|none|\n|removeOffchain|boolean|false|none|none|\n|trackingRule|[ScanningPredicate](#schemascanningpredicate)|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|walletInteraction|off|\n|walletInteraction|shared|\n|walletInteraction|forced|"
    },
    {
      "heading": "ScanId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascanid\"></a>\n<a id=\"schema_ScanId\"></a>\n<a id=\"tocSscanid\"></a>\n<a id=\"tocsscanid\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanId|integer|false|none|none|"
    },
    {
      "heading": "ScanIdBoxId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascanidboxid\"></a>\n<a id=\"schema_ScanIdBoxId\"></a>\n<a id=\"tocSscanidboxid\"></a>\n<a id=\"tocsscanidboxid\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanId\": 0,\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanId|integer|true|none|none|\n|boxId|[TransactionBoxId](#schematransactionboxid)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|"
    },
    {
      "heading": "ScanIdsBox",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemascanidsbox\"></a>\n<a id=\"schema_ScanIdsBox\"></a>\n<a id=\"tocSscanidsbox\"></a>\n<a id=\"tocsscanidsbox\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"scanIds\": [\n        0\n      ],\n      \"box\": {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    }\n    ```\n\nErgo box with associated scans (their respective identifiers)"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanIds|[integer]|true|none|none|\n|box|[ErgoTransactionOutput](#schemaergotransactionoutput)|true|none|none|"
    },
    {
      "heading": "DlogCommitment",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemadlogcommitment\"></a>\n<a id=\"schema_DlogCommitment\"></a>\n<a id=\"tocSdlogcommitment\"></a>\n<a id=\"tocsdlogcommitment\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"r\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n      \"a\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    }\n    ```\n\nRandomness and commitment for the first step of the Schnorr protocol"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|r|string|true|none|Hex-encoded big-endian 256-bits secret exponent|\n|a|string|true|none|Hex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)|"
    },
    {
      "heading": "HintExtractionRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemahintextractionrequest\"></a>\n<a id=\"schema_HintExtractionRequest\"></a>\n<a id=\"tocShintextractionrequest\"></a>\n<a id=\"tocshintextractionrequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"real\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ],\n      \"simulated\": [\n        {\n          \"op\": 0,\n          \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"condition\": true\n        }\n      ],\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\nrequest to extract prover hints from a transaction"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tx|[ErgoTransaction](#schemaergotransaction)|true|none|Transaction to extract prover hints from|\n|real|[[SigmaBoolean](#schemasigmaboolean)]|true|none|Real signers of the transaction|\n|simulated|[[SigmaBoolean](#schemasigmaboolean)]|true|none|Simulated signers of the transaction|\n|inputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|"
    },
    {
      "heading": "Commitment",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacommitment\"></a>\n<a id=\"schema_Commitment\"></a>\n<a id=\"tocScommitment\"></a>\n<a id=\"tocscommitment\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"hint\": \"cmtWithSecret\",\n      \"pubkey\": {\n        \"op\": 0,\n        \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"condition\": true\n      },\n      \"position\": \"string\",\n      \"type\": \"dlog\",\n      \"a\": \"string\",\n      \"b\": \"string\"\n    }\n    ```\n\nbasic trait for prover commitments"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|hint|string|true|none|none|\n|pubkey|[SigmaBoolean](#schemasigmaboolean)|true|none|Algebraic data type of sigma proposition expressions|\n|position|string|true|none|none|\n|type|string|false|none|none|\n|a|string|true|none|a group element of the commitment|\n|b|string|false|none|b group element of the commitment (needed for DHT protocol only)|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|hint|cmtWithSecret|\n|hint|cmtReal|\n|hint|cmtSimulated|\n|type|dlog|\n|type|dht|"
    },
    {
      "heading": "CommitmentWithSecret",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacommitmentwithsecret\"></a>\n<a id=\"schema_CommitmentWithSecret\"></a>\n<a id=\"tocScommitmentwithsecret\"></a>\n<a id=\"tocscommitmentwithsecret\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"hint\": \"cmtWithSecret\",\n      \"pubkey\": {\n        \"op\": 0,\n        \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"condition\": true\n      },\n      \"position\": \"string\",\n      \"type\": \"dlog\",\n      \"a\": \"string\",\n      \"b\": \"string\"\n    }\n    ```\n\ncommitment to secret along with secret (!) randomness"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "*None*"
    },
    {
      "heading": "SecretProven",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasecretproven\"></a>\n<a id=\"schema_SecretProven\"></a>\n<a id=\"tocSsecretproven\"></a>\n<a id=\"tocssecretproven\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"hint\": \"proofReal\",\n      \"challenge\": \"string\",\n      \"pubkey\": {\n        \"op\": 0,\n        \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"condition\": true\n      },\n      \"proof\": \"string\",\n      \"position\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|hint|string|true|none|none|\n|challenge|string|true|none|none|\n|pubkey|[SigmaBoolean](#schemasigmaboolean)|true|none|Algebraic data type of sigma proposition expressions|\n|proof|string|true|none|none|\n|position|string|true|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|hint|proofReal|\n|hint|proofSimulated|"
    },
    {
      "heading": "InputHints",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemainputhints\"></a>\n<a id=\"schema_InputHints\"></a>\n<a id=\"tocSinputhints\"></a>\n<a id=\"tocsinputhints\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n    ```\n\nhints for inputs, key is input index, values is a set of hints for the input"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|**additionalProperties**|[oneOf]|false|none|none|\n\noneOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[CommitmentWithSecret](#schemacommitmentwithsecret)|false|none|commitment to secret along with secret (!) randomness|\n\nxor\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[Commitment](#schemacommitment)|false|none|basic trait for prover commitments|\n\nxor\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|[SecretProven](#schemasecretproven)|false|none|none|"
    },
    {
      "heading": "TransactionHintsBag",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematransactionhintsbag\"></a>\n<a id=\"schema_TransactionHintsBag\"></a>\n<a id=\"tocStransactionhintsbag\"></a>\n<a id=\"tocstransactionhintsbag\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"secretHints\": [\n        {\n          \"01\": [\n            {\n              \"hint\": \"cmtWithSecret\",\n              \"pubkey\": {\n                \"op\": -51,\n                \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n              },\n              \"position\": \"0-1\",\n              \"type\": \"dlog\",\n              \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n              \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n            }\n          ]\n        }\n      ],\n      \"publicHints\": [\n        {\n          \"01\": [\n            {\n              \"hint\": \"cmtWithSecret\",\n              \"pubkey\": {\n                \"op\": -51,\n                \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n              },\n              \"position\": \"0-1\",\n              \"type\": \"dlog\",\n              \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n              \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n            }\n          ]\n        }\n      ]\n    }\n    ```\n\nprover hints extracted from a transaction"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|secretHints|[[InputHints](#schemainputhints)]|false|none|Hints which contain secrets, do not share them!|\n|publicHints|[[InputHints](#schemainputhints)]|false|none|Hints which contain public data only, share them freely!|"
    },
    {
      "heading": "GenerateCommitmentsRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemageneratecommitmentsrequest\"></a>\n<a id=\"schema_GenerateCommitmentsRequest\"></a>\n<a id=\"tocSgeneratecommitmentsrequest\"></a>\n<a id=\"tocsgeneratecommitmentsrequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"tx\": {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ]\n      },\n      \"secrets\": {\n        \"dlog\": [\n          \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n        ],\n        \"dht\": [\n          {\n            \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n            \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n            \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n          }\n        ]\n      },\n      \"inputsRaw\": [\n        \"string\"\n      ],\n      \"dataInputsRaw\": [\n        \"string\"\n      ]\n    }\n    ```\n\nrequest to generate commitments to sign a transaction"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tx|[UnsignedErgoTransaction](#schemaunsignedergotransaction)|true|none|Unsigned transaction to sign|\n|secrets|object|false|none|Optionally, external secrets used for signing|\n|\u00bb dlog|[[DlogSecret](#schemadlogsecret)]|false|none|Sequence of secret exponents (DLOG secrets)|\n|\u00bb dht|[[DhtSecret](#schemadhtsecret)]|false|none|Sequence of secret Diffie-Hellman tuple exponents (DHT secrets)|\n|inputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|"
    },
    {
      "heading": "PaymentRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapaymentrequest\"></a>\n<a id=\"schema_PaymentRequest\"></a>\n<a id=\"tocSpaymentrequest\"></a>\n<a id=\"tocspaymentrequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n    ```\n\nRequest for generation of payment transaction to a given address"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|value|integer(int64)|true|none|Payment amount|\n|assets|[[Asset](#schemaasset)]|false|none|Assets list in the transaction|\n|registers|[Registers](#schemaregisters)|false|none|Ergo box registers|"
    },
    {
      "heading": "BurnTokensRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaburntokensrequest\"></a>\n<a id=\"schema_BurnTokensRequest\"></a>\n<a id=\"tocSburntokensrequest\"></a>\n<a id=\"tocsburntokensrequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"assetsToBurn\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ]\n    }\n    ```\n\nRequest for burning tokens in wallet"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|assetsToBurn|[[Asset](#schemaasset)]|true|none|Assets list to burn in the transaction|"
    },
    {
      "heading": "AssetIssueRequest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaassetissuerequest\"></a>\n<a id=\"schema_AssetIssueRequest\"></a>\n<a id=\"tocSassetissuerequest\"></a>\n<a id=\"tocsassetissuerequest\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"ergValue\": 0,\n      \"amount\": 1000000,\n      \"name\": \"TST\",\n      \"description\": \"Test token\",\n      \"decimals\": 8,\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n    ```\n\nRequest for generation of asset issue transaction"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|[ErgoAddress](#schemaergoaddress)|false|none|Optional, first address in the wallet will be used if not defined|\n|ergValue|integer(int64)|false|none|Optional, amount of ergs to be put into box with issued assets|\n|amount|integer(int64)|true|none|Supply amount|\n|name|string|true|none|Assets name|\n|description|string|true|none|Assets description|\n|decimals|integer(int32)|true|none|Number of decimal places|\n|registers|[Registers](#schemaregisters)|false|none|Optional, possible values for registers R7...R9|"
    },
    {
      "heading": "FullBlock",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemafullblock\"></a>\n<a id=\"schema_FullBlock\"></a>\n<a id=\"tocSfullblock\"></a>\n<a id=\"tocsfullblock\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"blockTransactions\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactions\": [\n          {\n            \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"inputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"spendingProof\": {\n                  \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"extension\": {\n                    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                  }\n                }\n              }\n            ],\n            \"dataInputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n              }\n            ],\n            \"outputs\": [\n              {\n                \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"value\": 147,\n                \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n                \"creationHeight\": 9149,\n                \"assets\": [\n                  {\n                    \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                    \"amount\": 1000\n                  }\n                ],\n                \"additionalRegisters\": {\n                  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n                },\n                \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"index\": 0\n              }\n            ],\n            \"size\": 0\n          }\n        ],\n        \"size\": 0\n      },\n      \"adProofs\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"size\": 0\n      },\n      \"extension\": {\n        \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"fields\": [\n          [\n            \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        ]\n      },\n      \"size\": 0\n    }\n    ```\n\nBlock with header and transactions"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|header|[BlockHeader](#schemablockheader)|true|none|Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.|\n|blockTransactions|[BlockTransactions](#schemablocktransactions)|true|none|Section of a block which contains transactions.|\n|adProofs|[BlockADProofs](#schemablockadproofs)|true|none|none|\n|extension|[Extension](#schemaextension)|true|none|Section of a block which contains extension data.|\n|size|integer(int32)|true|none|Size in bytes|"
    },
    {
      "heading": "PowSolutions",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapowsolutions\"></a>\n<a id=\"schema_PowSolutions\"></a>\n<a id=\"tocSpowsolutions\"></a>\n<a id=\"tocspowsolutions\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    }\n    ```\n\nAn object containing all components of pow solution"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pk|string|true|none|Base16-encoded public key|\n|w|string|true|none|none|\n|n|string|true|none|none|\n|d|number|true|none|none|"
    },
    {
      "heading": "BlockHeaderWithoutPow",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemablockheaderwithoutpow\"></a>\n<a id=\"schema_BlockHeaderWithoutPow\"></a>\n<a id=\"tocSblockheaderwithoutpow\"></a>\n<a id=\"tocsblockheaderwithoutpow\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"height\": 667,\n      \"difficulty\": 62,\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"votes\": \"000000\",\n      \"size\": 0,\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|timestamp|[Timestamp](#schematimestamp)|true|none|Basic timestamp definition|\n|version|[Version](#schemaversion)|true|none|Ergo blockchain protocol version|\n|adProofsRoot|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|stateRoot|[ADDigest](#schemaaddigest)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|transactionsRoot|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|nBits|integer(int64)|true|none|none|\n|extensionHash|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|height|integer(int32)|true|none|none|\n|difficulty|integer(int32)|true|none|none|\n|parentId|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|votes|[Votes](#schemavotes)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|size|integer(int32)|false|none|Size in bytes|\n|extensionId|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|\n|transactionsId|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|\n|adProofsId|[ModifierId](#schemamodifierid)|false|none|Base16-encoded 32 byte modifier id|"
    },
    {
      "heading": "PopowHeader",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapopowheader\"></a>\n<a id=\"schema_PopowHeader\"></a>\n<a id=\"tocSpopowheader\"></a>\n<a id=\"tocspopowheader\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|header|[BlockHeader](#schemablockheader)|true|none|Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.|\n|interlinks|[[ModifierId](#schemamodifierid)]|true|none|Array of header interlinks|"
    },
    {
      "heading": "NipopowProof",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemanipopowproof\"></a>\n<a id=\"schema_NipopowProof\"></a>\n<a id=\"tocSnipopowproof\"></a>\n<a id=\"tocsnipopowproof\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"m\": 0,\n      \"k\": 0,\n      \"prefix\": [\n        {\n          \"header\": {\n            \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"timestamp\": 1524143059077,\n            \"version\": 2,\n            \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"nBits\": 19857408,\n            \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"powSolutions\": {\n              \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n              \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n              \"n\": \"0000000000000000\",\n              \"d\": 987654321\n            },\n            \"height\": 667,\n            \"difficulty\": \"9575989248\",\n            \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"votes\": \"000000\",\n            \"size\": 0,\n            \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          },\n          \"interlinks\": [\n            \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          ]\n        }\n      ],\n      \"suffixHead\": {\n        \"header\": {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        },\n        \"interlinks\": [\n          \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        ]\n      },\n      \"suffixTail\": [\n        {\n          \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"timestamp\": 1524143059077,\n          \"version\": 2,\n          \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"nBits\": 19857408,\n          \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"powSolutions\": {\n            \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n            \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n            \"n\": \"0000000000000000\",\n            \"d\": 987654321\n          },\n          \"height\": 667,\n          \"difficulty\": \"9575989248\",\n          \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"votes\": \"000000\",\n          \"size\": 0,\n          \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|m|number|true|none|security parameter (min \u03bc-level superchain length)|\n|k|number|true|none|security parameter (min suffix length, >= 1)|\n|prefix|[[PopowHeader](#schemapopowheader)]|true|none|proof prefix headers|\n|suffixHead|[PopowHeader](#schemapopowheader)|true|none|none|\n|suffixTail|[[BlockHeader](#schemablockheader)]|true|none|tail of the proof suffix headers|"
    },
    {
      "heading": "BlockHeader",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemablockheader\"></a>\n<a id=\"schema_BlockHeader\"></a>\n<a id=\"tocSblockheader\"></a>\n<a id=\"tocsblockheader\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"height\": 667,\n      \"difficulty\": \"9575989248\",\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"votes\": \"000000\",\n      \"size\": 0,\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n    ```\n\nHeader of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|[ModifierId](#schemamodifierid)|true|none|Block id|\n|timestamp|[Timestamp](#schematimestamp)|true|none|Block generation time reported by a miner|\n|version|[Version](#schemaversion)|true|none|Protocol version used to generate the block|\n|adProofsRoot|[Digest32](#schemadigest32)|true|none|Digest of UTXO set transformation proofs|\n|stateRoot|[ADDigest](#schemaaddigest)|true|none|AVL+ tree digest of UTXO set (after the block is applied)|\n|transactionsRoot|[Digest32](#schemadigest32)|true|none|Merkle tree digest of transactions in the block (BlockTransactions section)|\n|nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|extensionHash|[Digest32](#schemadigest32)|true|none|Merkle tree digest of the extension section of the block|\n|powSolutions|[PowSolutions](#schemapowsolutions)|true|none|Solution for the proof-of-work puzzle|\n|height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|difficulty|string|true|none|none|\n|parentId|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|votes|[Votes](#schemavotes)|true|none|Votes for changing system parameters|\n|size|integer(int32)|false|none|Size of the header in bytes|\n|extensionId|[ModifierId](#schemamodifierid)|false|none|Hash of the extension section of the block == hash(modifier type id, header id, extensionHash)|\n|transactionsId|[ModifierId](#schemamodifierid)|false|none|Hash of the transactions section of the block == hash(modifier type id, header id, transactionsRoot)|\n|adProofsId|[ModifierId](#schemamodifierid)|false|none|Hash of the UTXO set transformation proofs section of the block == hash(modifier type id, header id, adProofsRoot)|"
    },
    {
      "heading": "BlockTransactions",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemablocktransactions\"></a>\n<a id=\"schema_BlockTransactions\"></a>\n<a id=\"tocSblocktransactions\"></a>\n<a id=\"tocsblocktransactions\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactions\": [\n        {\n          \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ],\n          \"size\": 0\n        }\n      ],\n      \"size\": 0\n    }\n    ```\n\nSection of a block which contains transactions."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|headerId|[ModifierId](#schemamodifierid)|true|none|Identifier of a header of a corresponding block|\n|transactions|[Transactions](#schematransactions)|true|none|Transactions of the block|\n|size|integer(int32)|true|none|Size in bytes of all block transactions|"
    },
    {
      "heading": "BlockADProofs",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemablockadproofs\"></a>\n<a id=\"schema_BlockADProofs\"></a>\n<a id=\"tocSblockadproofs\"></a>\n<a id=\"tocsblockadproofs\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"size\": 0\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|headerId|[ModifierId](#schemamodifierid)|true|none|Identifier of a header of the block which contains the proofs|\n|proofBytes|[SerializedAdProof](#schemaserializedadproof)|true|none|Serialized bytes of the authenticated dictionary proof|\n|digest|[Digest32](#schemadigest32)|true|none|Hash of the proofBytes|\n|size|integer(int32)|true|none|Size in bytes|"
    },
    {
      "heading": "Extension",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaextension\"></a>\n<a id=\"schema_Extension\"></a>\n<a id=\"tocSextension\"></a>\n<a id=\"tocsextension\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"fields\": [\n        [\n          \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        ]\n      ]\n    }\n    ```\n\nSection of a block which contains extension data."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|headerId|[ModifierId](#schemamodifierid)|true|none|Identifier of a header of a corresponding block|\n|digest|[Digest32](#schemadigest32)|true|none|Root hash (aka digest) merkelized list of key-value records|\n|fields|[[KeyValueItem](#schemakeyvalueitem)]\u00a6null|true|none|List of key-value records|"
    },
    {
      "heading": "KeyValueItem",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemakeyvalueitem\"></a>\n<a id=\"schema_KeyValueItem\"></a>\n<a id=\"tocSkeyvalueitem\"></a>\n<a id=\"tocskeyvalueitem\"></a>\n\n=== \"json\"\n\n    ```json\n    [\n      \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]\n    ```\n\nKey-value record represented as a pair of hex strings in an array."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[HexString](#schemahexstring)]|false|none|Key-value record represented as a pair of hex strings in an array.|"
    },
    {
      "heading": "CandidateBlock",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacandidateblock\"></a>\n<a id=\"schema_CandidateBlock\"></a>\n<a id=\"tocScandidateblock\"></a>\n<a id=\"tocscandidateblock\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"version\": 2,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"adProofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsNumber\": 2,\n      \"transactions\": [\n        {\n          \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"extension\": {\n                  \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n                }\n              }\n            }\n          ],\n          \"dataInputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"value\": 147,\n              \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n              \"creationHeight\": 9149,\n              \"assets\": [\n                {\n                  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                  \"amount\": 1000\n                }\n              ],\n              \"additionalRegisters\": {\n                \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n              },\n              \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"index\": 0\n            }\n          ],\n          \"size\": 0\n        }\n      ],\n      \"votes\": \"000000\"\n    }\n    ```\n\nCan be null if node is not mining or candidate block is not ready"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|version|integer(int8)|false|none|none|\n|extensionHash|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|timestamp|[Timestamp](#schematimestamp)|false|none|Basic timestamp definition|\n|stateRoot|[ADDigest](#schemaaddigest)|false|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|nBits|integer(int64)|false|none|none|\n|adProofBytes|[SerializedAdProof](#schemaserializedadproof)|false|none|Base16-encoded ad proofs|\n|parentId|[ModifierId](#schemamodifierid)|true|none|Base16-encoded 32 byte modifier id|\n|transactionsNumber|integer(int32)|false|none|none|\n|transactions|[Transactions](#schematransactions)|false|none|List of ErgoTransaction objects|\n|votes|[Votes](#schemavotes)|false|none|Base16-encoded votes for a soft-fork and parameters|"
    },
    {
      "heading": "PassphraseMatch",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapassphrasematch\"></a>\n<a id=\"schema_PassphraseMatch\"></a>\n<a id=\"tocSpassphrasematch\"></a>\n<a id=\"tocspassphrasematch\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"matched\": true\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|matched|boolean|true|none|true if passphrase matches wallet, false otherwise|"
    },
    {
      "heading": "WalletStatus",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemawalletstatus\"></a>\n<a id=\"schema_WalletStatus\"></a>\n<a id=\"tocSwalletstatus\"></a>\n<a id=\"tocswalletstatus\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"isInitialized\": true,\n      \"isUnlocked\": true,\n      \"changeAddress\": \"3WzCFq7mkykKqi4Ykdk8BK814tkh6EsPmA42pQZxU2NRwSDgd6yB\",\n      \"walletHeight\": 0,\n      \"error\": \"string\"\n    }\n    ```\n\nStatus of the node wallet"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|isInitialized|boolean|true|none|true if wallet is initialized, false otherwise|\n|isUnlocked|boolean|true|none|true if wallet is unlocked, false otherwise|\n|changeAddress|string|true|none|address to send change to. Empty when wallet is not initialized or locked. By default change address correponds to root key address, could be set via /wallet/updateChangeAddress method.|\n|walletHeight|integer|true|none|last scanned height for the wallet (and external scans)|\n|error|string|true|none|last wallet error caught|"
    },
    {
      "heading": "InitWallet",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemainitwallet\"></a>\n<a id=\"schema_InitWallet\"></a>\n<a id=\"tocSinitwallet\"></a>\n<a id=\"tocsinitwallet\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"pass\": \"string\",\n      \"mnemonicPass\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pass|string|true|none|Password to encrypt wallet file with|\n|mnemonicPass|string|false|none|Optional pass to password-protect mnemonic seed|"
    },
    {
      "heading": "InitWalletResult",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemainitwalletresult\"></a>\n<a id=\"schema_InitWalletResult\"></a>\n<a id=\"tocSinitwalletresult\"></a>\n<a id=\"tocsinitwalletresult\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"mnemonic\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|mnemonic|string|true|none|Mnemonic seed phrase|"
    },
    {
      "heading": "RestoreWallet",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemarestorewallet\"></a>\n<a id=\"schema_RestoreWallet\"></a>\n<a id=\"tocSrestorewallet\"></a>\n<a id=\"tocsrestorewallet\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"pass\": \"string\",\n      \"mnemonic\": \"string\",\n      \"mnemonicPass\": \"string\",\n      \"usePre1627KeyDerivation\": true\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pass|string|true|none|Password to encrypt wallet file with|\n|mnemonic|string|true|none|Mnemonic seed|\n|mnemonicPass|string|false|none|Optional pass to password-protect mnemonic seed|\n|usePre1627KeyDerivation|boolean|true|none|use incorrect(previous) BIP32 key derivation (see https://github.com/ergoplatform/ergo/issues/1627 for details). It's recommended to set to 'true' if the original wallet was created by ergo node before v4.0.105.|"
    },
    {
      "heading": "CheckWallet",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemacheckwallet\"></a>\n<a id=\"schema_CheckWallet\"></a>\n<a id=\"tocScheckwallet\"></a>\n<a id=\"tocscheckwallet\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"mnemonic\": \"string\",\n      \"mnemonicPass\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|mnemonic|string|true|none|Mnemonic seed (optional)|\n|mnemonicPass|string|false|none|Optional pass to password-protect mnemonic seed|"
    },
    {
      "heading": "UnlockWallet",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaunlockwallet\"></a>\n<a id=\"schema_UnlockWallet\"></a>\n<a id=\"tocSunlockwallet\"></a>\n<a id=\"tocsunlockwallet\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"pass\": \"string\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pass|string|true|none|Password to decrypt wallet file with|"
    },
    {
      "heading": "DeriveKey",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaderivekey\"></a>\n<a id=\"schema_DeriveKey\"></a>\n<a id=\"tocSderivekey\"></a>\n<a id=\"tocsderivekey\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"derivationPath\": \"m/1/2\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|derivationPath|string|true|none|Derivation path for a new secret to derive|"
    },
    {
      "heading": "DeriveKeyResult",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaderivekeyresult\"></a>\n<a id=\"schema_DeriveKeyResult\"></a>\n<a id=\"tocSderivekeyresult\"></a>\n<a id=\"tocsderivekeyresult\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "DeriveNextKeyResult",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaderivenextkeyresult\"></a>\n<a id=\"schema_DeriveNextKeyResult\"></a>\n<a id=\"tocSderivenextkeyresult\"></a>\n<a id=\"tocsderivenextkeyresult\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"derivationPath\": \"m/1/2\",\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|derivationPath|string|true|none|Derivation path of the resulted secret|\n|address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "MerkleProof",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemamerkleproof\"></a>\n<a id=\"schema_MerkleProof\"></a>\n<a id=\"tocSmerkleproof\"></a>\n<a id=\"tocsmerkleproof\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n      \"levels\": [\n        [\n          \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n          0\n        ]\n      ]\n    }\n    ```\n\nMerkle proof for a leaf, which is an array of bytes (e.g. a transaction identifier)"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|leaf|string|true|none|Base16-encoded Merkle tree leaf bytes|\n|levels|[array]|true|none|none|\n\nanyOf\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|string|false|none|hash|\n\nor\n\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb *anonymous*|integer|false|none|side of hash|"
    },
    {
      "heading": "ProofOfUpcomingTransactions",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaproofofupcomingtransactions\"></a>\n<a id=\"schema_ProofOfUpcomingTransactions\"></a>\n<a id=\"tocSproofofupcomingtransactions\"></a>\n<a id=\"tocsproofofupcomingtransactions\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n      \"txProofs\": [\n        {\n          \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n          \"levels\": [\n            [\n              \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n              0\n            ]\n          ]\n        }\n      ]\n    }\n    ```\n\nProof that a block corresponding to given header without PoW contains some transactions"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|msgPreimage|string|true|none|Base16-encoded serialized header without Proof-of-Work|\n|txProofs|[[MerkleProof](#schemamerkleproof)]|true|none|Merkle proofs of transactions included into blocks (not necessarily all the block transactions)|"
    },
    {
      "heading": "WorkMessage",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaworkmessage\"></a>\n<a id=\"schema_WorkMessage\"></a>\n<a id=\"tocSworkmessage\"></a>\n<a id=\"tocsworkmessage\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"b\": 987654321,\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"proof\": {\n        \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n        \"txProofs\": [\n          {\n            \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n            \"levels\": [\n              [\n                \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n                0\n              ]\n            ]\n          }\n        ]\n      }\n    }\n    ```\n\nBlock candidate related data for external miner to perform work"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|msg|string|true|none|Base16-encoded block header bytes without PoW solution|\n|b|integer|true|none|Work target value|\n|pk|string|true|none|Base16-encoded miner public key|\n|proof|[ProofOfUpcomingTransactions](#schemaproofofupcomingtransactions)|false|none|Proof that a block corresponding to given header without PoW contains some transactions|"
    },
    {
      "heading": "Peer",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapeer\"></a>\n<a id=\"schema_Peer\"></a>\n<a id=\"tocSpeer\"></a>\n<a id=\"tocspeer\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"127.0.0.1:5673\",\n      \"restApiUrl\": \"https://example.com\",\n      \"name\": \"mynode\",\n      \"lastSeen\": 1524143059077,\n      \"connectionType\": \"Incoming\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|true|none|none|\n|restApiUrl|string\u00a6null|false|none|none|\n|name|string\u00a6null|false|none|none|\n|lastSeen|[Timestamp](#schematimestamp)|false|none|Basic timestamp definition|\n|connectionType|string\u00a6null|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|connectionType|Incoming|\n|connectionType|Outgoing|"
    },
    {
      "heading": "PeersStatus",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapeersstatus\"></a>\n<a id=\"schema_PeersStatus\"></a>\n<a id=\"tocSpeersstatus\"></a>\n<a id=\"tocspeersstatus\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"lastIncomingMessage\": 1524143059077,\n      \"currentNetworkTime\": 1524143059077\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|lastIncomingMessage|[Timestamp](#schematimestamp)|true|none|Basic timestamp definition|\n|currentNetworkTime|[Timestamp](#schematimestamp)|true|none|Basic timestamp definition|"
    },
    {
      "heading": "PeerMode",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemapeermode\"></a>\n<a id=\"schema_PeerMode\"></a>\n<a id=\"tocSpeermode\"></a>\n<a id=\"tocspeermode\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"state\": \"utxo\",\n      \"verifyingTransactions\": true,\n      \"fullBlocksSuffix\": 2880\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|state|string|true|none|none|\n|verifyingTransactions|boolean|true|none|none|\n|fullBlocksSuffix|integer|true|none|none|"
    },
    {
      "heading": "SyncInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasyncinfo\"></a>\n<a id=\"schema_SyncInfo\"></a>\n<a id=\"tocSsyncinfo\"></a>\n<a id=\"tocssyncinfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"127.0.0.1:5673\",\n      \"mode\": {\n        \"state\": \"utxo\",\n        \"verifyingTransactions\": true,\n        \"fullBlocksSuffix\": 2880\n      },\n      \"version\": \"4.0.16\",\n      \"status\": \"Older\",\n      \"height\": 65780\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|true|none|none|\n|mode|[PeerMode](#schemapeermode)|true|none|Peer operating mode parameters|\n|version|string|true|none|none|\n|status|string|true|none|none|\n|height|integer|true|none|none|"
    },
    {
      "heading": "RequestedInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemarequestedinfo\"></a>\n<a id=\"schema_RequestedInfo\"></a>\n<a id=\"tocSrequestedinfo\"></a>\n<a id=\"tocsrequestedinfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"127.0.0.1:5673\",\n      \"version\": \"4.0.26\",\n      \"checks\": 4\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|false|none|none|\n|version|string|false|none|none|\n|checks|integer|true|none|How many times we checked for modifier delivery status|"
    },
    {
      "heading": "RequestedInfoByModifierId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemarequestedinfobymodifierid\"></a>\n<a id=\"schema_RequestedInfoByModifierId\"></a>\n<a id=\"tocSrequestedinfobymodifierid\"></a>\n<a id=\"tocsrequestedinfobymodifierid\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|**additionalProperties**|[RequestedInfo](#schemarequestedinfo)|false|none|none|"
    },
    {
      "heading": "ConnectedPeer",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaconnectedpeer\"></a>\n<a id=\"schema_ConnectedPeer\"></a>\n<a id=\"tocSconnectedpeer\"></a>\n<a id=\"tocsconnectedpeer\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"127.0.0.1:5673\",\n      \"version\": \"4.0.26\",\n      \"lastMessage\": 1524143059077\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|true|none|none|\n|version|string|false|none|none|\n|lastMessage|[Timestamp](#schematimestamp)|false|none|Basic timestamp definition|"
    },
    {
      "heading": "ConnectedPeerByModifierId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaconnectedpeerbymodifierid\"></a>\n<a id=\"schema_ConnectedPeerByModifierId\"></a>\n<a id=\"tocSconnectedpeerbymodifierid\"></a>\n<a id=\"tocsconnectedpeerbymodifierid\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|**additionalProperties**|[ConnectedPeer](#schemaconnectedpeer)|false|none|none|"
    },
    {
      "heading": "TrackInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematrackinfo\"></a>\n<a id=\"schema_TrackInfo\"></a>\n<a id=\"tocStrackinfo\"></a>\n<a id=\"tocstrackinfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"invalidModifierApproxSize\": 65780,\n      \"requested\": {\n        \"property1\": {\n          \"property1\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"checks\": 4\n          },\n          \"property2\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"checks\": 4\n          }\n        },\n        \"property2\": {\n          \"property1\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"checks\": 4\n          },\n          \"property2\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"checks\": 4\n          }\n        }\n      },\n      \"received\": {\n        \"property1\": {\n          \"property1\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"lastMessage\": 1524143059077\n          },\n          \"property2\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"lastMessage\": 1524143059077\n          }\n        },\n        \"property2\": {\n          \"property1\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"lastMessage\": 1524143059077\n          },\n          \"property2\": {\n            \"address\": \"127.0.0.1:5673\",\n            \"version\": \"4.0.26\",\n            \"lastMessage\": 1524143059077\n          }\n        }\n      }\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|invalidModifierApproxSize|integer|true|none|none|\n|requested|object|true|none|Currently requested modifiers|\n|\u00bb **additionalProperties**|[RequestedInfoByModifierId](#schemarequestedinfobymodifierid)|false|none|none|\n|received|object|true|none|Received modifiers|\n|\u00bb **additionalProperties**|[ConnectedPeerByModifierId](#schemaconnectedpeerbymodifierid)|false|none|none|"
    },
    {
      "heading": "BlacklistedPeers",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemablacklistedpeers\"></a>\n<a id=\"schema_BlacklistedPeers\"></a>\n<a id=\"tocSblacklistedpeers\"></a>\n<a id=\"tocsblacklistedpeers\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"addresses\": [\n        \"string\"\n      ]\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|addresses|[string]|true|none|none|"
    },
    {
      "heading": "NodeInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemanodeinfo\"></a>\n<a id=\"schema_NodeInfo\"></a>\n<a id=\"tocSnodeinfo\"></a>\n<a id=\"tocsnodeinfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"name\": \"my-node-1\",\n      \"appVersion\": \"0.0.1\",\n      \"fullHeight\": 667,\n      \"headersHeight\": 667,\n      \"maxPeerHeight\": 706162,\n      \"bestFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"previousFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"bestHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"dab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateType\": \"digest\",\n      \"stateVersion\": \"fab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"isMining\": true,\n      \"peersCount\": 327,\n      \"unconfirmedCount\": 327,\n      \"difficulty\": 667,\n      \"currentTime\": 1524143059077,\n      \"launchTime\": 1524143059077,\n      \"headersScore\": 0,\n      \"fullBlocksScore\": 0,\n      \"genesisBlockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"parameters\": {\n        \"height\": 667,\n        \"storageFeeFactor\": 100000,\n        \"minValuePerByte\": 360,\n        \"maxBlockSize\": 1048576,\n        \"maxBlockCost\": 104876,\n        \"blockVersion\": 2,\n        \"tokenAccessCost\": 100,\n        \"inputCost\": 100,\n        \"dataInputCost\": 100,\n        \"outputCost\": 100\n      },\n      \"eip27Supported\": true,\n      \"restApiUrl\": \"https://example.com\"\n    }\n    ```\n\nData container for /info API request output. Contains information about node's state and configuration. Contains data about best block, best header, state, etc. Best block is the block with the maximum height."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|name|string|true|none|Node's (peer) self-chosen name from config|\n|appVersion|string|true|none|Node's application version|\n|fullHeight|integer(int32)\u00a6null|true|none|Height of the best block known to the node. Can be 'null' if state is empty (no full block is applied since node launch)|\n|headersHeight|integer(int32)\u00a6null|true|none|The height of the best header (i.e. the one with the maximum height). Can be 'null' if state is empty (no header applied since node launch)|\n|maxPeerHeight|integer(int32)\u00a6null|true|none|Maximum block height of connected peers. Can be 'null' if state is empty (no peer connected since node launch)|\n|bestFullHeaderId|[ModifierId](#schemamodifierid)\u00a6null|true|none|Best full-block id (header id of such block). Can be 'null' if no full block is applied since node launch.|\n|previousFullHeaderId|[ModifierId](#schemamodifierid)\u00a6null|true|none|Header id of the parent block of the best full-block (i.e. previous block in the blockchain). Can be 'null' if no full block is applied since node launch|\n|bestHeaderId|[ModifierId](#schemamodifierid)\u00a6null|true|none|Best header ID (hex representation). Can be 'null' if no header applied since node launch.|\n|stateRoot|string\u00a6null|true|none|Current UTXO set digest. Can be 'null' if state is empty (no full block is applied since node launch)|\n|stateType|string|true|none|Whether the node is storing UTXO set or only its digest. Equals `digest` if only digest is stored, `utxo` if full UTXO set is stored.|\n|stateVersion|string\u00a6null|true|none|Id of a block where UTXO set digest is taken from. Can be 'null' if no full block is applied since node launch.|\n|isMining|boolean|true|none|Whether the node is mining (i.e. generating blocks).|\n|peersCount|integer(int32)|true|none|Number of peers this node is connected with.|\n|unconfirmedCount|integer(int32)|true|none|Number of unconfirmed transactions in the mempool.|\n|difficulty|integer\u00a6null|true|none|Difficulty on current bestFullHeaderId. Can be 'null' if no full block is applied since node launch. Difficulty is a BigInt integer.|\n|currentTime|[Timestamp](#schematimestamp)|true|none|Current internal node time|\n|launchTime|[Timestamp](#schematimestamp)|true|none|When the node was launched (in Java time format, UNIX time * 1000).|\n|headersScore|integer\u00a6null|true|none|Cumulative difficulty of best headers-chain. Can be 'null' if no headers is applied since node launch. headersScore is a BigInt integer.|\n|fullBlocksScore|integer\u00a6null|true|none|Cumulative difficulty of best full blocks chain. Can be 'null' if no full block is applied since node launch. fullBlocksScore is a BigInt integer.|\n|genesisBlockId|[ModifierId](#schemamodifierid)\u00a6null|true|none|Header id of genesis block. Can be 'null' if genesis blocks is not produced yet.|\n|parameters|[Parameters](#schemaparameters)|true|none|System parameters which could be readjusted via collective miners decision.|\n|eip27Supported|boolean|false|none|Whether EIP-27 locked in|\n|restApiUrl|string|false|none|Publicly accessible url of node which exposes restApi in firewall|"
    },
    {
      "heading": "Enumerated Values",
      "level": 5,
      "content": "|Property|Value|\n|---|---|\n|stateType|digest|\n|stateType|utxo|"
    },
    {
      "heading": "Parameters",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaparameters\"></a>\n<a id=\"schema_Parameters\"></a>\n<a id=\"tocSparameters\"></a>\n<a id=\"tocsparameters\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"height\": 667,\n      \"storageFeeFactor\": 100000,\n      \"minValuePerByte\": 360,\n      \"maxBlockSize\": 1048576,\n      \"maxBlockCost\": 104876,\n      \"blockVersion\": 2,\n      \"tokenAccessCost\": 100,\n      \"inputCost\": 100,\n      \"dataInputCost\": 100,\n      \"outputCost\": 100\n    }\n    ```\n\nSystem parameters which could be readjusted via collective miners decision."
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|height|integer(int32)|true|none|Height when current parameters were considered(not actual height). Can be '0' if state is empty|\n|storageFeeFactor|integer(int32)|true|none|Storage fee coefficient (per byte per storage period ~4 years)|\n|minValuePerByte|integer(int32)|true|none|Minimum value per byte of an output|\n|maxBlockSize|integer(int32)|true|none|Maximum block size (in bytes)|\n|maxBlockCost|integer(int32)|true|none|Maximum cumulative computational cost of input scripts in block transactions|\n|blockVersion|[Version](#schemaversion)|true|none|Ergo blockchain protocol version|\n|tokenAccessCost|integer(int32)|true|none|Validation cost of a single token|\n|inputCost|integer(int32)|true|none|Validation cost per one transaction input|\n|dataInputCost|integer(int32)|true|none|Validation cost per one data input|\n|outputCost|integer(int32)|true|none|Validation cost per one transaction output|"
    },
    {
      "heading": "Version",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaversion\"></a>\n<a id=\"schema_Version\"></a>\n<a id=\"tocSversion\"></a>\n<a id=\"tocsversion\"></a>\n\n=== \"json\"\n\n    ```json\n    2\n    ```\n\nErgo blockchain protocol version"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|integer(int8)|false|none|Ergo blockchain protocol version|"
    },
    {
      "heading": "TransactionBoxId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematransactionboxid\"></a>\n<a id=\"schema_TransactionBoxId\"></a>\n<a id=\"tocStransactionboxid\"></a>\n<a id=\"tocstransactionboxid\"></a>\n\n=== \"json\"\n\n    ```json\n    \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded transaction box id bytes. Should be 32 bytes long"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|"
    },
    {
      "heading": "TransactionId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematransactionid\"></a>\n<a id=\"schema_TransactionId\"></a>\n<a id=\"tocStransactionid\"></a>\n<a id=\"tocstransactionid\"></a>\n\n=== \"json\"\n\n    ```json\n    \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded transaction id bytes"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded transaction id bytes|"
    },
    {
      "heading": "ErgoTree",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotree\"></a>\n<a id=\"schema_ErgoTree\"></a>\n<a id=\"tocSergotree\"></a>\n<a id=\"tocsergotree\"></a>\n\n=== \"json\"\n\n    ```json\n    \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\"\n    ```\n\nBase16-encoded ergo tree bytes"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded ergo tree bytes|"
    },
    {
      "heading": "ErgoTreeObject",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaergotreeobject\"></a>\n<a id=\"schema_ErgoTreeObject\"></a>\n<a id=\"tocSergotreeobject\"></a>\n<a id=\"tocsergotreeobject\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"tree\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n    }\n    ```"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tree|string|false|none|serialized Ergo tree|"
    },
    {
      "heading": "Transactions",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematransactions\"></a>\n<a id=\"schema_Transactions\"></a>\n<a id=\"tocStransactions\"></a>\n<a id=\"tocstransactions\"></a>\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n            }\n          }\n        ],\n        \"dataInputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n          }\n        ],\n        \"outputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"value\": 147,\n            \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n            \"creationHeight\": 9149,\n            \"assets\": [\n              {\n                \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n                \"amount\": 1000\n              }\n            ],\n            \"additionalRegisters\": {\n              \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n            },\n            \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"index\": 0\n          }\n        ],\n        \"size\": 0\n      }\n    ]\n    ```\n\nList of ErgoTransaction objects"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[ErgoTransaction](#schemaergotransaction)]|false|none|List of ErgoTransaction objects|"
    },
    {
      "heading": "FeeHistogramBin",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemafeehistogrambin\"></a>\n<a id=\"schema_FeeHistogramBin\"></a>\n<a id=\"tocSfeehistogrambin\"></a>\n<a id=\"tocsfeehistogrambin\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"nTxns\": 0,\n      \"totalFee\": 0\n    }\n    ```\n\nFee histogram bin"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|nTxns|integer(int32)|false|none|none|\n|totalFee|integer(int64)|false|none|none|"
    },
    {
      "heading": "FeeHistogram",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemafeehistogram\"></a>\n<a id=\"schema_FeeHistogram\"></a>\n<a id=\"tocSfeehistogram\"></a>\n<a id=\"tocsfeehistogram\"></a>\n\n=== \"json\"\n\n    ```json\n    [\n      {\n        \"nTxns\": 0,\n        \"totalFee\": 0\n      }\n    ]\n    ```\n\nFee histogram for transactions in mempool"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|[[FeeHistogramBin](#schemafeehistogrambin)]|false|none|Fee histogram for transactions in mempool|"
    },
    {
      "heading": "Asset",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaasset\"></a>\n<a id=\"schema_Asset\"></a>\n<a id=\"tocSasset\"></a>\n<a id=\"tocsasset\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n    ```\n\nToken detail in the transaction"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tokenId|[Digest32](#schemadigest32)|true|none|Base16-encoded 32 byte digest|\n|amount|integer(int64)|true|none|Amount of the token|"
    },
    {
      "heading": "Registers",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaregisters\"></a>\n<a id=\"schema_Registers\"></a>\n<a id=\"tocSregisters\"></a>\n<a id=\"tocsregisters\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    }\n    ```\n\nErgo box registers"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|**additionalProperties**|[SValue](#schemasvalue)|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "SValue",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemasvalue\"></a>\n<a id=\"schema_SValue\"></a>\n<a id=\"tocSsvalue\"></a>\n<a id=\"tocssvalue\"></a>\n\n=== \"json\"\n\n    ```json\n    \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    ```\n\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "Votes",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemavotes\"></a>\n<a id=\"schema_Votes\"></a>\n<a id=\"tocSvotes\"></a>\n<a id=\"tocsvotes\"></a>\n\n=== \"json\"\n\n    ```json\n    \"000000\"\n    ```\n\nBase16-encoded votes for a soft-fork and parameters"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded votes for a soft-fork and parameters|"
    },
    {
      "heading": "ModifierId",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemamodifierid\"></a>\n<a id=\"schema_ModifierId\"></a>\n<a id=\"tocSmodifierid\"></a>\n<a id=\"tocsmodifierid\"></a>\n\n=== \"json\"\n\n    ```json\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded 32 byte modifier id"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded 32 byte modifier id|"
    },
    {
      "heading": "Digest32",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemadigest32\"></a>\n<a id=\"schema_Digest32\"></a>\n<a id=\"tocSdigest32\"></a>\n<a id=\"tocsdigest32\"></a>\n\n=== \"json\"\n\n    ```json\n    \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded 32 byte digest"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded 32 byte digest|"
    },
    {
      "heading": "HexString",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemahexstring\"></a>\n<a id=\"schema_HexString\"></a>\n<a id=\"tocShexstring\"></a>\n<a id=\"tocshexstring\"></a>\n\n=== \"json\"\n\n    ```json\n    \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded bytes"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded bytes|"
    },
    {
      "heading": "ADDigest",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaaddigest\"></a>\n<a id=\"schema_ADDigest\"></a>\n<a id=\"tocSaddigest\"></a>\n<a id=\"tocsaddigest\"></a>\n\n=== \"json\"\n\n    ```json\n    \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded 33 byte digest - digest with extra byte with tree height"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|"
    },
    {
      "heading": "SerializedAdProof",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaserializedadproof\"></a>\n<a id=\"schema_SerializedAdProof\"></a>\n<a id=\"tocSserializedadproof\"></a>\n<a id=\"tocsserializedadproof\"></a>\n\n=== \"json\"\n\n    ```json\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded ad proofs"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded ad proofs|"
    },
    {
      "heading": "SpendingProofBytes",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaspendingproofbytes\"></a>\n<a id=\"schema_SpendingProofBytes\"></a>\n<a id=\"tocSspendingproofbytes\"></a>\n<a id=\"tocsspendingproofbytes\"></a>\n\n=== \"json\"\n\n    ```json\n    \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded spending proofs"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded spending proofs|"
    },
    {
      "heading": "BlockSignature",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemablocksignature\"></a>\n<a id=\"schema_BlockSignature\"></a>\n<a id=\"tocSblocksignature\"></a>\n<a id=\"tocsblocksignature\"></a>\n\n=== \"json\"\n\n    ```json\n    \"5ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ```\n\nBase16-encoded block signature"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|string(base16)|false|none|Base16-encoded block signature|"
    },
    {
      "heading": "Timestamp",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schematimestamp\"></a>\n<a id=\"schema_Timestamp\"></a>\n<a id=\"tocStimestamp\"></a>\n<a id=\"tocstimestamp\"></a>\n\n=== \"json\"\n\n    ```json\n    1524143059077\n    ```\n\nBasic timestamp definition"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|*anonymous*|integer(int64)|false|none|Basic timestamp definition|"
    },
    {
      "heading": "EmissionInfo",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaemissioninfo\"></a>\n<a id=\"schema_EmissionInfo\"></a>\n<a id=\"tocSemissioninfo\"></a>\n<a id=\"tocsemissioninfo\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"minerReward\": 0,\n      \"totalCoinsIssued\": 0,\n      \"totalRemainCoins\": 0,\n      \"reemitted\": 0\n    }\n    ```\n\nEmission info for height"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|minerReward|integer(int64)|false|none|none|\n|totalCoinsIssued|integer(int64)|false|none|none|\n|totalRemainCoins|integer(int64)|false|none|none|\n|reemitted|integer(int64)|false|none|none|"
    },
    {
      "heading": "EmissionScripts",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaemissionscripts\"></a>\n<a id=\"schema_EmissionScripts\"></a>\n<a id=\"tocSemissionscripts\"></a>\n<a id=\"tocsemissionscripts\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"emission\": \"string\",\n      \"reemission\": \"string\",\n      \"pay2Reemission\": \"string\"\n    }\n    ```\n\nEmission related scripts"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|emission|string|false|none|none|\n|reemission|string|false|none|none|\n|pay2Reemission|string|false|none|none|"
    },
    {
      "heading": "BalancesSnapshot",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemabalancessnapshot\"></a>\n<a id=\"schema_BalancesSnapshot\"></a>\n<a id=\"tocSbalancessnapshot\"></a>\n<a id=\"tocsbalancessnapshot\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"height\": 0,\n      \"balance\": 0,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ]\n    }\n    ```\n\nAmount of Ergo tokens and assets"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|height|integer(int32)|true|none|none|\n|balance|integer(int64)|true|none|none|\n|assets|[[Asset](#schemaasset)]|false|none|[Token detail in the transaction]|"
    },
    {
      "heading": "AddressValidity",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaaddressvalidity\"></a>\n<a id=\"schema_AddressValidity\"></a>\n<a id=\"tocSaddressvalidity\"></a>\n<a id=\"tocsaddressvalidity\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"isValid\": true,\n      \"error\": \"string\"\n    }\n    ```\n\nValidity status of Ergo address"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|[ErgoAddress](#schemaergoaddress)|true|none|Encoded Ergo Address|\n|isValid|boolean|true|none|none|\n|error|string|false|none|none|"
    },
    {
      "heading": "ApiError",
      "level": 3,
      "content": "<!-- backwards compatibility -->\n<a id=\"schemaapierror\"></a>\n<a id=\"schema_ApiError\"></a>\n<a id=\"tocSapierror\"></a>\n<a id=\"tocsapierror\"></a>\n\n=== \"json\"\n\n    ```json\n    {\n      \"error\": 500,\n      \"reason\": \"Internal server error\",\n      \"detail\": \"string\"\n    }\n    ```\n\nError response from API"
    },
    {
      "heading": "Properties",
      "level": 4,
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|error|integer|true|none|Error code|\n|reason|string|true|none|Error message explaining the reason of the error|\n|detail|string\u00a6null|true|none|Detailed error description|"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/node/swagger/openapi.md",
  "processed_at": "2025-05-11T19:57:29.535356",
  "ai_processed": true
}