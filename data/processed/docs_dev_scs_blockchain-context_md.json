{
  "id": "docs_dev_scs_blockchain-context_md",
  "title": "The Blockchain Context",
  "summary": "The document provides an overview of the Blockchain Context, which represents the data available to an ErgoScript contract during its execution. The key entities within the Blockchain Context include:\n\nHEIGHT: The current block height.\nSELF: The current eUTXO input box being validated.\nINPUTS: The eUTXO input boxes used in the transaction.\nCONTEXT.dataInputs: Additional data input boxes that are not spent.\nOUTPUTS: The output eUTXO boxes that will be created.\nCONTEXT.headers: The last 10 block headers preceding the current height.\nCONTEXT.preHeader: The pre-header information available to miners.\n\nThe document also includes an example code snippet demonstrating how to access and use the data within the Blockchain Context to implement spending conditions for an ErgoScript contract.",
  "qa_pairs": [
    {
      "question": "What is the Blockchain Context?",
      "answer": "The Blockchain Context represents data taken from the transaction and the state of the blockchain. The data for the blockchain context is stored in the global object `CONTEXT`."
    },
    {
      "question": "What is the purpose of the `HEIGHT` property in the Blockchain Context?",
      "answer": "The `HEIGHT` property is an integer representing the height of the block currently being validated by miners."
    },
    {
      "question": "What information can be accessed through the `SELF` box in the Blockchain Context?",
      "answer": "The `SELF` box contains information relevant to the specified eUTXO, such as the value in nanoERGs, the box ID, the proposition bytes of the guarding script, the tokens stored in the box, and the box registers."
    },
    {
      "question": "What is the purpose of the `INPUTS` object in the Blockchain Context?",
      "answer": "The `INPUTS` object contains the eUTXOs used as input boxes to be spent in the transaction. The `SELF` box is part of this input box collection."
    },
    {
      "question": "How can the data in the Blockchain Context be used to manipulate a contract's spending conditions?",
      "answer": "The Blockchain Context provides the main entities that you will interact with to manipulate your contract's spending conditions."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Blockchain\n  - Context\n---"
    },
    {
      "heading": "The Blockchain Context",
      "level": 1,
      "content": "The Blockchain Context represents data taken from the transaction and the state of the blockchain. The data for the blockchain context is stored in the global object `CONTEXT`. `CONTEXT`, therefore, contains the main entities that you will interact with to manipulate your contract\u2019s spending conditions."
    },
    {
      "heading": "HEIGHT",
      "level": 3,
      "content": "An integer representing the height of the block currently being validated by miners. This value can be accessed using `HEIGHT`."
    },
    {
      "heading": "SELF",
      "level": 3,
      "content": "`SELF` represents the current eUTXO input box which holds the ErgoScript contract. The `SELF` box is of type `Box`, containing information relevant to the specified eUTXO, such as:\n\n*   The value in nanoERGs\n*   The box ID\n*   The proposition bytes of the guarding script for this eUTXO\n*   The tokens stored in the box\n*   The box registers"
    },
    {
      "heading": "INPUTS",
      "level": 3,
      "content": "The eUTXOs used as input boxes to be spent in the transaction. These boxes are stored in a collection and can be accessed using the object called `INPUTS`. The `SELF` box is part of this input box collection."
    },
    {
      "heading": "Data Inputs",
      "level": 3,
      "content": "Data inputs are input eUTXOs that are not spent in the transaction. They serve as \u2018read-only\u2019 boxes, usually holding information necessary for the spending conditions of the contract. Data inputs can be accessed using `CONTEXT.dataInputs`."
    },
    {
      "heading": "OUTPUTS",
      "level": 3,
      "content": "The output box eUTXOs that will be created by the transaction. This collection can be accessed using the `OUTPUTS` object."
    },
    {
      "heading": "Headers",
      "level": 3,
      "content": "Block headers are available through the `CONTEXT.headers` function. The `headers` function returns a collection holding the last 10 block headers preceding the current `HEIGHT`. Using this function allows your contract to gain insight into the most recent blocks before the current transaction's execution context. Each `Header` object in the collection returned by `headers` holds various information, much of which pertains to the block miner, such as the miner\u2019s public key (PK), the nonce used to find the block, and the votes the miner submitted when the block was mined."
    },
    {
      "heading": "Pre-Headers",
      "level": 3,
      "content": "The `CONTEXT.preHeader` function gives your contract access to the `PreHeader`. The `PreHeader` object represents all the information available to miners attempting to find the next block. Because each block miner must insert their own information to properly mine a block, the data contained within each `PreHeader` object varies depending on who mines the block. This means your contract could execute differently depending on who mines the block containing the transaction that spends your contract\u2019s box."
    },
    {
      "heading": "Example",
      "level": 2,
      "content": "```scala\n{\n\t// Focus on how we are accessing this data and using it in our contract\n\n\t// Checking if the id of our first input box is the same as the id of our output box\n\tval selfAtZero = SELF.id == INPUTS(0).id\n\t// Retrieving a long value from R4 of the first data input and adding it to our output value\n\tval boxAmountToAdd: Long = CONTEXT.dataInputs(0).R4[Long].get \n\tval amountAddedInOutputs = OUTPUTS(0).value == SELF.value + boxAmountToAdd\n\t// Ensuring the height is greater than 700000\n\tval heightIsValid: Boolean = HEIGHT > 700000\n\t// Ensuring the nonce is even\n\tval randomValueIsEven: Boolean = CONTEXT.headers(0).powNonce(0) % 2 == 0\n\n\t// If the first condition is true, then the second condition is not checked\n\t// Checking if either our output box has the correct value added or the nonce is even and height is greater than 700000\n\tsigmaProp(amountAddedInOutputs && selfAtZero) \n\t\t\t|| sigmaProp(heightIsValid && randomValueIsEven)\n}\n\n```\n\nThe code uses various fields of the `CONTEXT` object to check certain conditions. It then combines these conditions into a final `SigmaProp` result that evaluates to true if either (`amountAddedInOutputs && selfAtZero`) or (`heightIsValid && randomValueIsEven`) is true."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/scs/blockchain-context.md",
  "processed_at": "2025-05-11T19:27:06.831766",
  "ai_processed": true
}