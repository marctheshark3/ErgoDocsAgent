{
  "id": "docs_archive_node-config_md",
  "title": "Node Config File",
  "summary": "This document provides an overview of the Node Config File for the Ergo blockchain platform. It covers the default configuration settings, including the data directory, node state type, transaction verification, mining settings, and network settings such as declared address, bind address, and known peers. The document also notes that the guide is outdated and should be updated to the current configuration format. It provides information on time settings and wallet configuration for different operating systems.",
  "qa_pairs": [
    {
      "question": "What is the purpose of the Ergo node configuration file?",
      "answer": "The Ergo node configuration file allows you to set essential application parameters and other configuration subsections for the Ergo node."
    },
    {
      "question": "What are the key settings in the 'node' section of the configuration file?",
      "answer": "The 'node' section includes settings for the node view holder regime, such as the state type, whether to verify transactions, the number of blocks to keep, PoPoW bootstrap, and whether mining is enabled."
    },
    {
      "question": "How can you override the default configuration parameters?",
      "answer": "You can override configuration parameters by providing an additional configuration file as the first command line parameter when starting the Ergo node application."
    },
    {
      "question": "What is the purpose of the 'declaredAddress' parameter in the 'scorex.network' section?",
      "answer": "The 'declaredAddress' parameter sets the external IP address and port number of the node, which is necessary for the node to work behind a NAT."
    },
    {
      "question": "What is the purpose of the 'bindAddress' parameter in the 'scorex.network' section?",
      "answer": "The 'bindAddress' parameter sets the IP address of the local network interface on which the Ergo node will accept incoming connections."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": ""
    },
    {
      "heading": "Node Config File",
      "level": 1,
      "content": "Please see [conf](conf.md)\n\n<!-- !!!Note!!! This guide is outdated and should be actualized to current config format"
    },
    {
      "heading": "Actual for version 1.6.1",
      "level": 3,
      "content": "Below you can find a complete Ergo Node configuration file. This is the default configuration shipped with the application.\nIt is possible to overwrite any parameters by providing an additional configuration file. You can pass an additional configuration file\nby providing the path to it as the first command line parameter when starting Ergo Node application.\n\n```bash\nergo {\n  # Directory to keep data\n  directory = ${user.dir}\"/ergo/data\"\n\n  # Settings for node view holder regime. See papers.yellow.ModifiersProcessing.md\n  node {\n    # State type.  Possible options are:\n    # \"utxo\" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs\n    # \"digest\" - keep state root hash only and validate transactions via ADProofs\n    stateType = \"utxo\"\n\n    # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)\n    verifyTransactions = true\n\n    # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.\n    # Keep all blocks from genesis if negative\n    blocksToKeep = -1\n\n    # Download PoPoW proof on node bootstrap\n    PoPoWBootstrap = false\n\n    # Minimal suffix size for PoPoW proof (may be pre-defined constant or settings parameter)\n    minimalSuffix = 10\n\n    # Is the node is doing mining\n    mining = false\n\n    # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new\n    # blockchain\n    offlineGeneration = false\n\n    # Delay for miner after succesful block creation\n    miningDelay = 5s\n\n    # Number of state snapshot diffs to keep. Defines maximum rollback depth\n    keepVersions = 200\n  }\n\n  testing {\n    # Whether to turn on transaction generator\n    transactionGeneration = false\n\n    # Max number of transactions generated per a new block received\n    maxTransactionsPerBlock = 100\n  }\n\n  cache {\n    # Number of recently used modifiers that will be kept in memory\n    modifiersCacheSize = 1000\n\n    # Number of recently used indexes that will be kept in memory\n    indexesCacheSize = 10000\n  }\n\n  # Chain-specific settings. Change only if you are going to launch a new chain!\n  chain {\n    # Network address prefix, currently reserved values are 0x00 (money chain mainnet) and 0x20 (32 in decimal,\n    # money chain testnet)\n    addressPrefix = 16\n\n    # Monetary config for chain\n    monetary {\n      # number of blocks reward won't change (525600 (2 years) for mainnet, 10080 (14 days) for testnet)\n      fixedRatePeriod = 10080\n      # number of coins issued every block during fixedRatePeriod (75 Ergo)\n      fixedRate = 7500000000\n      # number of blocks between reward reduction (64800 (90 days) for mainnet, 2160 (3 days) for testnet)\n      epochLength = 2160\n      # number of coins reward decrease every epochs (3 Ergo)\n      oneEpochReduction = 300000000\n      # Base16 representation of state roothash after genesis\n      afterGenesisStateDigestHex = \"a8f724cef6f8a247a63fba1b713def858d97258f7cd5d7ed71489a474790db5501\"\n    }\n\n    # Desired time interval between blocks\n    blockInterval = 2m\n\n    # length of an epoch in difficulty recalculation. 1 means difficulty recalculation every block\n    epochLength = 256\n\n    # Number of last epochs that will  be used for difficulty recalculation\n    useLastEpochs = 8\n\n    # Proof-of-Work algorithm and its parameters. Possible options are \"fake\" and \"equihash\".\n    powScheme {\n      powType = \"equihash\"\n      n = 96 # used by Equihash\n      k = 5  # used by Equihash\n    }\n\n    # Defines an id of the genesis block. Other genesis blocks will be considered invalid.\n    # genesisId = \"ab19bb59871e86507defb9a7769841b1130aad4d8c1ea8b0e01e0dee9e97a27e\"\n  }\n\n  wallet {\n    # Seed the wallet private keys are derived from\n    seed = \"C3FAFMC27697FAF29E9887F977BB5994\"\n\n    # How many Schorr secret keys (w for the g^w public key) to generate\n    dlogSecretsNumber = 4\n\n    # Interval to re-scan uncertain boxes. When a block arrives, its transaction outputs are to be scanned, and if\n    # certain bytes are found in the output script (e.g. public key bytes), the box is to be put to a queue of a boxes\n    # which are potentially wallet's. But to be sure, script execution is needed, which could be costly to do in a bulk.\n    # So we check from a queue only one box per \"scanningInterval\".\n    scanningInterval = 1s\n  }\n}\nscorex {\n  network {\n    bindAddress = \"0.0.0.0:9006\"\n    maxInvObjects = 400\n    nodeName = \"ergo-testnet1\"\n    knownPeers = [\"178.128.162.150:9006\", \"78.46.93.239:9006\", \"209.97.136.204:9006\", \"209.97.138.187:9006\", \"209.97.134.210:9006\", \"88.198.13.202:9006\"]\n    syncInterval = 15s\n    syncStatusRefresh = 30s\n    syncIntervalStable = 20s\n    syncTimeout = 5s\n    syncStatusRefreshStable = 1m\n    deliveryTimeout = 8s\n    maxDeliveryChecks = 2\n    appVersion = 0.2.1\n    agentName = \"ergoref\"\n    maxModifiersCacheSize = 512\n    maxPacketSize = 2048576\n  }\n  restApi {\n    bindAddress = \"0.0.0.0:9052\"\n  }\n}\n```"
    },
    {
      "heading": "Ergo configuration section",
      "level": 3,
      "content": "Root configuration section `ergo` holds essential application parameters and other configuration subsections.\nThere is also another one root section `scorex` that holds the parameters inherited from the [Scorex project](https://github.com/ScorexFoundation/Scorex).\n\nUsing parameter `directory` it is possible to set a path to the base application directory.\nIt is also possible to use environment variables to override configuration parameters.\nFor example, by default the base directory is being constructed relatively to the user's `HOME` environment variable.\nPlease do not enclose references to environment variables into quotation marks, otherwise they will be handled as strings and won't be resolved."
    },
    {
      "heading": "Network settings",
      "level": 3,
      "content": "In `scorex.network` section P2P network related settings could be set.\n\nUsing `declaredAddress` parameter you can set the external IP address and port number of the node. It's necessary to work behind NAT in most cloud hosting, where the machine does not interface directly with the external address. If you do not specify it, then your node connects to the P2P network, but it won't listen to incoming connections so other nodes will not be able to connect. Other nodes are connected to your node using these data. The format of this parameter is \"[ip-address]:[port]\".\n\nUsing parameter `bindAddress` you can set the IP address of local network interface on which Ergo Node will accept incoming connections.\nBy default, node binds to \"0.0.0.0\" that means that it will listen on all available network adapters.\n\n\n**Note about Internet Address settings**\n\nInternet Address settings have `<ip-adderss>:<port>` format.\nNote the `<port>` part at the very end of the address after the colon.\n\nFor the `bindAddress` setting port part is used to set the network port number to which other Ergo nodes will connect.\nPlease ensure that the port is reachable from outside, otherwise your node will have only outgoing connections to P2P network.\nIf the given port is taken by other application, your node won't start.\n\nParameter `nodeName` could be used to set the name of your node visible to other participants of the P2P network. The name transmitted during initial handshake. In the default configuration, this parameter is commented out, which leads to random name generation.\n\nThe `knownPeers` parameter stores the list of bootstrap nodes to which your node will establish outgoing connections while initializing.\n\n**Note about time settings**\n\nAll time span parameters are set in milliseconds. You can also use duration units to shorten their values. Supported units are:\n* s, second, seconds\n* m, minute, minutes\n* h, hour, hours\n* d, day, days\n\nFor usage examples see the default configuration file above.\n\nUse `maxConnections` parameter to set the maximum number of simultaneous connections handled by the node.\n\nParameter `connectionTimeout` could be used to change the network communication timeout.\n\nUsing `handshakeTimeout` parameter it is possible to set time period to wait for reply during handshake. In case of no reply the peer will be blacklisted.\n\nUsing parameters that starts with `upnp` you can configure the UPnP settings. Actually, those settings are useful only if you ran your Ergo node on the home network where the node could ask your router to establish a tunnel. By default, this functionality is disabled. Use `upnpEnabled` parameter to enable this functionality.\n\n**Wallet settings**\n\nIn `wallet` section you can configure the wallet built in Ergo node.\n\nUse `dlogSecretsNumber` parameter to specify how many Schorr secret keys (w for the g^w public key) to generate.\n\nUse `scanningInterval` parameter to set an interval of re-scaning uncertain boxes.\n\nUsing `seed` parameter you could recreate an existing walled on a new node. If you don't have any existing wallet comment out this parameter and start the node. During the first run, the application will create a new wallet with a random seed for you. In this case, the seed will be displayed in the application log.\n\n**Attention!**\n\nThe wallet is a critical part of your node. You should better store wallet's file in a safe and protected location. Don't forget to backup your wallet's file.\n\nIt's recommended to remove the seed from the configuration file immediately after the start of the node. If an attacker gains access to this seed string, he has access to all your funds on all your addresses!\n\n**Blockchain settings**\n\nAt `ergo.chain` you can select or custom the blockchain parameters.\n\nUse `blockInterval` parameter to set desired time interval between blocks.\n\nParameter `epochLength` used to set the length of an epoch in difficulty recalculation. 1 means difficulty recalculation every block\n\n`useLastEpochs` parameter stores a number of last epochs that will be used for difficulty recalculation.\n\nYou can change the PoW algo or related parameters using `powScheme` section.\n\n**Node settings**\n\nIn section `ergo.node` it is possible to configure parameters of the node regime.\n\nUse `enable` parameter to enable or disable block generation on the node. By default, it's disabled.\n\nNode with disabled `offlineGeneration` parameter will start mining as soon as it connects to the first peer in the P2P network. Setting this parameter to `true` will enable off-line generation.\n\nUsing `miningDelay` parameter you can tune your node's mining delay after finding a new block.\n\n\n**REST API settings**\n\nIn section `scorex.rest-api` you can set the node's REST API parameters.\n\nParameter `bindAddress` could be used to select network interface on which REST API will accept incoming connections.\nThe `:<port>` part could be used to change the port number, which REST API will listen for connections.\n\n\n> **Attention!** For the better security, do not change `bindAddress` from \"127.0.0.1\" if you do not know what you're doing!\nFor the external access you should use [Nginx's proxy_pass module](http://nginx.org/ru/docs/http/ngx_http_proxy_module.html) or [SSH port-forwarding](http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html) instead.\n\n\nUse `api-key-hash` parameter to set the hash of your API key. The API key is used to protect calls of critical API methods. Remember, that in this parameter you should provide the hash of API key, but during REST calls you should provide API key itself. You can use blake2b to produce the hash of your API key.\n\n\n\n> **Attention!** API key is transmitted in the HTTP header as unprotected plain text! An attacker could intercept it in network transit and use it to transfer your money to any address! So you have to protect the transmission using HTTPS or use SSH port forwarding.\n\n\nParameter `corsAllowedOrigin` could be used to enable or disable CORS support in REST API.\nCORS allows to safely resolve queries to other domains outside the one running the node.\nIt's necessary for Swagger and Lite client. You can read about it [here](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)."
    },
    {
      "heading": "Wallets",
      "level": 1,
      "content": ""
    },
    {
      "heading": "Windows",
      "level": 2,
      "content": "`HOME` environment variable is not often set in Windows. Please replace `${HOME}` with `${HOMEPATH}` or `${APPDATA}` in your configuration file.\nYou should also remember that environment variables names are case sensitive in Windows."
    },
    {
      "heading": "Pi",
      "level": 2,
      "content": "- [How to setup an Ergo node on a Raspberry Pi](https://youtu.be/yDqhlgz0244)\n\n-->"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/archive/node-config.md",
  "processed_at": "2025-05-11T19:16:21.875980",
  "ai_processed": true
}