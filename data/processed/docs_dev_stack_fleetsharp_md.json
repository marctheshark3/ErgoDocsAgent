{
  "id": "docs_dev_stack_fleetsharp_md",
  "title": "FleetSharp",
  "summary": "FleetSharp is a C# library for building transactions on the Ergo blockchain, inspired by the TypeScript fleet-sdk. The document provides several examples of using FleetSharp, including sending simple ERG-only transactions, sending transactions with tokens, minting tokens, and interacting with a contract by ensuring input selection and setting registers. The examples demonstrate the key functionality of the library, such as creating transactions, signing transactions, and submitting transactions to the Ergo network.",
  "qa_pairs": [
    {
      "question": "What is FleetSharp?",
      "answer": "FleetSharp is a C# library for building transactions on the Ergo blockchain, inspired by the TypeScript fleet-sdk."
    },
    {
      "question": "How do you send a simple ERG-only transaction from the node's wallet using FleetSharp?",
      "answer": "To send a simple ERG-only transaction, you can use the TransactionBuilder class to get unspent wallet boxes, set the transaction details, and submit the signed transaction."
    },
    {
      "question": "How do you send a transaction with tokens from the node's wallet using FleetSharp?",
      "answer": "To send a transaction with tokens, you can use the TransactionBuilder class to get unspent wallet boxes, add the token details to the output, and submit the signed transaction."
    },
    {
      "question": "What are the key steps involved in sending a transaction using FleetSharp?",
      "answer": "The key steps are: 1) Get unspent wallet boxes, 2) Set the transaction details, 3) Sign the transaction, and 4) Submit the signed transaction."
    },
    {
      "question": "What are the main features and capabilities of the FleetSharp library?",
      "answer": "FleetSharp provides a C# library for building transactions on the Ergo blockchain, with features like sending ERG-only transactions, sending transactions with tokens, and signing and submitting transactions."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": ""
    },
    {
      "heading": "FleetSharp",
      "level": 1,
      "content": "[FleetSharp](https://github.com/pulsarz/FleetSharp) is a C# library for building transactions on the Ergo blockchain, inspired by the excellent TypeScript [fleet-sdk](fleet.md)."
    },
    {
      "heading": "Usage",
      "level": 2,
      "content": ""
    },
    {
      "heading": "Example that sends a simple ERG only transaction from the node's wallet",
      "level": 4,
      "content": "```cs\nvar unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder> { new OutputBuilder(1000000000L, ErgoAddress.fromBase58(\"9iJyQKGYN4agM8UyJKjj8UoxWRa89dfDr2ptXYKEd7fJxLsYcuF\")) })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);\n```"
    },
    {
      "heading": "Example that sends a transaction with some tokens from the node's wallet",
      "level": 4,
      "content": "```cs\nvar unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder>\n    { \n        new OutputBuilder(1000000000L, ErgoAddress.fromBase58(\"9iJyQKGYN4agM8UyJKjj8UoxWRa89dfDr2ptXYKEd7fJxLsYcuF\"))\n            .AddToken(new TokenAmount<long>\n            {\n                tokenId = \"03faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04\",\n                amount = 10000L\n            })\n     })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);\n```"
    },
    {
      "heading": "Example minting tokens",
      "level": 4,
      "content": "```cs\nvar unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder>\n    { \n        new OutputBuilder(OutputBuilder.SAFE_MIN_BOX_VALUE, ErgoAddress.fromBase58(\"9iJyQKGYN4agM8UyJKjj8UoxWRa89dfDr2ptXYKEd7fJxLsYcuF\"))\n            .mintToken(new NewToken<long>\n            {\n                amount = 100,\n                name = \"FleetSharp test mint token #1\",\n                decimals = 0,\n                description = \"This is a test token minted with FleetSharp\"\n            })\n    })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);\n```"
    },
    {
      "heading": "Interacting with a contract by ensuring input selection and setting registers (this is purely a fictional example to demonstrate what is possible)",
      "level": 4,
      "content": "```cs\nusing static FleetSharp.Sigma.ConstantSerializer;\nusing static FleetSharp.Sigma.ISigmaCollection;\nusing static FleetSharp.Sigma.IPrimitiveSigmaType;\n\nvar unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar spendBox = await node.GetBox(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder>\n    { \n        new OutputBuilder(OutputBuilder.SAFE_MIN_BOX_VALUE, ErgoAddress.fromErgoTree(spendBox.ergoTree, Network.Mainnet))\n            .SetAdditionalRegisters(new NonMandatoryRegisters\n            {\n                R4 = SConstant(SInt(47851)),/*integer*/\n                R5 = SConstant(SColl(SigmaTypeCode.Byte, FleetSharp.Tools.HexToBytes(\"e218ee38a9fa71a770968f2746d624f8\")))/*hex string as Coll[Byte]*/\n            })\n    })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);\n```"
    },
    {
      "heading": "Reading registers from a box",
      "level": 4,
      "content": "```cs\nusing static FleetSharp.Sigma.ConstantSerializer;\nusing static FleetSharp.Sigma.ISigmaCollection;\nusing static FleetSharp.Sigma.IPrimitiveSigmaType;\n\nvar box = await node.GetBox(\"07b1276dd8207767c320a76a0a7ba9c76feb1f414c58cb9335810341a02236dc\");\n\nbyte[] borrower = SParse(box.additionalRegisters.R4);\nlong amount = SParse(box.additionalRegisters.R5);\nlong repayment = SParse(box.additionalRegisters.R6);\nint maturityLength = SParse(box.additionalRegisters.R7);\n```"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/stack/fleetsharp.md",
  "processed_at": "2025-05-11T19:34:51.717528",
  "ai_processed": true
}