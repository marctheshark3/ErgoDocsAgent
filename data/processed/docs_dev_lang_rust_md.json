{
  "id": "docs_dev_lang_rust_md",
  "title": "Rust",
  "summary": "Rust is used for off-chain components in the Ergo blockchain ecosystem, such as interacting with the blockchain, creating transactions, and building applications. Developers can use Rust along with frameworks like sigma-rust, which provides a Rust port of the sigmastate-interpreter, allowing them to interact with the Ergo blockchain from their Rust applications. The UTXO transactional model used by Ergo is crucial for developing off-chain components, as it differs from the account-based model used by other blockchains. The document also mentions several Rust-based frameworks and utilities that simplify working with the Ergo blockchain, including HDF, RustKit, Ergo Utilities, ergo-monitoring, and a Rust AVL tree implementation.",
  "qa_pairs": [
    {
      "question": "What language is used for on-chain contracts on the Ergo blockchain?",
      "answer": "On-chain contracts are developed in ErgoScript, a simple language designed for writing smart contracts on the Ergo blockchain."
    },
    {
      "question": "What are the key characteristics of ErgoScript?",
      "answer": "ErgoScript is a Turing-complete language that prioritizes security and is well-suited for the UTXO transactional model used by Ergo."
    },
    {
      "question": "What language is used for off-chain components on the Ergo blockchain?",
      "answer": "For off-chain components, such as interacting with the blockchain, creating transactions, and building applications, developers can use Rust along with frameworks like sigma-rust."
    },
    {
      "question": "What is the purpose of the sigma-rust framework?",
      "answer": "sigma-rust provides a Rust port of the sigmastate-interpreter, allowing developers to interact with the Ergo blockchain from their Rust applications."
    },
    {
      "question": "What is an example of using Rust for off-chain components on the Ergo blockchain?",
      "answer": "The Oracle Pools project, a federated protocol for delivering external data to the Ergo blockchain, is implemented in Rust using the oracle-core repository."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Rust\n---"
    },
    {
      "heading": "Rust",
      "level": 1,
      "content": "On-chain contracts are developed in ErgoScript, a simple language designed for writing [smart contracts](ergoscript.md) on the Ergo blockchain. ErgoScript is a Turing-complete language that prioritizes [security](security.md) and is well-suited for the [UTXO transactional model](eutxo.md) used by Ergo.\n\nFor [off-chain components](off-chain-overview.md), such as interacting with the blockchain, creating [transactions](transactions.md), and building [applications](use-cases-overview.md), developers can use Rust along with frameworks like [sigma-rust](sigma-rust.md). Rust provides a powerful and efficient language for building off-chain components, while sigma-rust provides a Rust port of the [sigmastate-interpreter](sigmastate-interpreter.md), allowing developers to interact with the Ergo blockchain from their Rust applications. Various [language bindings for sigma-rust](sigma-rust.md#bindings) are available for other languages.\n\nOne example of using Rust for off-chain components is the [Oracle Pools project](oracles.md), a federated protocol for delivering external data to the Ergo blockchain. The on-chain contracts and descriptions are available in the [Ergo Improvement Proposals (EIPs)](eip.md), while the off-chain part is implemented in Rust using the [oracle-core](https://github.com/ergoplatform/oracle-core) repository.\n\nUnderstanding the [UTXO transactional model](eutxo.md) is crucial when developing off-chain components for Ergo, as it differs from the [account-based model](accountveutxo.md) used by other blockchains. Developers with experience in parallel computing may find the UTXO model more natural to work with."
    },
    {
      "heading": "Frameworks",
      "level": 2,
      "content": "::cards::\n\n[\n  {\n    \"title\": \"sigma-rust\",\n    \"content\": \"Rust port of the sigmastate-interpreter\",\n    \"url\": \"../stack/sigma-rust.md\"\n  },\n  {\n    \"title\": \"HDF\",\n    \"content\": \"Headless dApp Framework\",\n    \"url\": \"../stack/headless.md\"\n  },\n  {\n    \"title\": \"RustKit\",\n    \"content\": \"(WIP), A SDK for building applications on the Ergo blockchain\",\n    \"url\": \"../stack/rustkit.md\"\n  },\n\n]\n\n::/cards::"
    },
    {
      "heading": "Utilities",
      "level": 2,
      "content": "::cards::\n\n[\n  {\n    \"title\": \"\ud83d\udd17 Ergo Utilities\",\n    \"content\": \"simplify writing off-chain code in Rust.\",\n    \"url\": \"https://github.com/robkorn/ergo-utilities-rust/\"\n  },\n  {\n    \"title\": \"\ud83d\udd17 ergo-monitoring\",\n    \"content\": \"Debug service printing out useful for developers and managers information about ergo blockchain state.\",\n    \"url\": \"https://github.com/SabaunT/ergo-monitoring\"\n  },\n  {\n    \"title\": \"\ud83d\udd17 Rust AVL Tree\",\n    \"content\": \"Rust port of [AVL tree](avl.md) from scrypto package.\",\n    \"url\": \"https://github.com/knizhnik/scorex_crypto_avltree/blob/main/crypto_avltree.md\"\n  }\n]\n\n::/cards::"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/lang/rust.md",
  "processed_at": "2025-05-11T19:21:55.458949",
  "ai_processed": true
}