{
  "id": "docs_dev_data-model_box_registers_md",
  "title": "Ergo Box Registers",
  "summary": "The document provides an overview of Ergo Box Registers, which are a key component of Ergo's blockchain model. Each box contains essential information such as the value in NanoErgs, the protection script, any additional assets or tokens, and details about the box's creation. The registers are divided into R0-R3, which hold the essential information, and optional R4-R9 registers that can store custom data for use in smart contracts. The document explains the purpose and contents of each register, as well as how scripts can access the register values using typed access. It also notes that Ergo's transaction IDs are independent of signatures, allowing boxes with 0 confirmations to be spent.",
  "qa_pairs": [
    {
      "question": "What are the four essential pieces of information contained in an Ergo box?",
      "answer": "1. The value in NanoErgs, 2. The protection script or smart contract, 3. Any additional assets or tokens, 4. Details about the box's creation."
    },
    {
      "question": "How can the value of an Ergo box be accessed?",
      "answer": "Use `Box.value` to access the value of the box in nanoERGs."
    },
    {
      "question": "Where is the compiled ErgoScript contract associated with an Ergo box stored?",
      "answer": "The compiled ErgoScript contract is stored in Register R1, which can be accessed using `Box.propositionBytes`."
    },
    {
      "question": "How are tokens stored in an Ergo box?",
      "answer": "Tokens are stored in Register R2 as a collection of token IDs and their quantities, which can be accessed using `Box.tokens`."
    },
    {
      "question": "What is the purpose of the `maxCreation` height parameter set by the box creator?",
      "answer": "The `maxCreation` height parameter aids in the creation of payment channels."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Data Model\n  - Registers\n  - Box\n---"
    },
    {
      "heading": "Ergo Box Registers",
      "level": 1,
      "content": "*(Back to: [Box Overview](box.md))*\n\nIn Ergo's blockchain model, a [**box**](box.md) is a versatile entity that not only holds the value of cryptocurrency but also contains additional data in the form of **registers**. This makes it a more functional and flexible version of the [Unspent Transaction Output (UTXO)](eutxo.md) found in Bitcoin and many other cryptocurrencies.\n\n**Each box contains at least four essential pieces of information:**\n\n1. The value in NanoErgs (1 Erg = 1000000000 NanoErgs).\n2. The protection [script](ergoscript.md) (similar to Bitcoin's `scriptPubKey`) or \"[smart contract](ergoscript.md)\", which secures the box's expenditure.\n3. Any additional assets or [tokens](eip4.md) contained within the box.\n4. Details about the box's creation, including the `txId` (the ID of the [transaction](transactions.md) that created the box) and an [output index](transactions.md#anatomy). This information also includes a `maxCreation` height parameter set by the box creator (note: this is not the actual creation height; it aids in the creation of \"payment channels\").\n\nThese pieces of information are stored in the first four registers (R0-R3) of the box. The remaining registers, from R4 to R9, can be used to store custom data for use in smart contracts. Scripts can access their own registers and the registers of [input](transactions.md#anatomy) and [output](transactions.md#anatomy) boxes of the spending transaction.\n\n| Register | Value                                      | Access via ErgoScript (`Box.` prefix) |\n|----------|--------------------------------------------|---------------------------------------|\n| R0       | Value (in nanoErgs)                        | `value`                               |\n| R1       | Protection script ([ErgoTree](ergotree.md)) | `propositionBytes`                    |\n| R2       | Assets ([Tokens](eip4.md))             | `tokens`                              |\n| R3       | Creation details (`(txId, outputIndex)`) | `creationInfo`                        |\n| R4-R9    | Available for custom use                   | `R4[T]`, `R5[T]`, ... `R9[T]`         |\n\n\n/// admonition | Keep in mind!\n    type: warning\n\nRegisters must be densely packed; you cannot place an empty register between non-empty ones (e.g., you cannot define R5 if R4 is empty).\n///"
    },
    {
      "heading": "Register R0",
      "level": 3,
      "content": "Register R0 holds the monetary value of the box in nanoERGs. Use `Box.value` to access this register, where `Box` could signify [`SELF`](blockchain-context.md#self), or any box in the [`INPUTS`](blockchain-context.md#inputs) or [`OUTPUTS`](blockchain-context.md#outputs) collections."
    },
    {
      "heading": "Register R1",
      "level": 3,
      "content": "Register R1 stores the proposition bytes (the compiled [ErgoTree](ergotree.md)) of the guarding [ErgoScript](ergoscript.md) contract associated with the box. Use `Box.propositionBytes` to access this register."
    },
    {
      "heading": "Register R2",
      "level": 3,
      "content": "Register R2 contains a collection of [tokens](eip4.md) stored in the box. Each token is identified by two elements: a unique token id (`Coll[Byte]`) and the quantity (`Long`) of the specific token. Use `Box.tokens` to access this collection (`Coll[(Coll[Byte], Long)]`)."
    },
    {
      "heading": "Register R3",
      "level": 3,
      "content": "Register R3 holds information about the box\u2019s creation: `(txId: Coll[Byte], index: Short)`. Use `Box.creationInfo` to access this register. The creation height (the block height when the box was created) is accessible via `Box.creationInfo._2` and is part of Ergo's unique [storage rent](storage-rent.md) feature, where boxes can be spent after four years, allowing [miners](mining-overview.md) to charge a small fee and recycle ERGs back into the blockchain."
    },
    {
      "heading": "Optional Registers R4-R9",
      "level": 3,
      "content": "These registers can contain any data defined when the box first originates from a transaction. The data could be of any common type found in [ErgoScript](ergoscript.md), along with more complex types built from Pairs and Collections. These registers may also contain complex types such as `Box`, [`SigmaProp`](sigma.md), `GroupElement`, and [`AVLTree`](avl.md).\n\nThe optional registers can hold any of the following data types:\n\n- `Int`, `Long` with standard Scala semantics.\n- `BigInt` - a 256-bit integer (all computations are modulo 2^256).\n- `GroupElement` - a point on the Secp256k1 curve represented in compressed format.\n- `Coll[Byte]` - a byte collection, conceptually similar to Scala's `Array[Byte]`.\n- Collection of the above (i.e., `Coll[Int]`, `Coll[GroupElement]`, `Coll[Coll[Byte]]`, and so forth).\n\nA `boxId` is calculated based on the contents of all the registers, uniquely defining a box. This can be compared to Bitcoin's (`txId`, `vOut`) pairs.\n\n/// admonition | Note\nErgo `txId` is dependent solely on the message and not on [signatures](signing.md) (similar to Bitcoin [SegWit](https://en.bitcoin.it/wiki/Segregated_Witness) transactions). Hence, a `txId` is accessible even before signing. Like Bitcoin, Ergo supports [chained transactions](chained.md), meaning boxes with 0 confirmations can be spent.\n///"
    },
    {
      "heading": "Typed Registers",
      "level": 2,
      "content": "Both [ErgoScript](ergoscript.md) and [ErgoTree](ergotree.md) are **typed**, meaning that when a script accesses a register, it expects a specific type which is denoted in brackets.\n\n\nFor instance,\n\n```scala\n// Assign the value of the R4 register of the current box (SELF) to the variable x\n// The script expects R4 to contain an Int.\nval x = SELF.R4[Int]\n```\n\nIn the above example, the register is expected to have an `Int` type. Therefore, the expression `SELF.R4[Int]` returns an `Option[Int]` type value.\n\nWhen you try to retrieve the value of the register `SELF.R4[Int]`, there are three potential scenarios:\n\n1. The register R4 does not exist (was not defined when the box was created), hence `SELF.R4[Int].isDefined` will return `false`.\n2. The register R4 exists and has an `Int` type value, thus `SELF.R4[Int].get` will fetch that value, and `SELF.R4[Int].isDefined` will be `true`.\n3. The register R4 exists but carries a value of a different type (e.g., `Coll[Byte]`), in which case accessing it as `SELF.R4[Int]` will fail the script execution during [validation](validation.md).\n\nIn some use cases, a register may contain values of various types depending on context. An additional register can be employed as a tag to facilitate the access of such a register safely.\n\n```scala\n// Example using R5 as a type tag for data in R4\nval tagOpt = SELF.R5[Int] // Retrieve the value of the register R5 of type Int and assign it to the variable `tagOpt`\nval res = if (tagOpt.isDefined) { // Check if `tagOpt` is not empty\n  val tag = tagOpt.get // Obtain the value of `tagOpt` and assign it to the variable `tag`\n  if (tag == 1) { // Check if `tag` equals 1, indicating R4 holds an Int\n    val x = SELF.R4[Int].get // Retrieve the value of the register R4 of type Int and assign it to the variable `x`\n    // Compute `res` using the value `x` of type Int\n    sigmaProp(x > 10) // Example condition\n  } else if (tag == 2) { // Check if `tag` equals 2, indicating R4 holds a GroupElement\n    val x = SELF.R4[GroupElement].get // Retrieve the value of the register R4 of type GroupElement and assign it to the variable `x`\n    // Compute `res` using the value `x` of type GroupElement\n    sigmaProp(x == someGroupElement) // Example condition\n  } else if (tag == 3) { // Check if `tag` equals 3, indicating R4 holds Coll[Byte]\n    val x = SELF.R4[Coll[Byte]].get // Retrieve the value of the register R4 of type Coll[Byte] and assign it to the variable `x`\n    // Compute `res` using the value `x` of type Coll[Byte]\n    sigmaProp(blake2b256(x) == someHash) // Example condition\n  } else {\n    // Handle unexpected tag value - fail the script\n    sigmaProp(false)\n  }\n} else {\n  // Handle case where tag register R5 is not present - fail the script\n  sigmaProp(false)\n}\n// Context Variables used: SELF (See blockchain-context.md)\n// Functions used: sigmaProp, PK (See sigma.md)\n```"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/data-model/box/registers.md",
  "processed_at": "2025-05-11T19:19:30.012999",
  "ai_processed": true
}