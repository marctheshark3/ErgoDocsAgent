{
  "id": "docs_eco_sigmajoin_md",
  "title": "Sigmajoin",
  "summary": "Sigmajoin is a privacy protocol designed for UTXO-based blockchains, building on the principles of Zerojoin. Key advantages over Zerojoin include non-interactive mixing, outsourceability to third-party mixers, support for more than two types of mix boxes, and outsourced fee handling. Special features include outsourceability, stealth withdraw, and outsourced fee. The protocol uses special \"mix-boxes\" with two registers a and b as elements of a mathematical group G. The document provides an introduction to Sigmajoin and its key features.",
  "qa_pairs": [
    {
      "question": "What is this document about?",
      "answer": "---\ntags:\n  - Sigmajoin\n  - Mixer\n  - Privacy\n  - Zerojoin\n  - dApp\n  - dApp-Research\n---\n# Sigmajoin \n\n## What is Sigmajoin?\n\nSigmajoin is a privacy protocol designed for use with UTXO-based blockcha..."
    },
    {
      "question": "What is the title of this document?",
      "answer": "Sigmajoin"
    },
    {
      "question": "What is the 'Introduction' section about?",
      "answer": "---\ntags:\n  - Sigmajoin\n  - Mixer\n  - Privacy\n  - Zerojoin\n  - dApp\n  - dApp-Research\n---"
    },
    {
      "question": "What is the 'What is Sigmajoin?' section about?",
      "answer": "Sigmajoin is a privacy protocol designed for use with UTXO-based blockchains, aiming to enhance user..."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Sigmajoin\n  - Mixer\n  - Privacy\n  - Zerojoin\n  - dApp\n  - dApp-Research\n---"
    },
    {
      "heading": "Sigmajoin",
      "level": 1,
      "content": ""
    },
    {
      "heading": "What is Sigmajoin?",
      "level": 2,
      "content": "Sigmajoin is a privacy protocol designed for use with UTXO-based blockchains, aiming to enhance user anonymity. It builds on the principles of a previous protocol called [Zerojoin](zerojoin.md) but introduces features to make it more practical and efficient."
    },
    {
      "heading": "Key Advantages",
      "level": 3,
      "content": "|                        | ZeroJoin (ErgoMixer)                                                | Sigmajoin                                                    |\n|------------------------|--------------------------------------------------------------------|--------------------------------------------------------------|\n| **Proofs Used**        | Proofs of knowledge of Diffie-Hellman tuples                        | Proofs of knowledge of Diffie-Hellman tuples                 |\n| **Interaction Level**  | Partially Non-interactive: Requires online presence for remixing    | Non-interactive                                              |\n| **Outsourceability**   | No, mixing cannot be outsourced                                     | Yes, mixes can be outsourced to third-parties                |\n| **Types of Boxes**    | 2 (Half-Mix and Full-Mix): Limited to two boxes, constraining scalability and flexibility | More than 2: Offers better scalability and flexibility. Half-mix boxes eliminated as bloat       |\n| **Stealth Withdraw**   | Supported                                                           | Supported                                                    |\n| **Fee Handling**       | Embedded Fee: Includes fees within mix boxes, requiring meticulous calculation  | Outsourced Fee: Fees paid by third-party \"mixer,\" simplifying the process and adding flexibility  |"
    },
    {
      "heading": "Special Features",
      "level": 2,
      "content": ""
    },
    {
      "heading": "1. Outsourceability",
      "level": 3,
      "content": "The mixing process can be outsourced to a third-party service called a mixer. These mixers can perform the mixing operations in a trustless manner, meaning they cannot steal funds."
    },
    {
      "heading": "2. Stealth Withdraw",
      "level": 3,
      "content": "Sigmajoin allows for transactions that appear to be mixes but are actually withdrawals. This makes it even more difficult for an observer to trace transactions, enhancing privacy."
    },
    {
      "heading": "3. Outsourced Fee",
      "level": 3,
      "content": "In many privacy protocols, how to pay the mining fee is a challenge. Sigmajoin allows the fee to be paid by the third-party mixers, further simplifying the process for users."
    },
    {
      "heading": "How Does Sigmajoin Work?",
      "level": 2,
      "content": ""
    },
    {
      "heading": "Basics",
      "level": 3,
      "content": "- **Mix-box**: A special kind of coin (or UTXO) used in Sigmajoin. Each mix-box has two registers `a` and `b` which are elements of a mathematical group `G`.\n- **Alice**: The generic term for a participant in the protocol."
    },
    {
      "heading": "Core Operations",
      "level": 3,
      "content": "1. **Deposit**: Users can deposit their coins into a special 'pool' as mix-boxes. These boxes can be in fixed denominations.\n2. **Mix**: A third-party service or another user can take any two mix-boxes from the pool and mix them. After mixing, two new mix-boxes are added back to the pool. This process conceals the original ownership of the boxes.\n3. **Withdraw**: Users can withdraw their coins from the pool at any time.\n\n---"
    },
    {
      "heading": "Steps for Mixing Boxes",
      "level": 3,
      "content": "1. **Select Two Boxes**: Choose any two mix-boxes from the pool.\n2. **Re-randomise Public Key**: Perform a mathematical operation on the registers `a` and `b` of each selected mix-box.\n3. **Validation**: Prove that the mathematical operations were done correctly. The new mix-boxes should look identical to an observer.\n\n---\n\n\n\n\n*Note: This is a simplified document. For technical details and mathematical proofs, consult the whitepaper.*\n\n- [Documentation](https://github.com/ergoplatform/ergo-jde/blob/main/kiosk/src/test/scala/kiosk/mixer/doc/main.pdf) \n- Original forum posts for [Outsourceable mix](https://www.ergoforum.org/t/yet-another-mixing-protocol/3359/2?u=scalahub)\n- [Stealth transfer](https://www.ergoforum.org/t/yet-another-mixing-protocol/3359/3?u=scalahub)"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/eco/sigmajoin.md",
  "processed_at": "2025-05-11T19:47:52.261999",
  "ai_processed": true
}