{
  "id": "docs_dev_stack_appkit_appkit-node_md",
  "title": "Interacting with a local node.",
  "summary": "The document describes how to create a simple Java console application called ErgoTool that uses the Appkit library to interact with an Ergo node via the REST API. It explains how to set up a full Ergo node locally, load configuration parameters from a JSON file, and create and send a new transaction to the node. The application reads the amount of NanoErg to put into a new box from command line arguments.",
  "qa_pairs": [
    {
      "question": "What library allows us to communicate with Ergo nodes via the REST API?",
      "answer": "The Appkit library allows us to communicate with Ergo nodes via the REST API."
    },
    {
      "question": "What is the purpose of the ErgoTool application?",
      "answer": "ErgoTool is a simple Java console application that allows creating and sending a new transaction to any existing Ergo node on the network."
    },
    {
      "question": "How can a new Ergo node be started locally?",
      "answer": "A new Ergo node can be started locally and made available at `http://localhost:9052/`."
    },
    {
      "question": "What configuration parameters are needed for ErgoTool?",
      "answer": "ErgoTool needs configuration parameters such as the node API URL, API key, wallet mnemonic, and network type, which can be loaded from an `ergotool.json` file."
    },
    {
      "question": "What is the purpose of the API key in the configuration?",
      "answer": "The API key is a secret key required for API authentication, which can be obtained as described in the `swagger.md` document."
    }
  ],
  "sections": [
    {
      "heading": "Interacting with a local node.",
      "level": 1,
      "content": "Among other things, the Appkit library allows us to communicate with Ergo nodes via the [REST API](https://github.com/ergoplatform/ergo/blob/master/src/main/resources/api/openapi.yaml). \n\nLet's see how we can write ErgoTool - a simple Java console application (similar to [ergo-tool](https://github.com/ergoplatform/ergo-tool) utility) which uses Appkit library. \n\nErgoTool allows to create and send a new transaction to any existing Ergo node on the network which. A new node can also be started locally and thus available at `http://localhost:9052/`. \n\nSuppose we [set up a full node](https://github.com/ergoplatform/ergo/wiki/Set-up-a-full-node) and started it using the following command.\n\n```shell\n$ java -jar -Xmx4G target/scala-2.12/ergo-4.0.8.jar --testnet -c ergo-testnet.conf\n```\n\nWe will need some configuration parameters which can be loaded from `ergotool.json` file\n\n```json\n{\n  \"node\": {\n    \"nodeApi\": {\n      \"apiUrl\": \"http://139.59.29.87:9053\",\n      \"apiKey\": \"82344a18c24adc42b78f52c58facfdf19c8cc38858a5f22e68070959499076e1\"\n    },\n    \"wallet\": {\n      \"mnemonic\": \"slow silly start wash bundle suffer bulb ancient height spin express remind today effort helmet\",\n      \"password\": \"\",\n      \"mnemonicPassword\": \"\"\n    },\n    \"networkType\": \"MAINNET\"\n  },\n  \"parameters\": {\n    \"newBoxSpendingDelay\": \"30\"\n  }\n}\n```\n\nHere `apiKey` is the secret key required for API authentication which can be obtained as described [here](swagger.md). And mnemonic is the secret phrase obtained during [setup of a new wallet](wallet.md) or if you don't want to set up your node using ergo-tool's [mnemonic](https://github.com/ergoplatform/ergo-tool#supported-commands) command.\n\nOur example app also reads the amount of NanoErg to put into a new box from command line arguments\n\n```java\npublic static void main(String[] args) {\n    long amountToPay = Long.parseLong(args[0]);\n    ErgoToolConfig conf = ErgoToolConfig.load(\"ergotool.json\");\n    int newBoxSpendingDelay = Integer.parseInt(conf.getParameters().get(\"newBoxSpendingDelay\"));\n    // the rest of the code shown below \n    ...\n}\n```\n\nNext, we connect to the running testnet node from our Java application by creating a `ErgoClient` instance.\n\n```java\nErgoNodeConfig nodeConf = conf.getNode();\nErgoClient ergoClient = RestApiErgoClient.create(nodeConf, null);\n```\n\nUsing `ErgoClient` we can execute `lib-api/src/main/java/org/ergoplatform/appkit/ErgoClient.java` any block of code in the current blockchain context.\n\n```java\nString txJson = ergoClient.execute((BlockchainContext ctx) -> {\n    // here we will use ctx to create and sign a new transaction\n    // which then be sent to the node and also serialized into Json\n});\n```\n\nThe lambda passed to `execute` is called when the current blockchain context is loaded from the node. This is where we shall put our application logic.\n\nWe start with some auxiliary steps.\n\n```java\n// access wallet embedded in Ergo node\nErgoWallet wallet = ctx.getWallet();\n\n// calculate total amount of NanoErgs we need to create the new box \n// and pay transaction fees\nlong totalToSpend = amountToPay + Parameters.MinFee;\n\n// request wallet for unspent boxes that cover required amount of NanoErgs\nOptional<List<InputBox>> boxes = wallet.getUnspentBoxes(totalToSpend);\nif (!boxes.isPresent())\n    throw new ErgoClientException(\n        \"Not enough coins in the wallet to pay \" + totalToSpend, null);\n    \n// create a so called prover, a special object which will be used for signing the transaction\n// the prover should be configured with secrets, which are necessary to generate signatures (aka proofs)\nErgoProver prover = ctx.newProverBuilder()\n    .withMnemonic(\n            SecretString.create(nodeConf.getWallet().getMnemonic()),\n            SecretString.create(nodeConf.getWallet().getMnemonicPassword()))\n    .build();\n```\n\nNow that we have the input boxes to spend in the transaction, we need to create an output box with the requested `amountToPay` and the specific contract protecting that box.\n\n```java\n// the only way to create transaction is using builder obtained from the context\n// the builder keeps relationship with the context to access necessary blockchain data.\nUnsignedTransactionBuilder txB = ctx.newTxBuilder();\n\n// create new box using new builder obtained from the transaction builder\n// in this case we compile new ErgoContract from source ErgoScript code\nOutBox newBox = txB.outBoxBuilder()\n        .value(amountToPay)\n        .contract(ctx.compileContract(\n                ConstantsBuilder.create()\n                        .item(\"freezeDeadline\", ctx.getHeight() + newBoxDelay)\n                        .item(\"pkOwner\", prover.getP2PKAddress().pubkey())\n                        .build(),\n                \"{ sigmaProp(HEIGHT > freezeDeadline) && pkOwner }\"))\n        .build();\n```\nNote, in order to compile `ErgoContract` from source, the `compileContract` method requires us to provide values for named constants which are used in the script.\n\nIf no such constants are used, then `ConstantsBuilder.empty()` can be passed.\n\nIn this specific case, we pass the public key of the `prover` for `pkOwner` placeholder of the script meaning the box can be spent only by the owner of the public key from the `wallet` section of `ergotool.json`.\n\n\nNext, we create an unsigned transaction using all the data collected so far.\n\n```java\n// tell transaction builder which boxes we are going to spend, which outputs\n// to create, amount of transaction fees and address for change coins.\nUnsignedTransaction tx = txB.boxesToSpend(boxes.get())\n        .outputs(newBox)\n        .fee(Parameters.MinFee)\n        .sendChangeTo(prover.getP2PKAddress()) // i.e. back to the wallet's pk\n        .build();\n```\n\nAnd finally, we use `prover` to sign the transaction, obtain a new `SignedTransaction` instance and use context to send it to the Ergo node. \n\nThe resulting `txId` can be used to refer to this transaction later and is not used here.\n\n```java\nSignedTransaction signed = prover.sign(tx);\nString txId = ctx.sendTransaction(signed);\nreturn signed.toJson(/*prettyPrint=*/true, /*formatJson=*/true);\n```\n\nAs the last step, we serialize signed transactions into Json with pretty printing turned-on. \n\nPlease see the [full source code](https://github.com/aslesarenko/ergo-appkit-examples/blob/master/java-examples/src/main/java/org/ergoplatform/appkit/examples/FreezeCoin.java) of the example."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/stack/appkit/appkit-node.md",
  "processed_at": "2025-05-11T19:33:08.383290",
  "ai_processed": true
}