{
  "id": "docs_node_conf_conf-scorex_md",
  "title": "Scorex Configuration",
  "summary": "The document provides a detailed overview of the Scorex configuration, covering various sections such as network settings, execution context, data and log directory, REST API, network configuration, and NTP configuration. It explains the purpose and configuration options for each section, including settings for network addresses, peer discovery, timeouts, and other parameters that control the behavior of the Scorex platform.",
  "qa_pairs": [
    {
      "question": "What is this document about?",
      "answer": "# Scorex Configuration\n\n### Network Settings\n\nThe `scorex.network` section allows you to configure settings related to the P2P network.\n\nBy using the `declaredAddress` parameter, you can establish the..."
    },
    {
      "question": "What is the title of this document?",
      "answer": "Scorex Configuration"
    },
    {
      "question": "What is the 'Network Settings' section about?",
      "answer": "The `scorex.network` section allows you to configure settings related to the P2P network.\n\nBy using ..."
    },
    {
      "question": "What is the 'Execution Context' section about?",
      "answer": "The `executionContext` configuration section is used for tests. It specifies settings for the execut..."
    }
  ],
  "sections": [
    {
      "heading": "Scorex Configuration",
      "level": 1,
      "content": ""
    },
    {
      "heading": "Network Settings",
      "level": 3,
      "content": "The `scorex.network` section allows you to configure settings related to the P2P network.\n\nBy using the `declaredAddress` parameter, you can establish the external IP address and port number of the node. This is necessary for operating behind NAT in most cloud hosting scenarios where the machine doesn't directly interface with the external address. If left unspecified, your node will connect to the P2P network but won't accept incoming connections, meaning other nodes can't connect. Other nodes connect to your node using these settings. The format for this parameter is \"[ip-address]:[port]\".\n\nYou can use the `bindAddress` parameter to set the IP address of the local network interface where the Ergo Node will accept incoming connections. By default, the node binds to \"0.0.0.0\", indicating it will listen on all available network adapters.\n\n**About Internet Address Settings**\n\nInternet Address settings follow the \"<ip-address>:<port>\" format. Note that the \"<port>\" component after the colon is crucial.\n\nFor the `bindAddress` setting, the port component is used to establish the network port number to which other Ergo nodes will connect. Please ensure that this port is externally accessible; otherwise, your node will only establish outgoing connections to the P2P network. If the specified port is already occupied by another application, your node won't start.\n\nYou can use the `nodeName` parameter to assign a visible name to your node for other participants of the P2P network. This name is transmitted during the initial handshake. In the default configuration, this parameter is commented out, resulting in a randomly generated name.\n\nThe `knownPeers` parameter stores a list of bootstrap nodes that your node will connect to upon initialization.\n\n**About Time Settings**\n\nAll time span parameters are set in milliseconds. However, you can use duration units to shorten their values. The supported units include:\n* s, second, seconds\n* m, minute, minutes\n* h, hour, hours\n* d, day, days\n\nFor examples of usage, refer to the default configuration file above.\n\nUse the `maxConnections` parameter to define the maximum number of concurrent connections that the node can handle.\n\nThe `connectionTimeout` parameter allows you to adjust the network communication timeout.\n\nThe `handshakeTimeout` parameter can be used to set the time period to wait for a response during a handshake. If no response is received, the peer will be blacklisted.\n\nYou can configure the UPnP settings using parameters that begin with `upnp`. These settings are typically useful only if you're running your Ergo node on a home network where the node can request your router to establish a tunnel. By default, this functionality is disabled. Use the `upnpEnabled` parameter to enable it.\n\n\nTaken from [application.conf#L354](https://github.com/ergoplatform/ergo/blob/49b9f0fe7d0eba1a5ff81e524353acdd9a3cc6dd/src/main/resources/application.conf#L354)"
    },
    {
      "heading": "Execution Context",
      "level": 2,
      "content": "The `executionContext` configuration section is used for tests. It specifies settings for the execution context that Scorex uses.\n\n```conf\nexecutionContext {\n    type = Dispatcher\n    executor = \"thread-pool-executor\"\n    thread-pool-executor {\n      fixed-pool-size = 16\n    }\n    throughput = 1\n}\n```\n\nThe `type` is set to \"Dispatcher\", and the `executor` to \"thread-pool-executor\". The `fixed-pool-size` under `thread-pool-executor` is set to 16, indicating that a maximum of 16 threads will be used for execution. The `throughput` setting is set to 1."
    },
    {
      "heading": "Data and Log Directory",
      "level": 2,
      "content": "```conf\ndataDir = ${user.home}\"/scorex\"\nlogDir = ${scorex.dataDir}\"/log\"\n```\nThe `dataDir` setting determines the directory where the Scorex data will be stored, in this case, it is set to a \"scorex\" directory in the user's home directory. The `logDir` setting sets the location of the log files, which is a \"log\" directory within the Scorex data directory."
    },
    {
      "heading": "REST API",
      "level": 2,
      "content": "```conf\nrestApi {\n    bindAddress = \"0.0.0.0:9052\"\n    apiKeyHash = \"324dcf027dd4a30a932c441f365a25e86b173defa4b8e58948253471b81b72cf\"\n    corsAllowedOrigin = \"*\"\n    timeout = 5s\n    publicUrl = \"https://example.com:80\"\n}\n```\n\nThe `bindAddress` sets the network address to which the REST API binds. `apiKeyHash` is the hex-encoded Blake2b256 hash of the API key, in this case, it is the hash of the string \"hello\". `corsAllowedOrigin` is set to \"*\" to enable CORS support from all origins. `timeout` is the request processing timeout, and `publicUrl` is a publicly accessible URL if a node that exposes REST API in the firewall."
    },
    {
      "heading": "Network Configuration",
      "level": 2,
      "content": "```conf\nnetwork {\n    nodeName = \"ergo-node\"\n    appVersion = 5.0.1\n    agentName = \"ergoref\"\n    bindAddress = \"0.0.0.0:9022\"\n    magicBytes = [2, 2, 2, 2]\n    // declaredAddress details omitted for brevity...\n    upnpEnabled = no\n    localOnly = false\n    upnp-gateway-timeout = 7s\n    upnp-discover-timeout = 3s\n    addedMaxDelay = 0ms\n    handshakeTimeout = 30s\n    knownPeers = []\n    getPeersInterval = 2m\n    maxConnections = 30\n    connectionTimeout = 1s\n    peerEvictionInterval = 1h\n    // More settings omitted for brevity...\n}\n```\n\nThe `network` configuration section contains numerous settings related to the P2P network, such as node name (`nodeName`), application version (`appVersion`), agent name (`agentName`), network bind address (`bindAddress`), magic bytes (`magicBytes`), UPnP settings, and more."
    },
    {
      "heading": "NTP Configuration",
      "level": 2,
      "content": "```conf\nntp {\n    server = \"pool.ntp.org\"\n    updateEvery = 30m\n    timeout = 30s\n}\n```\n\nThe `ntp` configuration section specifies the Network Time Protocol (NTP) server to use for time synchronization (`server`), how frequently to update the time (`updateEvery`), and the timeout\n\n for server responses (`timeout`)."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/node/conf/conf-scorex.md",
  "processed_at": "2025-05-11T19:54:13.457570",
  "ai_processed": true
}