{
  "id": "docs_dev_data-model_block-transactions_md",
  "title": "Block Transactions",
  "summary": "The document provides an overview of the Transactions section within an Ergo block. It explains the key functions of Ergo transactions, including value transfer, state transition, and smart contract execution. The structure of an Ergo transaction is defined by the ErgoTransaction class, which includes inputs, data inputs, and output candidates. Ergo transactions undergo rigorous validation, both stateless and stateful, to ensure the integrity of the blockchain. The document also covers key concepts such as boxes, scripts, spending proofs, and context extension.",
  "qa_pairs": [
    {
      "question": "What are the main functions of the Transactions section in an Ergo block?",
      "answer": "The Transactions section enables value transfer, state transition, and smart contract execution on the Ergo blockchain."
    },
    {
      "question": "What are the core components of an Ergo transaction?",
      "answer": "The core components are inputs, data inputs, and output candidates."
    },
    {
      "question": "What are the two main types of validation performed on Ergo transactions?",
      "answer": "Ergo transactions undergo stateless validation and stateful validation."
    },
    {
      "question": "What is the purpose of data inputs in an Ergo transaction?",
      "answer": "Data inputs reference boxes that a transaction needs to access for its scripts, without requiring ownership."
    },
    {
      "question": "How do Ergo transactions update the state of the UTXO set?",
      "answer": "Transactions consume existing unspent boxes and create new boxes with potentially modified values and ownership, updating the UTXO set."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Block\n  - Transactions\n  - Data Model\n---"
    },
    {
      "heading": "Block Transactions",
      "level": 1,
      "content": "*(Back to: [Block Overview](block.md))*\n\nThe Transactions section of an Ergo [block](block.md) is the heart of the blockchain's state changes. It contains a list of all the [transactions](transactions.md) that are included and validated within that specific block. These transactions define how [tokens](eip4.md) and assets are transferred and how the overall state of the Ergo blockchain evolves.\n\n/// details | In the right place?\n    {type: info, open: true}\nThis page covers the structure of the transactions section within an Ergo block. For more general information on transactions, see the [Transaction Overview](transactions.md) page.\n///"
    },
    {
      "heading": "Function",
      "level": 2,
      "content": "* **Value Transfer:** Ergo transactions enable users to transfer ERG (Ergo's native token) and other custom [tokens](eip4.md)/assets to other users on the network.\n* **State Transition:** Each transaction consumes existing [unspent boxes](box.md) (which hold tokens and assets) and creates new boxes with potentially modified values and ownership. This process updates the state of the [UTXO set](eutxo.md).\n* **[Smart Contract](ergoscript.md) Execution:** Transactions can trigger the execution of [scripts](ergoscript.md) within boxes, allowing for complex logic and decentralized applications to be implemented on the Ergo blockchain."
    },
    {
      "heading": "Structure",
      "level": 2,
      "content": "The core structure of an Ergo transaction is defined by the `ErgoTransaction` class in [ErgoTransaction.scala](https://github.com/ergoplatform/ergo/blob/master/ergo-core/src/main/scala/org/ergoplatform/modifiers/mempool/ErgoTransaction.scala).\n\nHere's a breakdown of its main components:\n\n* **inputs:** A list of `Input` objects, each referencing an existing [box](box.md) that the transaction will spend. Each input includes a `spendingProof` (see [Transaction Signing](signing.md)) to prove the spender has the right to consume the box.\n* **[dataInputs](read-only-inputs.md):** A list of `DataInput` objects referencing boxes that the transaction needs to access for its scripts but won't spend. These provide data to the scripts without requiring ownership.\n* **outputCandidates:** A list of `ErgoBoxCandidate` objects representing the new boxes that the transaction will create. These candidates define the values, assets, and scripts of the new boxes."
    },
    {
      "heading": "Validation",
      "level": 2,
      "content": "Ergo transactions undergo rigorous [validation](validation.md) to ensure they are legitimate and maintain the integrity of the blockchain:\n\n* **Stateless Validation:** Checks that don't require accessing the blockchain state, including:\n    * Ensuring the transaction has inputs and outputs.\n    * Verifying basic rules (no negative values, unique inputs, etc.).\n* **Stateful Validation:** Requires accessing the blockchain state to check:\n    * Whether the inputs refer to valid and unspent boxes.\n    * Whether the spending proofs are correct.\n    * Whether the transaction adheres to rules related to assets, [fees](min-fee.md), and block size limits.\n    * Whether the scripts in the inputs are satisfied (using the `ErgoInterpreter` - see [ErgoTree Evaluation](evaluation.md))."
    },
    {
      "heading": "Key Concepts",
      "level": 2,
      "content": "* **[Boxes](box.md):** The fundamental building blocks of Ergo's [UTXO model](eutxo.md). They are containers that hold ERG, other tokens, and scripts (smart contracts).\n* **[Scripts](ergoscript.md):** Programs written in [ErgoScript](ergoscript.md) (a powerful scripting language) that define the conditions for spending boxes.\n* **Spending Proofs:** Cryptographic proofs that demonstrate the spender has the right to use the funds in a box, often involving [signatures](signing.md) or more complex [cryptographic protocols](sigma.md).\n* **Context Extension:** A key-value map attached to a spending proof, providing additional data that can be used by scripts during validation. See [Blockchain Context](blockchain-context.md)."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/data-model/block-transactions.md",
  "processed_at": "2025-05-11T19:19:03.666386",
  "ai_processed": true
}