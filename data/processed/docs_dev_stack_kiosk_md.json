{
  "id": "docs_dev_stack_kiosk_md",
  "title": "ErgoScript Playground with KioskWeb",
  "summary": "The document provides an overview of the ErgoScript Playground with KioskWeb, a user-friendly web interface for interacting with ErgoScript. It allows users to define boxes with custom ErgoScript code, register values, and create transactions that output specific predefined boxes. KioskWeb requires a fully configured Ergo node and provides a \"multi-tenant\" environment where each URL corresponds to a private instance of the script environment and box storage. The document covers the getting started process, including running the precompiled jar or compiling the project from sources, and the usage of the tool, which involves establishing the environment, defining boxes, and generating and sending transactions.",
  "qa_pairs": [
    {
      "question": "What is the purpose of KioskWeb?",
      "answer": "KioskWeb offers a user-friendly web interface to interact with ErgoScript, allowing users to define boxes with custom ErgoScript code, register values, and create transactions that output specific predefined boxes."
    },
    {
      "question": "What are the main features of KioskWeb?",
      "answer": "KioskWeb allows users to: 1) Define boxes with custom ErgoScript code and register values, and 2) Create transactions that output specific predefined boxes."
    },
    {
      "question": "What are the requirements for running KioskWeb?",
      "answer": "KioskWeb requires a fully configured Ergo node to be running, with the node's REST API accessible at http://localhost:9052 by default. This can be modified by invoking the method `org.sh. Kiosk.ergo.ErgoAPI.setUrl` from the web-UI."
    },
    {
      "question": "How can KioskWeb be deployed and accessed?",
      "answer": "KioskWeb can be deployed in two ways: 1) Run `sbt jetty:start` to initiate the built-in Jetty web server on port 8080, accessible at http://localhost:8080, or 2) Compile the war file using `sbt package` and run it as a J2EE application."
    },
    {
      "question": "How does KioskWeb handle the signing process and transaction posting?",
      "answer": "KioskWeb relies on ergo-appkit to handle the signing process, replicating a large part of the Ergo node wallet's functionality locally. It also utilizes the public explorer for posting transactions, eliminating the need for a local running Ergo node."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "<!-- TODO: Check if this is still the most up to date info -->\n\n/// admonition | Archive\n    type: warning\n\nThe Kiosk repository has been archived by the owner on May 26, 2022. It is now read-only.\n///"
    },
    {
      "heading": "ErgoScript Playground with KioskWeb",
      "level": 1,
      "content": "[KioskWeb](https://github.com/scalahub/KioskWeb), built on top of the [Kiosk](https://github.com/scalahub/Kiosk) project, offers a user-friendly web interface to interact with ErgoScript. It allows you to perform the following actions:\n\n1. Define boxes with custom ErgoScript code and register values.\n2. Create transactions that output specific predefined boxes."
    },
    {
      "heading": "Getting Started",
      "level": 2,
      "content": "KioskWeb requires a fully configured Ergo node to be running. By default, it assumes the node's REST API is accessible at http://localhost:9052. You can modify this by invoking the method `org.sh. Kiosk.ergo.ErgoAPI.setUrl` from the web-UI.\n\nA precompiled jar is available [here](https://github.com/scalahub/Kiosk/releases/tag/0.1). You can run it using the command `java -jar <jarfile>`. If you wish to generate the jar from sources, issue the command `sbt assembly`.\n\nTo operate a local copy (the recommended approach), clone the project and follow one of these steps:\n\n1. Run sbt using the command `sbt`. Inside the sbt prompt, type `jetty:start`. This command initiates the built-in Jetty web server on port 8080, which can be accessed at http://localhost:8080.\n\n2. Compile the war file using `sbt package`. Then, run the war file as you would with any other J2EE application.\n\nCurrently, KioskWeb relies solely on ergo-appkit and utilizes the public explorer for posting transactions, thus eliminating the need for a local running Ergo node.\n\nAppkit handles the signing process, replicating a large part of the Ergo node wallet's functionality locally, as both are JVM-based.\n\nKioskWeb provides a \"multi-tenant\" environment as each URL corresponds to a private instance of the script environment and box storage. This setup allows you to bookmark a URL and revisit it later to find your declared variables and boxes intact. Unless someone has the same URL, they won't be able to view or modify your environment."
    },
    {
      "heading": "Usage",
      "level": 2,
      "content": "1. Establish the environment for use in ErgoScript. This environment consists of a map of (key, value) pairs, with keys referenced within the ErgoScript code and set in the boxes' registers.\n\n2. Define one or more boxes using ErgoScript code, including some registers if necessary.\n\n3. Generate and send a transaction containing certain boxes predefined in the previous step.\n\nThe final output will be the transaction ID and the request made to the Ergo node's API."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/stack/kiosk.md",
  "processed_at": "2025-05-11T19:35:33.722204",
  "ai_processed": true
}