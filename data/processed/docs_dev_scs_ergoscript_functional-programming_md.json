{
  "id": "docs_dev_scs_ergoscript_functional-programming_md",
  "title": "Functional Programming in ErgoScript",
  "summary": "The document discusses the use of functional programming features in ErgoScript, a programming language used in the Ergo blockchain platform. It presents two examples that demonstrate the application of functional programming concepts in ErgoScript.\n\nThe first example shows how to create an ErgoScript program that allows a box to be spent only if the spender knows the discrete log of a given elliptic curve point and all input boxes are protected by the same ErgoScript program.\n\nThe second example builds upon the first by adding an additional condition that the box can only be spent if the sum of all input values is greater than 1 Erg. It demonstrates how to compute the sum of all inputs using functional programming techniques in ErgoScript.\n\nThe document highlights the importance of functional programming in ErgoScript and how it can be used to implement complex conditions for spending boxes on the Ergo blockchain.",
  "qa_pairs": [
    {
      "question": "What is this document about?",
      "answer": "# Functional Programming in ErgoScript\n\nFunctional programming is a significant part of ErgoScript's capabilities. The next examples demonstrate the application of functional features in ErgoScript. C..."
    },
    {
      "question": "What is the title of this document?",
      "answer": "Functional Programming in ErgoScript"
    },
    {
      "question": "What is the 'Functional Programming in ErgoScript' section about?",
      "answer": "Functional programming is a significant part of ErgoScript's capabilities. The next examples demonst..."
    }
  ],
  "sections": [
    {
      "heading": "Functional Programming in ErgoScript",
      "level": 1,
      "content": "Functional programming is a significant part of ErgoScript's capabilities. The next examples demonstrate the application of functional features in ErgoScript. Consider a situation where we want to allow a box to be spent only if all the following conditions are met:\n\n1. The spender knows the discrete log of the given elliptic curve (EC) point `0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352`.\n2. All input boxes must be protected by the same ErgoScript program.\n\nThe conditions above can be coded into the following program:\n\n```scala\n{\n   val z = decodePoint(fromBase64(\"AlCGOtZKh66KL+g8GvGoQDy1P1PkhthRHa2KBIh+WyNS\"))\n   def sameAsMe(box:Box) = box.propositionBytes == SELF.propositionBytes\n   \n   proveDlog(z) && INPUTS.forall(sameAsMe)       \n}\n```\n\nThe [address that corresponds to the program above](https://wallet.plutomonkey.com/p2s/?source=ICAgIHsKICAgICAgIHZhbCB6ID0gZGVjb2RlUG9pbnQoZnJvbUJhc2U2NCgiQWxDR090WktoNjZLTCtnOEd2R29RRHkxUDFQa2h0aFJIYTJLQkloK1d5TlMiKSkKICAgICAgIGRlZiBzYW1lQXNNZShib3g6Qm94KSA9IGJveC5wcm9wb3NpdGlvbkJ5dGVzID09IFNFTEYucHJvcG9zaXRpb25CeXRlcwogICAgICAgcHJvdmVEbG9nKHopICYmIElOUFVUUy5mb3JhbGwoc2FtZUFzTWUpCiAgICB9Cg==) is `3PwBHASpxaJa5i3vmLtUTvEqjbJWcpqnyuX9hSmUbaK2HAmoDLHmYSMm4up5pCRytSStEhsHnzTfpHzvCRZ`.\n\nThe absence of the `var` keyword might initially seem limiting as it enforces immutability. For example, to calculate the sum of all inputs, you might think about storing the cumulative value in a `var` and iterating over all inputs, updating the `var` with each iteration.\n\nHere's an example of how you can compute the sum of all inputs in ErgoScript. Suppose an additional condition is that the box can only be spent if the sum of all inputs is greater than 1 Erg (or 1000000000 nanoErgs).\n\n```scala\n{\n   val z = decodePoint(fromBase64(\"AlCGOtZKh66KL+g8GvGoQDy1P1PkhthRHa2KBIh+WyNS\"))\n   def sameAsMe(box:Box) = box.propositionBytes == SELF.propositionBytes\n   val sum = INPUTS.fold(0L, { (accum:Long, box: Box) => accum + box.value }) \n   \n   proveDlog(z) && INPUTS.forall(sameAsMe) && sum > 1000000000       \n}\n```\n\nThis [corresponds to the address](https://wallet.plutomonkey.com/p2s/?source=ICAgIHsKICAgICAgIHZhbCB6ID0gZGVjb2RlUG9pbnQoZnJvbUJhc2U2NCgiQWxDR090WktoNjZLTCtnOEd2R29RRHkxUDFQa2h0aFJIYTJLQkloK1d5TlMiKSkKICAgICAgIGRlZiBzYW1lQXNNZShib3g6Qm94KSA9IGJveC5wcm9wb3NpdGlvbkJ5dGVzID09IFNFTEYucHJvcG9zaXRpb25CeXRlcwogICAgICAgdmFsIHN1bSA9IElOUFVUUy5mb2xkKDBMLCB7IChhY2N1bTpMb25nLCBib3g6IEJveCkgPT4gYWNjdW0gKyBib3gudmFsdWUgfSkgCiAgICAgICAKICAgICAgIHByb3ZlRGxvZyh6KSAmJiBJTlBVVFMuZm9yYWxsKHNhbWVBc01lKSAmJiBzdW0gPiAxMDAwMDAwMDAwICAgICAgIAogICAgfQo=)\n`49AkSSPuVSQHk17C4JLxhqxH7yL5NMWxdEsELp6MNzYeJZvF7iKk3Jgi4fh96o7RJeaU8JSVPvZ5EhCgboQy9d68QreWaYcVxSUcsd8UCamHPsv9kHzqhe4tAM5D7ZmF`.\n\nThese examples demonstrate the power of functional programming in ErgoScript. Despite the apparent restriction of immutability, a wide range of functions can be expressed elegantly and concisely in a functional programming style."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/scs/ergoscript/functional-programming.md",
  "processed_at": "2025-05-11T19:28:36.351103",
  "ai_processed": true
}