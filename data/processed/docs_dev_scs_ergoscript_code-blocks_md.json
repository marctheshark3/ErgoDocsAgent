{
  "id": "docs_dev_scs_ergoscript_code-blocks_md",
  "title": "Using Code-Blocks in ErgoScript",
  "summary": "This document explains how to use code-blocks in ErgoScript, a programming language used in the Ergo blockchain. It demonstrates the syntax for defining immutable variables using the `val` keyword, and explains that ErgoScript does not support mutable variables like `var`. The document also shows how multiple code-blocks can be combined using logical operators like `||`. The key points covered are the use of code-blocks, immutable variables, and combining multiple blocks in ErgoScript.",
  "qa_pairs": [
    {
      "question": "What is the purpose of a code-block in ErgoScript?",
      "answer": "In ErgoScript, multiple lines must be contained within a code-block, which is enclosed in braces {}."
    },
    {
      "question": "How does Scala access arrays compared to Java or Python?",
      "answer": "Scala accesses arrays using round parentheses () instead of square brackets []."
    },
    {
      "question": "What is the purpose of the last line in an ErgoScript code-block?",
      "answer": "The last line of an ErgoScript code-block serves as the returned value of that block."
    },
    {
      "question": "What is the difference between 'val' and 'var' in ErgoScript?",
      "answer": "ErgoScript only supports the 'val' keyword to define immutable variables, and does not have a 'var' keyword like Scala."
    },
    {
      "question": "What is the address associated with the example ErgoScript code?",
      "answer": "The example ErgoScript code maps to the address 2EUTBShk4TbLWJNwGpkVYh8dAPqbrfvb3p."
    }
  ],
  "sections": [
    {
      "heading": "Using Code-Blocks in ErgoScript",
      "level": 1,
      "content": "When using multiple lines in ErgoScript, the lines must be contained within a code-block, which is enclosed in braces `{}`. Consider the following example:\n\n```scala\n{\n   val out = OUTPUTS(0)\n   val in = INPUTS(0)\n   in.value == out.value\n}\n```\n\nIn this example, note that Scala accesses arrays using round parentheses `()`, not square brackets `[]` as in Java or Python. Therefore, `OUTPUTS(0)` is referencing the first element of the `OUTPUTS` array. In Scala, the last line of a block serves as the returned value of that block. Here, the returned value is the boolean predicate `in.value == out.value`.\n\nThis script maps to the [address](https://wallet.plutomonkey.com/p2s/?source=eyAgCiAgdmFsIG91dCA9IE9VVFBVVFMoMCkKICB2YWwgaW4gPSBJTlBVVFMoMCkKICBpbi52YWx1ZSA9PSBvdXQudmFsdWUKfQ==) `2EUTBShk4TbLWJNwGpkVYh8dAPqbrfvb3p`. It allows anyone to spend the box associated with this address, as long as the first input and the first output of the transaction contain the same value.\n\nWe used the `val` keyword to define intermediate immutable variables, similar to Scala. As `val` creates an immutable object, the object's value can't be changed once assigned. This makes the following code snippet invalid:\n\n```scala\n...\nval out = OUTPUTS(0)        // defines an immutable value and sets it to the first output.  \nout = OUTPUTS(1)            // reassignment of a val will cause an error\n...\n```\n\nUnlike Scala, ErgoScript does not support the `var` keyword, meaning all variables are immutable. \n\nHowever, mutable variables can be emulated using lambda syntax, which will be covered separately.\n\nMultiple blocks can be combined as shown below:\n\n```scala\n{\n  INPUTS(0).id == SELF.id\n} || {\n  INPUTS(0).value == 100000 \n}\n```\n\nIn this example, the script checks whether the id of the first input is the same as the current box's id or if the value of the first input equals 100,000 nanoErgs."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/scs/ergoscript/code-blocks.md",
  "processed_at": "2025-05-11T19:28:10.749862",
  "ai_processed": true
}