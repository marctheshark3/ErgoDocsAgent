{
  "id": "docs_dev_stack_explorer_explorer_local_md",
  "title": "Explorer",
  "summary": "The document provides an overview of the Ergo Blockchain Explorer, which is an interface with the Ergo blockchain. It describes the four main services provided by the Explorer: chain-grabber, explorer-api, utx-tracker, and utx-broadcaster. The document also lists various resources related to the Explorer, such as deployment guides, setup tools, and related projects. It then provides step-by-step instructions for running your own instance of the Explorer, including creating environment files and cloning the necessary repositories.",
  "qa_pairs": [
    {
      "question": "What is this document about?",
      "answer": "# Explorer\n\n## Intro \n\nThe Ergo Blockchain Explorer is your interface with the blockchain and provides four services. \n\n1. `modules/chain-grabber`: Dumps aggregated data blockchain -> database\n2. `mod..."
    },
    {
      "question": "What is the title of this document?",
      "answer": "Explorer"
    },
    {
      "question": "What is the 'Intro' section about?",
      "answer": "The Ergo Blockchain Explorer is your interface with the blockchain and provides four services. \n\n1. ..."
    },
    {
      "question": "What is the 'Sources' section about?",
      "answer": "- [explorer-backend](https://github.com/ergoplatform/explorer-backend)\n- [explorer-frontend](https:/..."
    }
  ],
  "sections": [
    {
      "heading": "Explorer",
      "level": 1,
      "content": ""
    },
    {
      "heading": "Intro",
      "level": 2,
      "content": "The Ergo Blockchain Explorer is your interface with the blockchain and provides four services. \n\n1. `modules/chain-grabber`: Dumps aggregated data blockchain -> database\n2. `modules/explorer-api`: Provides a set of HTTP API methods for querying on/off-chain data.\n3. `modules/utx-tracker`: Dumps unconfirmed transactions from the mempool to local database\n4. `modules/utx-broadcaster`: Broadcasts unconfirmed transactions to a set of known peers"
    },
    {
      "heading": "Sources",
      "level": 2,
      "content": "- [explorer-backend](https://github.com/ergoplatform/explorer-backend)\n- [explorer-frontend](https://github.com/ergoplatform/explorer-frontend)"
    },
    {
      "heading": "Resources",
      "level": 2,
      "content": "- [Deploying Explorer services with Docker Compose](https://github.com/ergoplatform/explorer-backend/wiki/Deploying-explorer-services-with-docker-compose)\n- [How to setup the Chain-Grabber module on a Raspberry Pi device](rpi-blockchain-explorer.md)\n- [Ergo Nix Toolkit](https://github.com/ergoplatform/ergo-nix)\n- [Ergo Bootstrap](https://github.com/ergoplatform/ergo-bootstrap)\n- [ergo-setup](https://github.com/abchrisxyz/ergo-setup) is a Docker based Ergo setup (Node, Explorer & GraphQL). Somewhat similar to Ergo Bootstrap except it offers much less options and is not NixOS-based."
    },
    {
      "heading": "Running your own instance of Explorer",
      "level": 2,
      "content": "First we'll create a working directory and `cd` into it. \n\n```bash\nmkdir explorer && cd \"$_\"\n```"
    },
    {
      "heading": "Creating env files",
      "level": 3,
      "content": "> `.db_env` \n\n```bash\necho \"DB_URL=jdbc:postgresql://postgres:5432/explorer\nDB_USER=postgres\nDB_PASS=1234\" > .db_env\n```\n\n> `.redis_env` \n\n```bash\necho \"REDIS_URL=redis://localhost:6379\" > .redis_env\n```\n\nAdditional configurations are made by adding entries to the `env_file` field in `docker-compose.yaml`. ie, `.http_env`"
    },
    {
      "heading": "explorer-frontend",
      "level": 3,
      "content": "```bash\ngit clone https://github.com/ergoplatform/explorer-frontend\nsudo mkdir -p front/build\nsudo cp -r explorer-frontend/build /front\nsudo mkdir front/config\nsudo vi front/config/app.config.js\nsudo vi docker-compose.yaml\n```"
    },
    {
      "heading": "explorer-backend",
      "level": 3,
      "content": "```bash\ngit clone https://github.com/ergoplatform/explorer-backend\ncd explorer-backend/modules"
    },
    {
      "heading": "in default config of the corresponding service",
      "level": 1,
      "content": "vi chain-grabber/src/main/resources/application.conf\nvi explorer-api/src/main/resources/application.conf\nvi utx-tracker/src/main/resources/application.conf\nvi utx-broadcaster/src/main/resources/application.conf"
    },
    {
      "heading": "Create docker network",
      "level": 1,
      "content": "docker network create explorer-network\n```"
    },
    {
      "heading": "Booting",
      "level": 3,
      "content": "> Configure other services (such as: nginx, postgres, redis, adminer) according to their documentaion\n\n```bash"
    },
    {
      "heading": "Run from /explorer/",
      "level": 1,
      "content": "docker-compose up -d"
    },
    {
      "heading": "To make sure everything up and working.",
      "level": 1,
      "content": "docker ps -a\n```"
    },
    {
      "heading": "Files",
      "level": 3,
      "content": "> paste the following into `app.config.js`\n\n- `apiUrl` points to your to backend API. \n- `environments.url` points to your frontend\n\n```bash\nvar __APP_CONFIG__ = {\n  apiUrl: 'https://api.ergoplatform.org',\n  alternativeLogo: false, // true by default\n  environments: [\n     {\n       name: 'Mainnet',\n       url: 'https://explorer.ergoplatform.org',\n     },\n  ],\n};\n\nif (typeof global !== 'undefined') {\n  global.__APP_CONFIG__ = __APP_CONFIG__;\n}\n```\n\n> `docker-compose.yaml`\n\n```yaml\nversion: '3.4'\n\nservices:\n  nginx:\n    image: nginx:1.17.9-alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - /data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - /data/nginx/ssl:/etc/ssl:ro\n      - /explorer/front/build:/usr/share/nginx/html\n      - /explorer/front/config:/usr/share/nginx/config\n    networks:\n      - explorer-network\n    depends_on:\n      - api\n  postgres:\n    image: postgres:11-alpine\n    shm_size: 2g\n    environment:\n      POSTGRES_PASSWORD: <password>\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - /data/postgres:/var/lib/postgresql/data:rw\n    networks:\n      - explorer-network\n  redis:\n    image: redis:latest\n    restart: always\n    command: [\"redis-server\"]\n    ports:\n      - \"127.0.0.1:6379:6379\"\n    volumes:\n      - /data/redis:/usr/local/etc/redis\n    networks:\n      - explorer-network\n  adminer:\n    image: adminer:4-standalone\n    ports:\n      - \"8082:8080\"\n    networks:\n      - explorer-network\n  grabber:\n    image: oskin1/chain-grabber:latest\n    networks:\n      - explorer-network\n    env_file:\n      - .db_env\n    depends_on:\n      - postgres\n  api:\n    image: oskin1/explorer-api:latest\n    ports:\n      - \"8081:8081\"\n    networks:\n      - explorer-network\n    env_file:\n      - .db_env\n    depends_on:\n      - postgres\n      - redis\n  utx-tracker:\n    image: oskin1/utx-tracker:latest\n    networks:\n      - explorer-network\n    env_file:\n      - .db_env\n    depends_on:\n      - postgres\n  utx-broadcaster:\n    image: oskin1/utx-broadcaster:latest\n    networks:\n      - explorer-network\n    env_file:\n      - .redis_env\n    depends_on:\n      - redis\n\nnetworks:\n  explorer-network:\n    external: true\n```"
    },
    {
      "heading": "Manual Instance",
      "level": 2,
      "content": ""
    },
    {
      "heading": "Prerequsites",
      "level": 3,
      "content": "```\nsudo apt update\nsudo apt full-upgrade"
    },
    {
      "heading": "SDKMAN",
      "level": 2,
      "content": "curl -s \"https://get.sdkman.io\" | bash\nsdk install java\nsdk install sbt"
    },
    {
      "heading": "PostgreSQL",
      "level": 2,
      "content": "sudo apt install postgresql\nsudo su postgres\ncreateuser ergo -P --interactive\n```\n\nLoad database schema\n```\npsql\ncreate database explorer;\n\\c explorer;\n\\i /explorer-backend/modules/explorer-core/src/main/resources/db/V9__Schema.sql\n```\n\n\n\n\n```\ndocker build explorer-backend/modules/chain-grabber/\ndocker build explorer-backend/modules/chain-grabber/\ndocker build explorer-backend/modules/chain-grabber/\ndocker build explorer-backend/modules/chain-grabber/\n```"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/stack/explorer/explorer_local.md",
  "processed_at": "2025-05-11T19:34:40.294392",
  "ai_processed": true
}