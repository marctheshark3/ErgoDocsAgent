{
  "id": "docs_dev_tokens_standards_eip4_md",
  "title": "EIP-0004: Asset Standard",
  "summary": "This EIP-0004 document provides a standard for issuing Ergo tokens, which are supported as first-class citizens on the Ergo platform. The standard defines a structure for the box that issues a token, including registers for the token ID, name, description, and number of decimals. It also introduces an extension to this token standard, called the \"asset type standard\", which adds additional registers to support different types of assets such as NFTs and membership tokens. The document explains the purpose and structure of these asset type registers, providing examples for different asset categories.",
  "qa_pairs": [
    {
      "question": "What is the purpose of the EIP-0004 standard?",
      "answer": "The EIP-0004 standard provides a uniform way to issue Ergo tokens."
    },
    {
      "question": "What are the key features of Ergo tokens?",
      "answer": "Ergo supports custom tokens as first-class citizens, with a special register (R2) containing (tokenId -> amount) pairs, and a box can contain at most 255 secondary tokens."
    },
    {
      "question": "How are new tokens created in Ergo?",
      "answer": "A transaction can create out-of-thin-air tokens in its outputs if the token identifier is equal to the identifier of the first input box of the transaction."
    },
    {
      "question": "What is the purpose of the storage rent component in Ergo?",
      "answer": "The storage rent component allows a miner to collect (or burn) all the tokens inside a box if it is expired, and there are not enough Ergs in the box to pay the storage rent fee."
    },
    {
      "question": "What are the additional registers (R4-R6) used in the Ergo token standard?",
      "answer": "R4 is for the token verbose name, R5 is for the token description, and R6 is for the number of decimals."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - EIP\n---"
    },
    {
      "heading": "EIP-0004: Asset Standard",
      "level": 1,
      "content": "> \ud83d\udd17 From [EIP-0004:](https://github.com/ergoplatform/eips/blob/master/eip-0004.md)\n\n\nThis standard provides a uniform way to issue Ergo tokens.\n\nA standard interface allows any tokens on Ergo to be re-used by other applications: from wallets to decentralized exchanges."
    },
    {
      "heading": "Ergo tokens background",
      "level": 2,
      "content": "Ergo supports **custom tokens as first-class citizens.**\n\n- Namely, a special register (R2) of a box contains (tokenId -> amount) pairs.\n- A box can contain at most 255 secondary tokens. \n\nThere are also indirect limits: \n\n- A box can be no larger than 4 kilobytes\n- Tokens add to the computational cost of the transaction.\n\nA transaction can create *out-of-thin-air* tokens in its outputs if the token identifier is equal to the identifier of the first input box of the transaction.\n\n/// admonition | Info\n[Why does the limitation of 1 new token per transaction exist?](https://github.com/ergoplatform/ergo/issues/2013)\n///\n\n\n\n- As the box identifier is cryptographically unique, there is no chance of having the second token with the same identifier while the hash function is collision-resistant.\n- This rule also means that only one new token per transaction can be created.\n- Unlike ergs, other tokens can be burnt: the total amount for a token in transaction inputs should be no less than the amount of the outputs.\n\n[Storage rent](rent.md) component allows a miner to collect (or burn) all the tokens inside a box if it is expired, and there are not enough Ergs in the box to pay the storage rent fee."
    },
    {
      "heading": "Ergo tokens standard",
      "level": 2,
      "content": "Though this is not required by the protocol, we propose the following structure for the box that issues a token:\n\n| Register        | Description                                     | Example                      |Encoded                      |\n| --------------- |:-----------------------------------------------:| ----------------------------:|----------------------------:|\n| R2              | Token id and amount pair                        | [(\"7d...09\", 100000)]        |                             |\n| R4              | Token verbose name (UTF-8 representation)       | \"USD\"                        | \"0e03555344\"                |\n| R5              | Token description (UTF-8 representation)        | \"Nothing backed USD token\"   | \"0e184e6f7468696e67206261636b65642055534420746f6b656e\"  |\n| R6              | Number of decimals                              | \"2\"                          | \"0e0132\"                         |\n\nNote, that additional [registers](registers.md) (R4-R6) are encoded as **Coll[Byte]** type of ErgoScript and their encoded representation is received as `'\\x0e' + intToVlq(byteArray.length) + byteArray` where `byteArray` is UTF-8 representation of the original string.\nThe example above issues one thousand tokens called \"USD\" with two decimals each.\nThe transaction that issues such a token was included in block 98288 and may be found in block [explorer](https://explorer.ergoplatform.com/en/transactions/5c131f8ae9fa68dab1bac654aa66d364bc7da12107f337a0c9d3d80d8951ee41))"
    },
    {
      "heading": "Ergo asset types",
      "level": 2,
      "content": "This standard is an extension of [token standard](#ergo-tokens-standard):\n\nIn the asset type standard, R7 is a required two-byte value encoded as Coll[Byte]. The first byte represents the asset category, for example, _NFT_ or _Share Tokens_. The second byte specifies the exact subcategory, for example, _Picture Artwork NFT_ or _ErgoMixer's Share Tokens_. The second byte can be omited so that the issuance only specifies the catagory and not the subcatagory, for example, _Share Tokens_.\nAlso, the remaining R8 and R9 registers can be used by each individual asset types based on their needs.\n\nThe standardization of various asset types can be found below:\n\n| Asset type        | R7                                     | R8                      |R9                      |\n| --------------- |:-----------------------------------------------:| ----------------------------:|----------------------------:|\n| NFT - picture artwork              | [0x01, 0x01] - i.e., \"0e020101\"                        | SHA256 hash of the picture    | Optional - link to the artwork (UTF-8 representation) |\n| NFT - audio artwork              | [0x01, 0x02] - i.e., \"0e020102\"                        | SHA256 hash of the audio    | Optional - link to the audio encoded as Coll[Byte] or (link to the audio, link to the image cover) encoded as (Coll[Byte], Coll[Byte]) (UTF-8 representation) |\n| NFT - video artwork              | [0x01, 0x03] - i.e., \"0e020103\"                        | SHA256 hash of the video    | Optional - link to the video (UTF-8 representation) |\n| [Membership token - threshold signature](https://www.ergoforum.org/t/a-simpler-collective-spending-approach-for-everyone/476)              | [0x02, 0x01] - i.e., \"0e020201\"                        | Number of required signatures (Integer) - i.e., 4 in case of 4-of-10 threshold signature   | Deposit address of the funds controlled by the threshold signature (Ergo tree byte array) |\n\nThe above registers (R7-R9) are also encoded as Coll[Byte] type unless stated otherwise."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/tokens/standards/eip4.md",
  "processed_at": "2025-05-11T19:38:37.105663",
  "ai_processed": true
}