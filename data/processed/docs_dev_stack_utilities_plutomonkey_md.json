{
  "id": "docs_dev_stack_utilities_plutomonkey_md",
  "title": "Compiling ErgoScript",
  "summary": "The document provides instructions on how to compile ErgoScript contracts into P2S (Pay-to-Script) addresses using the plutomonkey tool. It then demonstrates how to utilize the resulting P2S address within Rust code, showing an example of a simplified age USD bank contract. The approach can also be applied with JavaScript or TypeScript WASM (WebAssembly) bindings.",
  "qa_pairs": [
    {
      "question": "What is the purpose of the plutomonkey website?",
      "answer": "The plutomonkey website is used to compile ErgoScript contracts into a P2S (Pay-to-Script) address."
    },
    {
      "question": "How can the compiled P2S address be used in Rust code?",
      "answer": "The compiled P2S address can be utilized within Rust, as demonstrated in the provided code snippet."
    },
    {
      "question": "What is the purpose of the AddressEncoder and eval_out_wo_ctx functions in the Rust code?",
      "answer": "The AddressEncoder is used to parse the P2S address string into an Address object, and the eval_out_wo_ctx function is used to evaluate the script proposition."
    },
    {
      "question": "What is the expected output of the Rust code snippet?",
      "answer": "The Rust code snippet is expected to assert that the result of evaluating the script proposition is true."
    },
    {
      "question": "Where can the reader find more information about the Sigma-Rust library used in the Rust code?",
      "answer": "The reader can find more information about the Sigma-Rust library in the provided link to the GitHub repository."
    }
  ],
  "sections": [
    {
      "heading": "Compiling ErgoScript",
      "level": 1,
      "content": "To compile any ErgoScript contract into a P2S (Pay-to-Script) address, you can use **plutomonkey**:\n\n```\nhttps://wallet.plutomonkey.com/p2s/?source=\n```\n\nAfter compiling, the resulting P2S address can be utilized within Rust, as demonstrated in the following code snippet:\n\n```rust\n    fn simplified_age_usd_bank_contract() {\n        let p2s_addr_str = \"7Nq5tKsVYCgneNgEfA2BJKwGsWozezNLhCNsRBihcHVFkDTuTThd4Qt1bi7NfCK1HuuVfjksMrEftV6MEFajjuyp1TMD2PX7SYWvkg9zH4CtgpdoBjekCNXs5XawxXnW6FT7GCqXTpJUP2TkkuqBh1df99PTigehys36uZz9wQnkrJXrv3mw3Yy4CM622qe5wdqLtpEonjazEmsw8weqEYegDyfJnswDvDkLPXtcCB86i19jik4fnSTtCcYj3jpWCQ7WL5dZn1ivs5JGRsR2ioNCRiZd3Gu1zJBgbHkMg41Z6VeCRWXjGY99BUtgtQiepSHGHajFCVcFAHhVxccdVUPCxGeEL6c2dNx6qzEkVfTfHs5qBgJewR8KCZTCVTurNBHeqCSVdxnfFvhW3f72cNrae5E1UhTAXU2iX4LZMHQsKyefY24Aq1b1srTyRWLpixjbcezFqA2TKjGSn1p1ruxbR7AQpW24ByPKT9sFE9ii4qNeXDnLcGtAAGS9FC5SD1s516a4NCu6v9zZfTvRKGkCwt78J8DEVnhTbttjcsvqFsUXQrvAv7TGVsaT4mL6B7F5BhRoZwFkgRXqFUVCWvgqJrwwjFRtbc5aZz\";\n        let encoder = AddressEncoder::new(NetworkPrefix::Mainnet);\n        let addr = encoder.parse_address_from_str(p2s_addr_str).unwrap();\n        let script: Rc<Expr> = addr.script().unwrap().proposition().unwrap();\n        dbg!(&script);\n        let res: bool = eval_out_wo_ctx::<SigmaProp>(script.as_ref())\n            .try_into()\n            .unwrap();\n        assert!(res);\n    }\n\n```\nSee [this link](https://github.com/ergoplatform/sigma-rust/blob/fd197d0c0892cd24bbcb475e0a83243784700e32/ergotree-interpreter/src/contracts.rs#L159-L167) for full context\n\nThis approach should also be applicable with JavaScript or TypeScript WASM (WebAssembly) bindings."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/stack/utilities/plutomonkey.md",
  "processed_at": "2025-05-11T19:36:56.070808",
  "ai_processed": true
}