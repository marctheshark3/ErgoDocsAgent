{
  "id": "docs_events_pdf_ergohackvii_REPUTATION_SYSTEM_md",
  "title": "Reputation System",
  "summary": "The document discusses the development of a reputation system for the Ergo blockchain ecosystem. The key points are:\n\nIntroduction: The reputation system aims to address the trust gap in the blockchain ecosystem by providing a decentralized, user-driven mechanism for assigning and transferring reputation.\n\nTrust and Reputation: Trust is essential in any ecosystem, including the digital world of blockchain. A reputation system can help establish and maintain this trust.\n\nNecessity: A reputation system is necessary in blockchain ecosystems to provide users with confidence in the entities they interact with, such as smart contracts, addresses, and URLs. It allows users to share reviews, feedback, and opinions about these tools.\n\nAlignment with Ergo Manifesto: The proposed reputation system aligns with Ergo's principles of decentralization, openness, cost-competitiveness, and long-term focus.\n\nSystem Design: The reputation system uses tokens to represent the amount of reputation that can be assigned. Users can delegate reputation from their own proofs to new proofs they generate, and any user can assign reputation to any reputation proof.\n\nChallenges: The team has faced some challenges, such as issues with the transaction builder and the on-chain representation of the reputation object. They are working to resolve these problems and continue developing the system.\n\nFuture Approaches: The team recognizes the need for adaptability in reputation management and suggests potential future developments, such as allowing for more complex token/monetary policies and customizable reputation trees for different communities and contexts.",
  "qa_pairs": [
    {
      "question": "What is the purpose of the reputation system described in the document?",
      "answer": "The purpose of the reputation system is to address the fundamental need for trust in the blockchain ecosystem by providing a decentralized, user-driven mechanism for assigning and transferring reputation."
    },
    {
      "question": "How does the reputation system align with the principles of the Ergo Manifesto?",
      "answer": "The reputation system is aligned with the Ergo Manifesto principles, as it is completely decentralized, open and auditable, created for regular people, focused on remaining cost-competitive, and has a long-term focus."
    },
    {
      "question": "What are the key components of the reputation system's design?",
      "answer": "The key components are: each reputation proof has a token to reflect the amount of reputation, users can generate new reputation proofs or extract them from existing ones, and users can assign reputation to any proof without transferring the token."
    },
    {
      "question": "What are the main challenges the team faced in implementing the reputation system?",
      "answer": "The main challenges include issues with the transaction builder using Fleet SDK, limitations in representing the reputation object in ErgoScript, and the need to develop scripts for computing reputation and extracting unexpended reputation proofs."
    },
    {
      "question": "How does the reputation system aim to establish and maintain trust in the blockchain ecosystem?",
      "answer": "The reputation system aims to establish and maintain trust by providing a decentralized, user-driven mechanism for assigning and transferring reputation, which is essential for building confidence in the entities users interact with in the blockchain space."
    }
  ],
  "sections": [
    {
      "heading": "Reputation System",
      "level": 1,
      "content": ""
    },
    {
      "heading": "Introduction",
      "level": 2,
      "content": "Our purpose to the Ergohack-VII is reputation system. A reputation system addresses a fundamental need in the blockchain ecosystem - trust. Trust is essential in any ecosystem, and our system aims to bridge the trust gap by providing a decentralized, user-driven mechanism for assigning and transferring reputation.\n\n**Trust and Reputation:**\n\nTrust is the foundation of any functional ecosystem, including the digital world of blockchain.\nIn this space, trust is equally vital.\nUsers must have confidence in the entities they interact with,\nwhether it's smart contracts, addresses, URLs, or other off-chain entities.\nThis reputation system aims to establish and maintain this trust.\n\n**Why is it necessary?** \n\nA reputation system can provide interesting approaches in a blockchain ecosystem. \n\nOn one hand, certain applications require it: \npeer-to-peer versions of Airbnb, Uber, or similar platforms, as the central function of the company \n(in the current versions) is to provide that \nreputation network among interacting agents (hosts or tenants, drivers and passengers, etc.)\n\nOn the other hand, current applications (DeFi protocols, bridges, etc.) may not directly require a reputation system, but nonetheless, it is highly necessary.\nIt is necessary because blockchain is based on trustlessness. \nIf we consider that an ecosystem (of a peer-to-peer network like Ergo) is enriched by the number of tools it possesses \n(among other variables), what value do these tools have if users cannot trust them? \nHow does a user know which ones are reliable and which are not? \nHow does a user know which contracts, URLs, or whatever else they can use without taking too much risk? \n\nThe answer is: based on what others say, meaning the community plays a crucial role. \nFor this, two important parts are needed:\n1. The tools should be open and auditable. \n2. A platform for sharing reviews, feedback, or opinions about these tools. \nThis is where this project aims to help. \nBecause currently, a user decides whether to trust a web3 page based on what its users say on Twitter (now X) \nor how they discuss it on YouTube. We believe that this is a problem that no part of the entire ecosystem is currently addressing.\n\n**Basic explanation**\n\nThe main characteristic of this system is that it doesn\u2019t require consensus.\nThat is: *Alice can trust Bob more than Criss.\nBut Dave can trust Criss more than Bob.*\n\nFor that, we suggest a system where Alice, Bob, Criss and Dave submit on who trust. \n\nEach of them can submit a record in a distributed and trustworthy database\n(Ergo) so that the others can see in whom they invest their own reputation.\nEach one has an incentive to maintain a good reputation,\nand to do so, they should assign a good reputation only to those they consider better.\n\n**Basic initial real-world economy example:**\n\nThis way, in, for example, an application like Airbnb, the cost of accommodation for a user will be inversely proportional to the reputation assigned to them by the tenant, which may be different from what other tenants assign (they don't have to reach a consensus, so they can rely on different ways to evaluate each other - giving more importance to punctuality than cleanliness, for example)."
    },
    {
      "heading": "**Aligment with the [Ergo Manifiesto](https://ergoplatform.org/en/blog/2021-04-26-the-ergo-manifesto/):**",
      "level": 2,
      "content": "Why is this an *ergonomic system*?\n\nWell, in accordance with Ergo's principles, the system:\n\n- It\u2019s completely decentralized (****Decentralization First****), there's virtually no consensus among parties, as there isn't even a common token to represent reputation across all parties.\n\n- It\u2019s open and auditable (****Open Permissionless and Secure****), as a user can upload a different reputation contract (different from the one presented in this project), and it wouldn't fragment the system. The reputation proofs defined here could point to this new test with a different design as well.\n\n- It\u2019s ****Created for Regular People****, as there are no major entry barriers other than those inherent to the Ergo network.\n\n- It\u2019s focused on remaining cost-competitive ****(Platform for Contractual Money),**** as it allows providing economic agents with evidence of their past good behavior, preserving privacy.\n    - This remains cost-competitive because it allows agents to consider a wider range of options. The lower the quality of reputation systems, the higher the cost of switching between services (e.g., switching from one dentist to another is more expensive if I have no reviews for either; if people share their experiences, there will be more competition).\n    \n- It Has a ****Long-term Focus****, as the development team has not based its approach on short-term vision."
    },
    {
      "heading": "System design",
      "level": 2,
      "content": "Each reputation proof has a token used to reflect the amount of reputation that can be assigned. \nWhen creating a reputation proof, you can either: \n- Generate it from scratch with a new token. \n- Extract it from another reputation proof, so the amount of reputation will be extracted from the previous proof. \n\nEach reputation proof is a Box. \nOnly the users themselves can delegate reputation from their proofs to new proofs they generate. \nHowever, any user can assign reputation to any reputation proof: without transferring the token, \nsimply by locking the value of their proof and entering the proof to which reputation is being assigned as metadata. \nThis way, reputation graphs are created.\n\nThe value of each reputation token is subjective for each user, so everyone must calculate the reputation that their \nreputation proof graph assigns to each object.\n\n**ErgoScript Contract:**\n\nAll reputation proofs have the same script. \n<br>The first two conditions check if the reputation proof assigns reputation \nto an object; if it does, it cannot be spent. \n<br>The second one ensures that the one spending the test is only the wallet with permissions to do so.\n<br>The third one ensures that reputation is delegated only to reputation proofs.\n\n```javascript\n/*\nReputation Proof  -   2Ud2Ryh6MkC8Lstg1BiSE86Vbs7FTBdChEMo2c3ZK3pyGaQoY2Ck9QQiz2n4vWP6\n\n\n    R4 -> owner public key\n    R5 -> Reputation on-chain object\n    R6 -> Reputation off-chain object\n    \n*/\n    // An optional object where the proof assign it's reputation \n    // (it could be different types of data, like other Reputation systems, urls, git repositories, etc).\nSELF.R5[Box].isDefined != true &&\nSELF.R6[(Coll[Byte], Coll[Byte])].isDefined != true &&\n    // \n    // The proof's creator (or, at least, the one chosen by the box's creator) can spend the tokens\n    // Owner's public key.  Without it, the box can't be expended. \nproveDlog(decodePoint(SELF.R4[Coll[Byte]].get)) &&\n    //\n    // Assign them ONLY to other reputation proofs.\nOUTPUTS.forall({(x: Box) => x.propositionBytes == SELF.propositionBytes})\n```\n\n\n**Reputation Trees:**\nAt the core of our system are Reputation Trees. These trees serve as hierarchical repositories of trust, with each tree containing a root Box representing 100% reputation. Within these trees, there are branches and leaves. \nBranches point to other reputation proofs, creating a hierarchy of trust, while leaves represent reputation proofs assigned to external objects in the form of metadata. \nThis structure provides a systematic and scalable approach to reputation management.\n\n<!--\n![reputation_system-example.svg](resources/reputation_system-example.svg)\n-->\n**User-Generated Reputation:**\nA feature of this system is the ability for any user to submit reputation proofs.\nIt's a truly democratic approach to trust, empowering users to assign and transfer reputation.\nMoreover, the system **does not require consensus** for reputation assignments,\nallowing individual users to express their trust independently.\n\n**User Interface:**\nWe've designed an intuitive user interface that simplifies the process of submitting reputation proofs. \nThe \"Generate Reputation Proof\" button allows users to specify the reputation amount from a new token or from another \nreputation proof (if they can spend it). \n\n- If the new Reputation Proof box has reputation object (could be called a pointer to an object too), it will be a leaf \nof the tree. That means that it will be unspendable.\n- If not, the Reputation Proof is only a branch to assign reputation in the future.\n\n**Versatile Use Cases:**\nReputation proofs can be assigned to \nvarious entities, including software, URLs, Git repositories, and more.\n\n- The R5 registry allows assigning to other Ergo\u2019s boxes (probably to other reputation systems).\n  Due to that, it's a Box field.\n- The R6 registry allows assigning to any external object (URLs, Git repositories, etc.).\n   To do this, we consider that the best option is a scheme of (Coll[Byte], Coll[Byte]), \n    where the first part allows specifying the value type, and the second part the value to assign reputation to.\n\n**Scalability and Interoperability:**\nAs the blockchain ecosystem grows, scalability is paramount. Our system is designed to handle an increasing number \nof users and reputation assignments efficiently thanks to the eUTXO paradigm. We also consider interoperability with \nother blockchains and external services to create a seamless user experience.\n\n**Accountability and Determinism:**\nIf the reputation proof is assigning reputation to an object (it has the R5 or R6 registers), the token cannot be spent,\nensuring a direct link between reputation and the object.\nThis restriction enhances accountability and trust in the system."
    },
    {
      "heading": "**Problems not resolved**",
      "level": 2,
      "content": "Unfortunately, these past three days, we haven't been able to have a working version,\nso we've had to settle for a version with demo data.\nNevertheless,\nwe will continue with the development and keep engaging with the community to receive feedback or any assistance.\n\nThere are certain things that we are not able to solve these two days, they are:\n\n- The transaction builder with Fleet SDK:\n    - Actually, we are taking the inputs from all the user\u2019s unspended boxes but, on the UI, he selects a specific \n      reputation proof (a specific box). So, we need to do that:\n        - Solving the usage of the explorer api from off-chain code.\n        - Doing that with Fleet from the browser.\n- On the on-chain side:\n    - The reputation object (or pointer to an object) uses to registers (R5 and R6) because it can have to type: a \n       Box or a Tuple of bytes. That\u2019s because ErgoScript don\u2019t allow to use something like \n       `type AssignedReputation = Box || (Cell[Byte], Cell[Byte])` types. We don\u2019t know if there is a better way to do it.\n    - We would want to limit the number of possible tokens to one, for a more specific contract.\n- On the off-chain side:\n    - We need to develop the `compute_reputation.py` script. It will allow computing the reputation of an object based \n      on the user\u2019s reputation proofs (and from those external proofs to which the user has assigned reputation).\n    - The `extract_unexpended_reputation_proofs.py` script it\u2019s only using random demo data for the user\u2019s unexpended \n      reputation proofs. It has the code to use the api explorer, but it didn't work."
    },
    {
      "heading": "**Future aproaches**",
      "level": 2,
      "content": "This is a long-term project. Due to that, we recognize that reputation management needs to be adaptable.\n\nSome possible branches to expand are:\n\n- The UI allows seeing graphic reputation trees (owned to manage and external to be judged.)\n- Allow to a more complex token/monetary policies on the on-chain side.\n- Each branch of the reputation tree could have its own rules and policies, allowing for customization to meet the \n  unique needs of different communities and contexts. Events within the system can also trigger reputation transfers, \n  creating a dynamic ecosystem. <br>For example:<br>\n        *A reputation proof is directed towards a smart contract. Another reputation proof is directed towards a Git repository (or a specific commit) that serves as an interface to the contract. The second test is dependent on the first one, so if the contract's reputation drops, the interface's reputation will automatically decrease as well. (This could be achieved with a certain structure and monetary policies of the tree).*\n\n\n*Thanks for reading.*\n\n[GitHub repository](https://github.com/jossemii/ergohack-vii)"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/events/pdf/ergohackvii/REPUTATION_SYSTEM.md",
  "processed_at": "2025-05-11T19:49:49.122727",
  "ai_processed": true
}