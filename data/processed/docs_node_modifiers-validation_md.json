{
  "id": "docs_node_modifiers-validation_md",
  "title": "Ergo Modifiers Validation",
  "summary": "This document outlines the consensus-critical validation rules that every node in the Ergo network should perform. The rules cover various aspects of transaction validation, such as the minimum number of inputs and outputs, the maximum number of inputs and data inputs, the requirement for non-negative output values, and the constraint on the sum of output values. The document also mentions that some rules may be disabled later through miner voting via soft forks, and new rules may be added as well. The rules are initially all activated, and those that cannot lead to money printing and are not enforced by serializers may be disabled later.",
  "qa_pairs": [
    {
      "question": "What is the purpose of the Ergo Modifiers Validation section?",
      "answer": "The Ergo Modifiers Validation section contains a list of all consensus-critical validation rules that every node in the network should perform."
    },
    {
      "question": "What is the difference between consensus-critical rules and non-consensus-critical rules?",
      "answer": "Consensus-critical rules are rules that must be enforced by the network, while non-consensus-critical rules may be disabled later by a miner voting via soft forks."
    },
    {
      "question": "What is the maximum number of transaction inputs allowed?",
      "answer": "The maximum number of transaction inputs is 32767."
    },
    {
      "question": "What is the maximum number of transaction data inputs allowed?",
      "answer": "The maximum number of transaction data inputs is 32767."
    },
    {
      "question": "Which modifiers are listed in the transaction validation rules?",
      "answer": "The transaction validation rules list the ErgoTransaction modifier."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Modifiers\n  - Validation\n  - Node\n  - Technical\n  - Consensus\n---"
    },
    {
      "heading": "Ergo Modifiers Validation",
      "level": 1,
      "content": "This section contains a list of all consensus-critical validation rules that every node in the network should perform; rules that are not listed in this table should not be considered consensus-critical and enforced by the network.\n\nEvery rule is enumerated and is initially activated.\n\nRules that could not lead to money printing and are not enforced by serialisers may be disabled later by a miner\nvoting via soft forks, while new rules may also be added at the same time.\n\n\n\n**Transaction validation:**\n\n **Id** | **Validation rule**                                                                                                        | **Soft-forkable** | **Active** | **Modifiers**   \n--------|----------------------------------------------------------------------------------------------------------------------------|-------------------|------------|-----------------\n 100    | A transaction should have at least one input.                                                                              | x            | \u221a     | ErgoTransaction \n 101    | A transaction should have at least one output.                                                                             | x            | \u221a     | ErgoTransaction \n 102    | A number of transaction inputs should not exceed 32767.                                                                    | x            | \u221a     | ErgoTransaction \n 103    | A number transaction data inputs should not exceed 32767.                                                                  | x            | \u221a     | ErgoTransaction \n 104    | A number of transaction outputs should not exceed 32767.                                                                   | x            | \u221a     | ErgoTransaction \n 105    | Erg amount for a transaction output should not be negative.                                                                | x            | \u221a     | ErgoTransaction \n 106    | Sum of transaction output values should not exceed 9223372036854775807.                                                    | x            | \u221a     | ErgoTransaction \n 107    | There should be no duplicate inputs.                                                                                       | x            | \u221a     | ErgoTransaction \n 108    | All token amounts of transaction outputs should be positive.                                                               | x            | \u221a     | ErgoTransaction \n 109    | A number of tokens within a box should not exceed 255 and sum of assets of one type should not exceed 9223372036854775807. | x            | \u221a     | ErgoTransaction \n 111    | Every output of the transaction should contain at least <minValuePerByte * outputSize> nanoErgs.                           | \u221a            | \u221a     | ErgoTransaction \n 112    | Transaction outputs should have creationHeight not exceeding block height.                                                 | x            | \u221a     | ErgoTransaction \n 113    | Every input of the transaction should be in UTXO.                                                                          | x            | \u221a     | ErgoTransaction \n 114    | Every data input of the transaction should be in UTXO.                                                                     | x            | \u221a     | ErgoTransaction \n 115    | Sum of transaction inputs should not exceed 9223372036854775807.                                                           | x            | \u221a     | ErgoTransaction \n 116    | Amount of Ergs in inputs should be equal to amount of Erg in outputs.                                                      | x            | \u221a     | ErgoTransaction \n 117    | For every token, its amount in outputs should not exceed its amount in inputs.                                             | x            | \u221a     | ErgoTransaction \n 119    | Scripts of all transaction inputs should pass verification.                                                                | x            | \u221a     | ErgoTransaction \n 120    | Box size should not exceed 4096.                                                                                           | \u221a            | \u221a     | ErgoTransaction \n 121    | Box proposition size should not exceed 4096.                                                                               | \u221a            | \u221a     | ErgoTransaction \n 122    | Transaction outputs should have non-negative creationHeight.                                                               | x            | \u221a     | ErgoTransaction \n\n\n\n\n**Header validation:**\n\n **Id** | **Validation rule**                                                                                                                        | **Soft-forkable** | **Active** | **Modifiers** \n--------|--------------------------------------------------------------------------------------------------------------------------------------------|-------------------|------------|---------------\n 200    | Genesis header should have genesis parent id.                                                                                              | x            | \u221a     | Header        \n 201    | Genesis header id should be equal to id from the config.                                                                                   | x            | \u221a     | Header        \n 203    | Genesis height should be 1.                                                                                                                | x            | \u221a     | Header        \n 205    | Header timestamp should be greater than the parent's.                                                                                      | x            | \u221a     | Header        \n 206    | A header height should be greater by one than the parent's.                                                                                | x            | \u221a     | Header        \n 207    | A header should contain correct PoW solution.                                                                                              | x            | \u221a     | Header        \n 208    | A header should contain correct required difficulty.                                                                                       | x            | \u221a     | Header        \n 209    | A header height should not be older than current height minus <config.keepVersions>.                                                       | x            | \u221a     | Header        \n 210    | Parent header should not be marked as invalid.                                                                                             | x            | \u221a     | Header        \n 212    | Number of non-zero votes should be <= 2.                                                                                                   | \u221a            | \u221a     | Header        \n 213    | A header votes should contain no duplicates.                                                                                               | x            | \u221a     | Header        \n 214    | A header votes should contain no contradictory votes.                                                                                      | x            | \u221a     | Header        \n 215    | First header of an epoch should not contain a vote for unknown parameter.                                                                  | \u221a            | \u221a     | Header        \n 216    | First v2 header on mainnet at height 417,729 should have ID =  0ba60a7db44877aade553beb05200f7d67b586945418d733e455840d283e0508. | x            | \u221a     | Header        \n\n\n\n\n**Block sections validation:**\n\n **Id** | **Validation rule**                                                       | **Soft-forkable** | **Active** | **Modifiers**                                  \n--------|---------------------------------------------------------------------------|-------------------|------------|------------------------------------------------\n 300    | Double application of a modifier is prohibited.                           | x            | \u221a     | Header, ADProofs, Extension, BlockTransactions \n 302    | Block sections should correspond to the declared header.                  | x            | \u221a     | ADProofs, Extension, BlockTransactions         \n 303    | A header for the block section should not be marked as invalid.           | x            | \u221a     | ADProofs, Extension, BlockTransactions         \n 305    | Block section should correspond to a block header that is not pruned yet. | x            | \u221a     | ADProofs, Extension, BlockTransactions         \n 306    | Size of block transactions section should not exceed <maxBlockSize>.      | \u221a            | \u221a     | BlockTransactions                              \n 307    | Accumulated cost of block transactions should not exceed <maxBlockCost>.  | x            | \u221a     | ErgoTransaction, BlockTransactions             \n\n\n\n\n**Extension validation:**\n\n\n **Id** | **Validation rule**                                                                               | **Soft-forkable** | **Active** | **Modifiers** \n--------|---------------------------------------------------------------------------------------------------|-------------------|------------|---------------\n 400    | Size of extension section should not exceed 32768.                                                | \u221a            | \u221a     | Extension     \n 401    | Interlinks should be packed properly.                                                             | \u221a            | \u221a     | Extension     \n 402    | Interlinks should have the correct structure.                                                     | \u221a            | \u221a     | Extension     \n 403    | Extension fields key length should be 2.                                                          | x            | \u221a     | Extension     \n 404    | Extension field value length should be <= 64.                                                     | \u221a            | \u221a     | Extension     \n 405    | An extension should not contain duplicate keys.                                                   | \u221a            | \u221a     | Extension     \n 406    | Extension of non-genesis block should not be empty.                                               | \u221a            | \u221a     | Extension     \n 407    | Voting for fork could be started only after activation period of a previous soft-fork.            | \u221a            | \u221a     | Extension     \n 408    | At the beginning of the epoch, the extension should contain correctly packed parameters.          | \u221a            | \u221a     | Extension     \n 409    | At the beginning of the epoch, the extension should contain all the system parameters.            | \u221a            | \u221a     | Extension     \n 410    | Versions in header and parameters section should be equal.                                        | \u221a            | \u221a     | Extension     \n 411    | At the beginning of the epoch, the extension should contain correctly packed validation settings. | \u221a            | \u221a     | Extension     \n 412    | At the beginning of the epoch, the extension should contain all the validation settings.          | \u221a            | \u221a     | Extension     \n\n\n\n\n**Block application to state validation:**\n\n **Id** | **Validation rule**                                                        | **Soft-forkable** | **Active** | **Modifiers** \n--------|----------------------------------------------------------------------------|-------------------|------------|---------------\n 500    | Operations against the state AVL+ tree should be successful.               | x            | \u221a     | ErgoFullBlock \n 501    | Calculated AVL+ digest should be equal to one written in the block header. | x            | \u221a     | ErgoFullBlock"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/node/modifiers-validation.md",
  "processed_at": "2025-05-11T19:57:03.414076",
  "ai_processed": true
}