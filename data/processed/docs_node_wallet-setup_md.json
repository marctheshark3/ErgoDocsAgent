{
  "id": "docs_node_wallet-setup_md",
  "title": "Ergo Wallet Setup and Security",
  "summary": "The document provides instructions for setting up and securing the Ergo wallet, which is a built-in feature of the Ergo node. It covers the use of BIP-39 and BIP-32 standards for generating and managing the wallet's seed phrase and private keys. The document explains how to initialize a new wallet or restore from an existing mnemonic, unlock and lock the wallet, and manage keys through the node's REST API. It also highlights the importance of securing the mnemonic phrase and using an optional passphrase for added security.",
  "qa_pairs": [
    {
      "question": "What security standard does the Ergo wallet use to generate private keys?",
      "answer": "The wallet utilizes the BIP-32 standard for Hierarchical Deterministic (HD) Wallets and the BIP-39 standard to generate a master seed from a mnemonic sentence (seed phrase)."
    },
    {
      "question": "What are the options for the length of the mnemonic seed phrase in the Ergo wallet?",
      "answer": "The length of the mnemonic sentence can be 12, 15, 18, 21, or 24 words, corresponding to 128, 160, 192, 224, or 256 bits of security, respectively."
    },
    {
      "question": "How can you restore an Ergo wallet from an existing mnemonic phrase?",
      "answer": "To restore a wallet from an existing mnemonic, use the `/wallet/restore` API endpoint and provide the mnemonic phrase and optional passphrase (if used)."
    },
    {
      "question": "What configuration settings are available for the Ergo wallet?",
      "answer": "Key wallet configuration settings include `seedStrengthBits`, `secretStorage.secretDir`, and `mnemonicPhraseLanguage`."
    },
    {
      "question": "When is the Ergo wallet required to be unlocked?",
      "answer": "The wallet must be unlocked before performing operations such as using the internal miner, signing transactions, and tracking boxes."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Wallet\n  - Setup\n  - Security\n  - Node\n  - API\n  - BIP32\n  - BIP39\n---"
    },
    {
      "heading": "Ergo Wallet Setup and Security",
      "level": 1,
      "content": "The Ergo node includes a built-in wallet function to securely store your private keys and sign transactions. This section provides instructions on setting up and protecting your Ergo node wallet.\n\nThe wallet utilizes the BIP-39 standard to generate a master seed from a mnemonic sentence (seed phrase). This seed is then used to derive private keys according to the BIP-32 standard for Hierarchical Deterministic (HD) Wallets. While you *can* compose your own mnemonic sentence using words from the provided [wordlists](https://github.com/ergoplatform/ergo-wallet/tree/master/src/main/resources/wordlist), it is strongly recommended for security to use a mnemonic generated by a trusted source (like the node itself or a secure hardware wallet).\n\nThe length of the mnemonic sentence determines the security level (entropy): 12, 15, 18, 21, or 24 words correspond to 128, 160, 192, 224, or 256 bits of security, respectively. To restore a wallet from an existing mnemonic, use the `/wallet/restore` API endpoint.\n\nAll wallet interactions with the node are performed through its REST API. Before proceeding, ensure you have [set an API key hash](conf.md#rest-api-settings) in your node's configuration file to protect sensitive API calls."
    },
    {
      "heading": "Configuring the Wallet",
      "level": 2,
      "content": "Wallet-related settings are managed in the `ergo.wallet` section of the node configuration file. Key parameters include:\n\n* `seedStrengthBits`: Specifies the bit-length (entropy) for newly generated seeds. A higher value results in a longer, more secure mnemonic phrase. Options: `128, 160, 192, 224, 256`. Default is usually 128.\n* `secretStorage.secretDir`: Defines the directory where the encrypted wallet file (`wallet.dat`) will be stored.\n* `mnemonicPhraseLanguage`: Sets the language for generating or restoring mnemonic phrases. Options: `\"chinese_simplified\", \"chinese_traditional\", \"english\", \"french\", \"italian\", \"japanese\", \"korean\", \"spanish\"`. Default is \"english\"."
    },
    {
      "heading": "Initializing the Wallet for the First Time",
      "level": 2,
      "content": "When running a node for the first time, you initialize its wallet via the REST API using one of two methods:\n\n1. **Initialize a New Wallet**: The node generates a new seed phrase for you.\n   - **Endpoint**: `POST /wallet/init`\n   - **Request Body**: `{\"pass\": \"YOUR_WALLET_PASSWORD\", \"mnemonicPass\": \"OPTIONAL_PASSPHRASE\"}`\n   - **Action**: Creates a new wallet file encrypted with `YOUR_WALLET_PASSWORD`. The response will contain the newly generated mnemonic phrase \u2013 **save this phrase securely and offline immediately!** The `mnemonicPass` (BIP-39 passphrase) is optional and adds an extra layer of security to the seed derivation. If used, it must be provided every time the seed is restored.\n\n2. **Restore from Existing Mnemonic**: Use a previously generated mnemonic phrase.\n   - **Endpoint**: `POST /wallet/restore`\n   - **Request Body**: `{\"pass\": \"YOUR_WALLET_PASSWORD\", \"mnemonic\": \"word1 word2 word3 ...\", \"mnemonicPass\": \"OPTIONAL_PASSPHRASE\"}`\n   - **Action**: Recreates the wallet state from the provided `mnemonic`. Use the same `mnemonicPass` that was used when the mnemonic was originally generated or used, if any."
    },
    {
      "heading": "Unlocking the Wallet",
      "level": 2,
      "content": "After initialization or restoration, and after every node restart, the wallet must be unlocked before use. To unlock it, make a POST request to `/wallet/unlock` with your wallet password: `{\"pass\": \"YOUR_WALLET_PASSWORD\"}`.\n\nThe wallet must be unlocked to perform operations such as:\n\n* Using the internal miner.\n* Signing transactions.\n* Tracking boxes."
    },
    {
      "heading": "Locking the Wallet",
      "level": 2,
      "content": "The wallet typically locks automatically after a period of inactivity or upon node shutdown, flushing secrets from memory. You can also lock it manually by making a GET request to `/wallet/lock`. Locking the wallet when not actively using it is recommended for security. You will need to unlock it again before performing further operations."
    },
    {
      "heading": "Managing Keys",
      "level": 2,
      "content": "The wallet implements BIP-32, enabling the creation of hierarchical deterministic wallets. During initialization, the master key is derived from the seed. To derive additional keys (and their corresponding addresses) based on specific derivation paths (e.g., following EIP-3 standard paths like `m/44'/429'/0'/0/0`), use the `POST /wallet/deriveKey` endpoint with the desired path in the request body: `{\"derivationPath\": \"m/44'/429'/0'/0/0\"}`.\n\nAlternatively, you can derive the *next* available key in the sequence according to the wallet's internal counter using the `GET /wallet/deriveNextKey` endpoint.\n\nNote: All these wallet operations are performed via the Ergo node's REST API, typically accessed through the Swagger UI or programmatically."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/node/wallet-setup.md",
  "processed_at": "2025-05-11T19:58:16.989108",
  "ai_processed": true
}