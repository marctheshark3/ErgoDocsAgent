{
  "id": "docs_dev_stack_appkit_gradle_md",
  "title": "Gradle",
  "summary": "Gradle is a build tool used for JVM languages and frameworks, including Java and Kotlin. To set up a Gradle project, the steps depend on the platform or framework, such as Android, Spring, or others. The document covers how to add the Ergo Appkit library to a Gradle project, including some additional steps for Android. Appkit provides methods for interacting with the Ergo Explorer API, the Ergo node, building and signing transactions, and various helper functions. The document includes examples and links to further resources to get started with Appkit.",
  "qa_pairs": [
    {
      "question": "What is Gradle?",
      "answer": "Gradle is a build tool used for many JVM languages and frameworks. It can be used to set up and build Java and Kotlin projects, both client-side (for desktop or Android) or server-side applications (for example Spring)."
    },
    {
      "question": "How do you set up a Gradle project for Android?",
      "answer": "To set up a Gradle project for Android, install Android Studio and create a new project with your preferred language."
    },
    {
      "question": "How do you set up a Gradle project for Spring?",
      "answer": "To set up a Gradle project for Spring, use the Spring Initializr to create a new project with your preferred language, and don't forget to select Gradle."
    },
    {
      "question": "How do you add the Ergo Appkit library to a Gradle project?",
      "answer": "To add the Ergo Appkit library to a Gradle project, add the following line to the dependencies block: 'implementation ('org.ergoplatform:ergo-appkit_2.11:4.0.6')'"
    },
    {
      "question": "What can you do with the Ergo Appkit library?",
      "answer": "The Ergo Appkit library provides methods for fetching data from the Ergo Explorer API, interacting with the Ergo Node, building and signing transactions, and handling cryptographic operations."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - Java\n---"
    },
    {
      "heading": "Gradle",
      "level": 1,
      "content": "Gradle is a build tool used for many JVM languages and frameworks. You can use it to set up and build Java and Kotlin projects, both client-side (for desktop or Android) or server-side applications (for example Spring)."
    },
    {
      "heading": "Setting up the Gradle project",
      "level": 2,
      "content": "The first step is setting up a plain Gradle project. How exactly this is done depends on the platform or framework you want to base on.\n\n* Android: Install Android Studio and create a new project with your preferred language\n* Spring: Use the [Spring Initializr](https://start.spring.io/) to create a new project with your preferred language, don't forget to select Gradle. Open the project in the IDE of your choice\n* For other frameworks, refer to their setup or starter guide\n\nWhen that is done, you will find one or more `build.gradle` files that define parameters of your project, most important the libraries your project depends on. Search for a `dependencies` block (for Android, it is in `app/build.gradle`, for Spring in the root-level file). You need to add appkit here. Don't get confused with the `dependencies` block inside `buildscripts`, that's not for the project dependencies, but for dependencies Gradle needs to build the project.\n\nFor **desktop and server-side applications**, it is just one line to add.\n\n    implementation ('org.ergoplatform:ergo-appkit_2.11:4.0.6')\n\nWhen you resync your project now, Gradle fetches Appkit and all needed libraries and add them to your classpath.\n\nThings are a bit more complicated when targeting **Android**. Some older Android versions run an older version of Java, and while Appkit itself is compatible, some of the libraries it uses are not. So you need some more steps to do:\n\nMake sure core library desugaring is enabled by checking if the app's `build.gradle` file contains the needed dependency and option [as described here](https://developer.android.com/studio/write/java8-support#library-desugaring)\n\nAdditionally, you have to tell gradle to exclude the libraries that are not compatible with Android, but to use compatible versions instead. That is done by changing the line above like this:\n\n    implementation ('org.ergoplatform:ergo-appkit_2.11:4.0.6') {\n        exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'\n        exclude group: 'org.bitbucket.inkytonik.kiama', module: 'kiama_2.11'\n    }\n    // kiama needs an own build for JRE7 compatibility\n    implementation \"com.github.MrStahlfelge.kiama:core_2.11:2.1.1\"\n    implementation \"com.github.MrStahlfelge.kiama:library_2.11:2.1.1\"\n    implementation \"org.bouncycastle:bcprov-jdk15to18:1.66\"\n\nAnd there you go!"
    },
    {
      "heading": "What to start with",
      "level": 2,
      "content": "Now you have Appkit enabled in your project, but what can you do now? Appkit provides methods for the following tasks:\n\n* Fetch data from Ergo Explorer API\n* Interact with Ergo Node, both public and private methods\n* Build transactions and sign them\n* Helper methods to handle cryptographics like calculating PK addresses from secrets\n\nSo it is up to your plans what you will use! That's why here is just a brief starter on these topics"
    },
    {
      "heading": "Ergo Explorer API",
      "level": 3,
      "content": "All data available on the [Ergo Explorer](https://explorer.ergoplatform.com/en/) is available through an API as well. Appkit ships with classes defining this API to use with [Retrofit](https://square.github.io/retrofit/). Get started with the following Kotlin code:\n\n    val retrofit = Retrofit.Builder()\n                .baseUrl(RestApiErgoClient.defaultMainnetExplorerUrl)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n\n    val ergoApiService = retrofit.create(DefaultApi::class.java)\n\nYou can call Explorer API methods on the ergoApiService now. Check out Retrofit's documentation on how to interact with it."
    },
    {
      "heading": "Interact with Ergo node, build transactions and sign them",
      "level": 3,
      "content": "While Ergo Explorer is a central service to request information without the need to have the full blockchain, an Ergo node is part of the decentralized blockchain network. The node offers methods to the public, for example submitting a new transaction, while there are also private methods for its owner only to be used with an API key. These methods can be accessed through a `BlockchainContext` that you can obtain with the following code:\n\n        val ergoClient = RestApiErgoClient.create(\n            nodeApiAddress,\n            NetworkType.MAINNET,\n            \"\", // for private methods, give API key here\n            RestApiErgoClient.defaultMainnetExplorerUrl\n        )\n        ergoClient.execute { ctx: BlockchainContext ->\n            // do something here with the blockchain context\n        }\n\nHow to obtain the node address? A few known peers [are listed on the node configuration file](https://github.com/ergoplatform/ergo/blob/e68ce6180b13bffb024cf9e26c7c16a7be70a22c/src/main/resources/mainnet.conf#L43). Make sure to use the correct port to connect to the node API, it is 9053 for Mainnet (e.g. http://213.239.193.208:9053/).\n\nOf course, the most interesting part here is to sign and send transactions with smart contracts. See below for examples."
    },
    {
      "heading": "Helper methods",
      "level": 3,
      "content": "Appkit provides a lot of helper methods to ease a developer's life and not reinvent the wheel that already is in use. For example, you can construct an Ergo address from a mnemonic, or an ErgoTree from an address. Check out the following classes and their inline documentation: `Address`, `BoxOperations`, `ErgoProverBuilder`, `Mnemonic`, `Parameters`"
    },
    {
      "heading": "Examples",
      "level": 2,
      "content": "These examples will help you get started and understand the concepts better.\n\n- For sending ERG, check out the [code used in the Android wallet](https://github.com/MrStahlfelge/ergo-wallet-android/blob/0e4e10d5ad18453ca43948514d73255c567fefd1/app/src/main/java/org/ergoplatform/android/ErgoFacade.kt#L86).\n- An example for a very simple smart contract freezing an amount of ERG to not to be spent before some time expired can be found on [Appkit's main readme](https://github.com/ergoplatform/ergo-appkit/blob/develop/README.md#using-from-java).\n- The [ergoscript by example](https://github.com/ergoplatform/ergoscript-by-example) repository contains two additional smart contract examples (not using Appkit).\n- How you can mint new tokens can be seen in [ergo-dex repo](https://github.com/ergoplatform/ergo-dex/blob/50596a92a465f52904b5d8015e8ae0d62e414176/src/main/scala-2.12/org/ergoplatform/dex/commands/IssueTokenCmd.scala).\n- [ErgoPay Server example](https://github.com/MrStahlfelge/ergopay-server-example/blob/master/src/main/java/org/ergoplatform/ergopay/ErgoPaySampleController.java) builds transactions for minting and burning token and spending a specific box."
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/stack/appkit/gradle.md",
  "processed_at": "2025-05-11T19:33:16.848736",
  "ai_processed": true
}