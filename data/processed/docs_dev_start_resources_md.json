{
  "id": "docs_dev_start_resources_md",
  "title": "Resources",
  "summary": "This document outlines the various resources available for the Ergo blockchain. It covers libraries, SDKs, frameworks, wrappers, and toolkits for developing on Ergo. It also provides information on the Ergo mainnet and testnet explorers, as well as the available APIs, including the Node API, Explorer API, Ergo.Watch API, and TokenJay API.",
  "qa_pairs": [
    {
      "question": "What are the main libraries available on Ergo?",
      "answer": "The main libraries available on Ergo are Appkit (Java) and Sigma-Rust."
    },
    {
      "question": "What are the main frameworks available on Ergo?",
      "answer": "The main frameworks available on Ergo are Headless dApp Framework (Rust), Mosaik (Kotlin), and JDE (JSON)."
    },
    {
      "question": "What are the main wrappers available for Ergo?",
      "answer": "The main wrappers available for Ergo are ErgPy (python-jvm) and ergo-python-appkit."
    },
    {
      "question": "Where can developers find additional dev-tools for Ergo?",
      "answer": "Developers can find additional dev-tools for Ergo on the dev-tools section of the Sigmaverse website."
    },
    {
      "question": "What is the purpose of the resources page on Ergo?",
      "answer": "The purpose of the resources page on Ergo is to outline the resources available on the platform."
    }
  ],
  "sections": [
    {
      "heading": "Resources",
      "level": 1,
      "content": "This page outlines the resources available on Ergo. Also check out the [dev-tools section on sigmaverse](https://sigmaverse.io/)"
    },
    {
      "heading": "Libraries",
      "level": 2,
      "content": ""
    },
    {
      "heading": "SDKs",
      "level": 3,
      "content": "- [Appkit](appkit.md) (Java)\n- [Sigma-Rust](rust.md)"
    },
    {
      "heading": "Frameworks",
      "level": 3,
      "content": "- [Headless dApp Framework](headless.md) (Rust)\n- [Mosaik](mosaik.md) (Kotlin)\n- [JDE](jde.md) (JSON)"
    },
    {
      "heading": "Wrappers",
      "level": 3,
      "content": "- [ErgPy](https://github.com/mgpai22/ergpy) (python-jvm)\n- [ergo-python-appkit](https://github.com/ergo-pad/ergo-python-appkit)"
    },
    {
      "heading": "Toolkits",
      "level": 3,
      "content": "- [Fleet (JS)](https://github.com/capt-nemo429/fleet)"
    },
    {
      "heading": "Blockchain",
      "level": 2,
      "content": ""
    },
    {
      "heading": "Explorer",
      "level": 3,
      "content": "- [Mainnet explorer](https://explorer.ergoplatform.com/)"
    },
    {
      "heading": "Testnet",
      "level": 3,
      "content": "- [Testnet explorer](https://testnet.ergoplatform.com/)\n    - [Using Ergo-Testnet](https://github.com/ergoplatform/ergo/wiki/Ergo-Testnet)\n    - [Testnet Faucet](https://testnet.ergofaucet.org/)"
    },
    {
      "heading": "API",
      "level": 3,
      "content": "- [API Docs](https://api.ergoplatform.com/api/v1/docs/)\n  - [Node API](https://git.io/fjqwb)\n  - [Explorer API](https://git.io/fjqwN)\n  - [Ergo.Watch API](https://api.ergo.watch/docs)\n - [TokenJay API](https://api.tokenjay.app/swagger-ui/index.html;jsessionid=59429AD4DF081E2E3450C2834095D427?attribute=redirectWithRedirectView)"
    },
    {
      "heading": "Test vectors",
      "level": 3,
      "content": "- [Ergo transaction serialization](https://git.io/fjqwX)\n- [Signature scheme](https://github.com/ScorexFoundation/sigmastate-interpreter/blob/develop/interpreter/shared/src/test/scala/sigmastate/crypto/SigningSpecification.scala)"
    },
    {
      "heading": "Utilities",
      "level": 2,
      "content": "- [Miner rewards script](https://github.com/lorien/ergotools) | Simple command-line tool to find miner rewards not spent and form withdrawing transaction requests for them\n- [Ergo P2S Playground](https://wallet.plutomonkey.com/p2s/?source=dHJ1ZQ==) | A web-based tool to quickly get the address corresponding to some script  \n- [ergo-monitoring](https://github.com/SabaunT/ergo-monitoring) | Debug service printing out useful for developers and managers information about ergo blockchain state."
    },
    {
      "heading": "On-Chain Analysis",
      "level": 2,
      "content": "- [Ergo Vision](https://github.com/CryptoCream/ErgoVision) | A wallet visualization tool to be used for investigating transactions and addresses\n- [Ergo Intelligence](https://github.com/Eeysirhc/ergo_intelligence)\n- [Ergo.watch](https://ergo.watch)"
    },
    {
      "heading": "Tools",
      "level": 2,
      "content": "- [Transaction builder](https://thierrym1212.github.io/txbuilder/) |  The application allows you to manipulate Ergo json transactions with a UI and to sign them with Yoroi, or to prepare the JSON for the Swagger API. It is also able to load the JSON of an unsigned transaction to edit it.  | [GitHub](https://github.com/ThierryM1212/transaction-builder/)  | [Video](https://youtu.be/0VhfY7osT2k)"
    },
    {
      "heading": "Burning",
      "level": 2,
      "content": "`4MQyMKvMbnCJG3aJ` is a P2S (Pay-to-Script) representation of \u201cfalse\u201d condition, i.e. the box is unspendable. Hash is written into R4 register of the box, in the explorer \n\n> It looks like `0e2047ee2cbd52be01e0876c3e0b989a0d4d5f8955200b1fab0e6eeb2b182555c2fb`, where `0e` is type descriptor (byte array), `20` is bytestring length (0x20 in hex = 32), `47ee2cbd52be01e0876c3e0b989a0d4d5f8955200b1fab0e6eeb2b182555c2fb` is the hash of the file."
    },
    {
      "heading": "External",
      "level": 2,
      "content": "- [awesome-ergo](https://github.com/ergoplatform/awesome-ergo)\n- [ergonaut.space](https://ergonaut.space/)\n- [ergosites.github](https://ergosites.github.io/)\n- [ErgoWiki](https://github.com/ergoplatform/ergo/wiki) | The official ergoplatform GitHub wiki\n- [ergotutorials.com](https://ergotutorials.com/)"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/start/resources.md",
  "processed_at": "2025-05-11T19:37:07.220181",
  "ai_processed": true
}