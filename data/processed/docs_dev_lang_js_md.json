{
  "id": "docs_dev_lang_js_md",
  "title": "JavaScript & TypeScript",
  "summary": "The document provides an overview of JavaScript and TypeScript development for the Ergo blockchain. It highlights the various libraries and frameworks available, including sigma-rust (with WebAssembly bindings), Appkit, Sigma.js, and Fleet, which enable developers to interact with the Ergo blockchain. The document also includes a section on tutorials and resources, covering topics such as dApp development, address generation, and transaction creation using these tools.",
  "qa_pairs": [
    {
      "question": "What are the key JavaScript and TypeScript libraries and frameworks for interacting with the Ergo blockchain?",
      "answer": "The key libraries and frameworks include sigma-rust (via WebAssembly), AppKit, Sigma.JS, and Fleet."
    },
    {
      "question": "What is the purpose of the AppKit framework?",
      "answer": "AppKit was designed as an abstraction layer on top of Sigma, providing stable dApp-facing APIs while allowing freedom on the core Sigma level."
    },
    {
      "question": "What is the role of Sigma.JS in the Ergo ecosystem?",
      "answer": "Sigma.JS is a JavaScript port of the sigmastate-interpreter, playing a similar role for JavaScript/TypeScript as Fleet."
    },
    {
      "question": "What are some practical examples and tutorials available for JavaScript and TypeScript Ergo development?",
      "answer": "Examples include the dAppStep documentation, a dApp Development Course, a video tutorial on the NightOwl dApp Connector, and demos for address generation and transaction creation using sigma-rust and TypeScript."
    },
    {
      "question": "What are some additional resources for JavaScript and TypeScript Ergo development?",
      "answer": "Resources include the Ergo-Raffle-Bot GitHub project, the ErgoScript.js video, the Ergo Raffle documentation, and the hypo10use/quid-games Angular project."
    }
  ],
  "sections": [
    {
      "heading": "Introduction",
      "level": 0,
      "content": "---\ntags:\n  - JavaScript\n  - TypeScript\n---"
    },
    {
      "heading": "JavaScript & TypeScript",
      "level": 1,
      "content": "JavaScript and TypeScript developers can interact with the Ergo blockchain using various libraries and frameworks. Notably, [JS/TS bindings for sigma-rust](sigma-rust.md#bindings) (via WebAssembly) provide core blockchain interaction capabilities.\n\n[Appkit](appkit.md) was designed as an abstraction layer on top of [Sigma](sigmastate-interpreter.md). This gives a lot of freedom on the core level in Sigma, while keeping [dApp-facing APIs](api.md) stable.\n\nWith the availability of [Sigma.js](sigmajs.md), [Fleet](fleet.md) can play the same role for JS/TS."
    },
    {
      "heading": "Frameworks",
      "level": 2,
      "content": "::cards::\n\n[\n  {\n    \"title\": \"Fleet\",\n    \"content\": \"Lets you easily create [Ergo transactions](transactions.md) with a pure JS library.\",\n    \"url\": \"../stack/fleet.md\"\n  },\n  {\n    \"title\": \"Sigma.JS\",\n    \"content\": \"JavaScript port of the sigmastate-interpreter\",\n    \"url\": \"../lib/sigmajs.md\"\n  },\n  {\n    \"title\": \"AppKit\",\n    \"content\": \"can be configured to run JavaScript under GraalVM\",\n    \"url\": \"../stack/appkit.md\"\n  },\n  {\n    \"title\": \"sigma-rust (via WASM)\",\n    \"content\": \"Core Rust library with JS/TS bindings available via WebAssembly.\",\n    \"url\": \"../stack/sigma-rust.md#bindings\"\n  }\n]\n\n::/cards::"
    },
    {
      "heading": "Tutorials",
      "level": 2,
      "content": "::cards::\n\n[\n  {\n    \"title\": \"\ud83d\udd17 dAppStep Docs\",\n    \"content\": \"include many practical examples with Javascript and Nodejs that will help you to understand to implement different aspects of [dapp functionality](get-started.md) on Ergo\",\n    \"url\": \"https://www.dappstep.com/\"\n  },\n  {\n    \"title\": \"\ud83d\udd17 dApp Development Course\",\n    \"content\": \"\",\n    \"url\": \"https://www.youtube.com/watch?v=uC6QO3I4m8o&list=PLzY-irO3z3G8FVDifned2NMFc-PgQqnny\"\n  },\n  {\n    \"title\": \"\ud83d\udcf9 Video Tutorial\",\n    \"content\": \"[NightOwl dApp Connector](dApp.md) React Package\",\n    \"url\": \"https://twitter.com/NightOwlCasino/status/1529452399475179520\"\n  },\n  {\n    \"title\": \"Address Generation Demo\",\n    \"content\": \"using sigma-rust and TypeScript\",\n    \"url\": \"https://github.com/ergoplatform/sigma-rust/blob/develop/bindings/ergo-lib-wasm/examples/address-generation-demo/README.md\"\n  },\n  {\n    \"title\": \"Create Transaction Demo\",\n    \"content\": \"using sigma-rust and TypeScript\",\n    \"url\": \"https://github.com/ergoplatform/sigma-rust/blob/develop/bindings/ergo-lib-wasm/examples/create-transaction-demo/README.md\"\n  },\n\n]\n\n::/cards::"
    },
    {
      "heading": "Resources",
      "level": 2,
      "content": "- [Ergo-Raffle-Bot](https://github.com/zkastn/ergo-raffle-bot) Github\n- [ErgoScript.js](https://www.youtube.com/watch?v=_jwMI8M_vrs)\n- The Ergo Raffle [documentation](https://github.com/ErgoRaffle/raffle-documentation) provides a detailed description of their implementation. \n- [hypo10use/quid-games](https://github.com/hypo10use/quid-games) (Angular)"
    }
  ],
  "source": "https://github.com/ergoplatform/ergodocs",
  "file_path": "docs/dev/lang/js.md",
  "processed_at": "2025-05-11T19:21:39.459806",
  "ai_processed": true
}