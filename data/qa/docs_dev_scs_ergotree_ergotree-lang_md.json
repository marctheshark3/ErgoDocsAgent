[
  {
    "question": "What is the primary purpose of the ErgoTree language?",
    "answer": "ErgoTree is a typed, call-by-value, higher-order functional language without recursion that is used to specify the semantics of the Ergo blockchain platform."
  },
  {
    "question": "What are the key features of the ErgoTree language?",
    "answer": "ErgoTree supports single-assignment blocks, tuples, optional values, indexed collections with higher-order operations, short-circuiting logical operations, and ternary if-else expressions with lazy branches."
  },
  {
    "question": "How is the semantics of ErgoTree specified?",
    "answer": "The semantics of ErgoTree are specified by first translating it to a lower-level language called Core-\u03bb and then providing its denotational evaluation semantics."
  },
  {
    "question": "What is the purpose of the lowering process from ErgoTree to Core-\u03bb?",
    "answer": "The lowering process from ErgoTree to Core-\u03bb is used to provide a more formal and lower-level specification of the semantics of the ErgoTree language."
  },
  {
    "question": "How are n-ary lambdas transformed in the lowering process?",
    "answer": "All n-ary lambdas where n > 1 are transformed into single-argument lambdas using tupled arguments during the lowering process from ErgoTree to Core-\u03bb."
  }
]