{
  "title": "Video Transcript",
  "source_url": "docs/archive/notes.md",
  "summary": "## Video Transcript\n\n- A UTXO platform like Bitcoin\n- Advanced scripting capabilities using Ergoscript\n    - Functional programming using scala-like syntax\n        - `INPUTS.exist({utxo:Box} => utxo.value >= 100})`\n    - Conditional statements `If (condition) {block1} else {block2}`\n    - Store data in [registers](registers.md) of UTXO (up to 10 registers)\n- Enriched context\n    - Allows multistage contracts using transaction chaining. ### Ergo\u2019s approach\n\nThis is essentially the approach that Ergo takes, providing superior support for real-world financial agreements. It does this through:\n\n1. Support for multi-stage contracts ([watch details for developers](https://www.youtube.com/watch?v=g3FlM_WOwBU)) 2.",
  "keywords": [
    "video",
    "transcript",
    "utxo",
    "platform",
    "bitcoin",
    "scripting",
    "capability",
    "ergoscript",
    "programming",
    "scala",
    "syntax",
    "inputs.exist({utxo",
    "utxo.value",
    "statement",
    "condition",
    "block1",
    "block2",
    "store",
    "datum",
    "registers](registers.md",
    "register",
    "context",
    "allows",
    "multistage",
    "contract",
    "transaction",
    "ergo",
    "approach",
    "support",
    "world",
    "agreement",
    "detail",
    "developers](https://www.youtube.com",
    "watch?v",
    "g3flm_wowbu",
    "level",
    "language",
    "description",
    "logic",
    "verification",
    "security",
    "guarantee",
    "chepurnoy",
    "status/1239936086106935296",
    "month",
    "network",
    "easy",
    "oracle",
    "creation",
    "signature",
    "scheme",
    "blockchain",
    "functionality",
    "defi",
    "dapps",
    "ethereum",
    "delay",
    "lack",
    "capacity",
    "solution",
    "block",
    "centralisation",
    "miner",
    "storage",
    "cycle",
    "number",
    "validator",
    "throughput",
    "sharding",
    "implementation",
    "composability",
    "shard",
    "project",
    "purpose",
    "result",
    "loss",
    "developer",
    "development",
    "space",
    "proposal",
    "decentralisation",
    "meantime",
    "concept",
    "gain",
    "sport",
    "area",
    "compound",
    "effect",
    "design",
    "principle",
    "choice",
    "efficiency",
    "rent](https://ergoplatform.org",
    "blog/2020_04_21_ergo_positioning/",
    "chain",
    "garbage",
    "collection",
    "bloat",
    "term",
    "cost",
    "mining",
    "sustainability",
    "nipopows",
    "proof",
    "work",
    "clients](https://ergoplatform.org",
    "blog/2020_05_1_spv_security/",
    "nodes](https://ergoplatform.org",
    "blog/2020_05_08_lite_full_nodes/",
    "barrier",
    "language](https://ergoplatform.org",
    "docs",
    "ergoscript.pdf",
    "turing",
    "consequence",
    "sigma",
    "protocols](https://ergoplatform.org",
    "blog/2020_03_16_ergo_sigma/",
    "case",
    "stake",
    "load",
    "foothold",
    "time",
    "technology",
    "generation",
    "upgrade"
  ],
  "sections": [
    {
      "heading": "Video Transcript",
      "content": "A UTXO platform like Bitcoin\nAdvanced scripting capabilities using Ergoscript\nFunctional programming using scala-like syntax\nINPUTS.exist({utxo:Box} => utxo.value >= 100})\n\n\nConditional statements If (condition) {block1} else {block2}\nStore data in registers of UTXO (up to 10 registers)\n\n\nEnriched context\nAllows multistage contracts using transaction chaining."
    },
    {
      "heading": "Ergo\u2019s approach",
      "content": "This is essentially the approach that Ergo takes, providing superior support for real-world financial agreements. It does this through:\nSupport for multi-stage contracts (watch details for developers)\nA simple high-level language, ErgoScript, enabling clear descriptions of contractual logic\nSupport for formal verification of contracts for improved security guarantees (Ergo Platform deployed its first formally verified p2p crowdfunding contract just three months after the network launched)\nEasy Oracle creation\nNative support for complex signature schemes\nIn short, creating financial contracts on the blockchain isn\u2019t just about the functionality you provide. It\u2019s about making that functionality safe and accessible, as well as powerful. Ergo achieves this and more.\nDeFi dApps have overloaded the Ethereum blockchain, causing long delays and soaring fees for transactions. Ethereum and many other platforms besides have researched and implemented fixes to address the lack of capacity. However, all of the solutions are imperfect in one way or another. Larger blocks are the obvious but clumsy fix, resulting in centralisation as fewer miners can afford the bandwidth, storage and CPU cycles to participate. Reducing the number of block validators \u2013 another approach taken to increase throughput \u2013 also necessarily centralises the blockchain. Sharding, while potentially very promising, has yet to be implemented successfully, and in some proposed implementations, breaks atomic composability because shards cannot communicate seamlessly.\nThus many of the ways projects seek to ensure their blockchains are fit for purpose result in greater centralisation or loss of critical functionality.\nMarginal gains\nErgo\u2019s developers are watching developments in the DeFi space closely, especially some of the proposals that aim to scale blockchains while maintaining security, decentralisation and atomic composability. In the meantime, there is much that can be done to improve blockchain capacity. Th..."
    }
  ],
  "qa_pairs": []
}