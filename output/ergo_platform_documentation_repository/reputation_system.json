{
  "title": "Reputation System",
  "source_url": "docs/events/pdf/ergohackvii/REPUTATION_SYSTEM.md",
  "summary": "# Reputation System\n\n## Introduction\n\nOur purpose to the Ergohack-VII is reputation system. A reputation system addresses a fundamental need in the blockchain ecosystem - trust. Trust is essential in any ecosystem, and our system aims to bridge the trust gap by providing a decentralized, user-driven mechanism for assigning and transferring reputation. **Trust and Reputation:**\n\nTrust is the foundation of any functional ecosystem, including the digital world of blockchain. In this space, trust is equally vital.",
  "keywords": [
    "reputation",
    "system",
    "introduction",
    "purpose",
    "ergohack",
    "need",
    "blockchain",
    "ecosystem",
    "trust",
    "user",
    "mechanism",
    "foundation",
    "world",
    "space",
    "confidence",
    "entity",
    "contract",
    "address",
    "chain",
    "approach",
    "hand",
    "application",
    "peer",
    "version",
    "airbnb",
    "uber",
    "platform",
    "function",
    "company",
    "network",
    "agent",
    "host",
    "tenant",
    "driver",
    "passenger",
    "defi",
    "protocol",
    "bridge",
    "trustlessness",
    "ergo",
    "number",
    "tool",
    "variable",
    "value",
    "risk",
    "answer",
    "other",
    "community",
    "role",
    "part",
    "review",
    "feedback",
    "opinion",
    "project",
    "web3",
    "page",
    "twitter",
    "youtube",
    "problem",
    "explanation",
    "characteristic",
    "consensus",
    "alice",
    "criss",
    "dave",
    "record",
    "database",
    "incentive",
    "economy",
    "example",
    "cost",
    "accommodation",
    "importance",
    "punctuality",
    "cleanliness",
    "aligment",
    "manifiesto](https://ergoplatform.org",
    "blog/2021",
    "accordance",
    "principle",
    "decentralization",
    "first",
    "party",
    "token",
    "open",
    "permissionless",
    "secure",
    "proof",
    "test",
    "design",
    "regular",
    "people",
    "entry",
    "barrier",
    "contractual",
    "money",
    "evidence",
    "behavior",
    "privacy",
    "range",
    "option",
    "quality",
    "switching",
    "service",
    "dentist",
    "experience",
    "competition",
    "term",
    "focus",
    "development",
    "team",
    "vision",
    "amount",
    "scratch",
    "metadata",
    "graph",
    "assign",
    "object",
    "ergoscript",
    "script",
    "condition",
    "wallet",
    "permission",
    "javascript",
    "owner",
    "type",
    "datum",
    "repository",
    "self.r6[(coll[byte",
    "creator",
    "provedlog(decodepoint(self.r4[coll[byte]].get",
    "outputs.forall({(x",
    "x.propositionbytes",
    "self.propositionbytes",
    "trees",
    "core",
    "tree",
    "root",
    "branch",
    "leave",
    "hierarchy",
    "form",
    "structure",
    "management",
    "reputation_system",
    "example.svg](resources",
    "example.svg",
    "feature",
    "ability",
    "assignment",
    "interface",
    "process",
    "generate",
    "button",
    "pointer",
    "leaf",
    "future",
    "versatile",
    "cases",
    "software",
    "registry",
    "field",
    "scheme",
    "coll[byte",
    "scalability",
    "interoperability",
    "thank",
    "paradigm",
    "accountability",
    "determinism",
    "register",
    "link",
    "restriction",
    "demo",
    "assistance",
    "thing",
    "transaction",
    "builder",
    "fleet",
    "input",
    "usage",
    "explorer",
    "code",
    "browser",
    "side",
    "tuple",
    "byte",
    "assignedreputation",
    "cell[byte",
    "compute_reputation.py",
    "extract_unexpended_reputation_proofs.py",
    "aproache",
    "policy",
    "rule",
    "customization",
    "context",
    "event",
    "transfer",
    "example:<br",
    "commit",
    "reading",
    "jossemii"
  ],
  "sections": [
    {
      "heading": "Introduction",
      "content": "Our purpose to the Ergohack-VII is reputation system. A reputation system addresses a fundamental need in the blockchain ecosystem - trust. Trust is essential in any ecosystem, and our system aims to bridge the trust gap by providing a decentralized, user-driven mechanism for assigning and transferring reputation.\nTrust and Reputation:\nTrust is the foundation of any functional ecosystem, including the digital world of blockchain.\nIn this space, trust is equally vital.\nUsers must have confidence in the entities they interact with,\nwhether it's smart contracts, addresses, URLs, or other off-chain entities.\nThis reputation system aims to establish and maintain this trust.\nWhy is it necessary?\nA reputation system can provide interesting approaches in a blockchain ecosystem.\nOn one hand, certain applications require it: \npeer-to-peer versions of Airbnb, Uber, or similar platforms, as the central function of the company \n(in the current versions) is to provide that \nreputation network among interacting agents (hosts or tenants, drivers and passengers, etc.)\nOn the other hand, current applications (DeFi protocols, bridges, etc.) may not directly require a reputation system, but nonetheless, it is highly necessary.\nIt is necessary because blockchain is based on trustlessness. \nIf we consider that an ecosystem (of a peer-to-peer network like Ergo) is enriched by the number of tools it possesses \n(among other variables), what value do these tools have if users cannot trust them? \nHow does a user know which ones are reliable and which are not? \nHow does a user know which contracts, URLs, or whatever else they can use without taking too much risk?\nThe answer is: based on what others say, meaning the community plays a crucial role. \nFor this, two important parts are needed:\n1. The tools should be open and auditable. \n2. A platform for sharing reviews, feedback, or opinions about these tools. \nThis is where this project aims to help. \nBecause currently, a user decides whether to ..."
    },
    {
      "heading": "Aligment with the Ergo Manifiesto:",
      "content": "Why is this an ergonomic system?\nWell, in accordance with Ergo's principles, the system:\nIt\u2019s completely decentralized (*Decentralization First*), there's virtually no consensus among parties, as there isn't even a common token to represent reputation across all parties.\n\n\nIt\u2019s open and auditable (*Open Permissionless and Secure*), as a user can upload a different reputation contract (different from the one presented in this project), and it wouldn't fragment the system. The reputation proofs defined here could point to this new test with a different design as well.\n\n\nIt\u2019s *Created for Regular People*, as there are no major entry barriers other than those inherent to the Ergo network.\n\n\nIt\u2019s focused on remaining cost-competitive *(Platform for Contractual Money),* as it allows providing economic agents with evidence of their past good behavior, preserving privacy.\n\nThis remains cost-competitive because it allows agents to consider a wider range of options. The lower the quality of reputation systems, the higher the cost of switching between services (e.g., switching from one dentist to another is more expensive if I have no reviews for either; if people share their experiences, there will be more competition).\n\n\n\nIt Has a *Long-term Focus*, as the development team has not based its approach on short-term vision."
    },
    {
      "heading": "System design",
      "content": "Each reputation proof has a token used to reflect the amount of reputation that can be assigned. \nWhen creating a reputation proof, you can either: \n- Generate it from scratch with a new token. \n- Extract it from another reputation proof, so the amount of reputation will be extracted from the previous proof.\nEach reputation proof is a Box. \nOnly the users themselves can delegate reputation from their proofs to new proofs they generate. \nHowever, any user can assign reputation to any reputation proof: without transferring the token, \nsimply by locking the value of their proof and entering the proof to which reputation is being assigned as metadata. \nThis way, reputation graphs are created.\nThe value of each reputation token is subjective for each user, so everyone must calculate the reputation that their \nreputation proof graph assigns to each object.\nErgoScript Contract:\nAll reputation proofs have the same script. \nThe first two conditions check if the reputation proof assigns reputation \nto an object; if it does, it cannot be spent. \nThe second one ensures that the one spending the test is only the wallet with permissions to do so.\nThe third one ensures that reputation is delegated only to reputation proofs.\n```javascript\n/*\nReputation Proof  -   2Ud2Ryh6MkC8Lstg1BiSE86Vbs7FTBdChEMo2c3ZK3pyGaQoY2Ck9QQiz2n4vWP6\nR4 -> owner public key\nR5 -> Reputation on-chain object\nR6 -> Reputation off-chain object\n*/\n    // An optional object where the proof assign it's reputation \n    // (it could be different types of data, like other Reputation systems, urls, git repositories, etc).\nSELF.R5[Box].isDefined != true &&\nSELF.R6[(Coll[Byte], Coll[Byte])].isDefined != true &&\n    // \n    // The proof's creator (or, at least, the one chosen by the box's creator) can spend the tokens\n    // Owner's public key.  Without it, the box can't be expended. \nproveDlog(decodePoint(SELF.R4[Coll[Byte]].get)) &&\n    //\n    // Assign them ONLY to other reputation proofs.\nOUTPUTS.forall({(x: Box) =>..."
    },
    {
      "heading": "Problems not resolved",
      "content": "Unfortunately, these past three days, we haven't been able to have a working version,\nso we've had to settle for a version with demo data.\nNevertheless,\nwe will continue with the development and keep engaging with the community to receive feedback or any assistance.\nThere are certain things that we are not able to solve these two days, they are:\nThe transaction builder with Fleet SDK:\nActually, we are taking the inputs from all the user\u2019s unspended boxes but, on the UI, he selects a specific \n  reputation proof (a specific box). So, we need to do that:\nSolving the usage of the explorer api from off-chain code.\nDoing that with Fleet from the browser.\n\n\n\n\nOn the on-chain side:\nThe reputation object (or pointer to an object) uses to registers (R5 and R6) because it can have to type: a \n   Box or a Tuple of bytes. That\u2019s because ErgoScript don\u2019t allow to use something like \n   type AssignedReputation = Box || (Cell[Byte], Cell[Byte]) types. We don\u2019t know if there is a better way to do it.\nWe would want to limit the number of possible tokens to one, for a more specific contract.\n\n\nOn the off-chain side:\nWe need to develop the compute_reputation.py script. It will allow computing the reputation of an object based \n  on the user\u2019s reputation proofs (and from those external proofs to which the user has assigned reputation).\nThe extract_unexpended_reputation_proofs.py script it\u2019s only using random demo data for the user\u2019s unexpended \n  reputation proofs. It has the code to use the api explorer, but it didn't work."
    },
    {
      "heading": "Future aproaches",
      "content": "This is a long-term project. Due to that, we recognize that reputation management needs to be adaptable.\nSome possible branches to expand are:\nThe UI allows seeing graphic reputation trees (owned to manage and external to be judged.)\nAllow to a more complex token/monetary policies on the on-chain side.\nEach branch of the reputation tree could have its own rules and policies, allowing for customization to meet the \n  unique needs of different communities and contexts. Events within the system can also trigger reputation transfers, \n  creating a dynamic ecosystem. For example:\nA reputation proof is directed towards a smart contract. Another reputation proof is directed towards a Git repository (or a specific commit) that serves as an interface to the contract. The second test is dependent on the first one, so if the contract's reputation drops, the interface's reputation will automatically decrease as well. (This could be achieved with a certain structure and monetary policies of the tree).\nThanks for reading.\nGitHub repository"
    }
  ],
  "qa_pairs": []
}