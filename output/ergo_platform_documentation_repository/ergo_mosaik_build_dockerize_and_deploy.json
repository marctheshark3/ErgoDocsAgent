{
  "title": "Ergo Mosaik: Build, dockerize and deploy",
  "source_url": "docs/dev/stack/mosaik/mosaik-docker-flux.md",
  "summary": "# Ergo Mosaik: Build, dockerize and deploy \n\nIn our Mosaik tutorial series, we've built a Mosaik app using Spring Boot. It runs perfectly on our\nlocal machine, but what we really want is other people enjoying our application. These people might \nnot want to deal with Gradle and Git, so let's see how we can bring our app to them! All examples here are done to our Mosaik example app we've built in the tutorial series. You can \nfind the [repository on GitHub](https://github.com/MrStahlfelge/mosaik-tutorial-series).",
  "keywords": [
    "ergo",
    "mosaik",
    "build",
    "series",
    "spring",
    "boot",
    "machine",
    "people",
    "application",
    "gradle",
    "example",
    "repository",
    "github](https://github.com",
    "mrstahlfelge",
    "tutorial",
    "kotlin",
    "part",
    "file",
    "java",
    "archive",
    "thing",
    "language",
    "desktop",
    "server",
    "system",
    "prerequisite",
    "runtime",
    "environment",
    "gradlew",
    "bootjar",
    "command",
    "subdirectory",
    "project",
    "name",
    "version",
    "case",
    "mosaikapp-0.0.1-snapshot.jar",
    "-jar",
    "network",
    "docker",
    "container",
    "docker](https://docs.docker.com/",
    "image",
    "user",
    "flux](https://runonflux.io/",
    "daps",
    "text",
    "root",
    "level",
    "repo",
    "content",
    "syntax",
    "dockerfile:1",
    "eclipse",
    "temurin:17",
    "jammy",
    "copy",
    "libs",
    "mosaikapp-0.0.1",
    "snapshot.jar",
    "expose",
    "java\",\"-jar\",\"/app.jar",
    "line",
    "definition",
    "information",
    "page](https://hub.docker.com/_/eclipse",
    "temurin",
    "entry",
    "point",
    "port",
    "define",
    "docs](https://docs.docker.com/",
    "mosaikappexample",
    "character",
    "directory",
    "parameter",
    "dockerhub",
    "repository](https://hub.docker.com/",
    "flux",
    "provider",
    "cryptocurrency",
    "step",
    "guide](https://jetpack2.app.runonflux.io/#/launch",
    "detail",
    "service",
    "guide",
    "care",
    "replace",
    "127.0.0.1:8080",
    "source",
    "owner",
    "zelcore",
    "domain",
    "process",
    "instance",
    "processor",
    "course",
    "time",
    "performance",
    "problem",
    "space",
    "size",
    "hoster"
  ],
  "sections": [
    {
      "heading": "Ergo Mosaik: Build, dockerize and deploy",
      "content": "In our Mosaik tutorial series, we've built a Mosaik app using Spring Boot. It runs perfectly on our\nlocal machine, but what we really want is other people enjoying our application. These people might \nnot want to deal with Gradle and Git, so let's see how we can bring our app to them!\nAll examples here are done to our Mosaik example app we've built in the tutorial series. You can \nfind the repository on GitHub."
    },
    {
      "heading": "Building the jar",
      "content": "Although we used Kotlin to write parts of our application, it compiles to a plain JAR file - a \nJava ARchive. That is a good thing: Java is a widely used language for applications and runs on all\ndesktop and server systems. The only prerequisite to run a JAR file is installing a JRE - a Java \nRuntime Environment - first.\nBuilding the jar file for your Mosaik app based on Spring Boot is quite simple: You do it with the\ngradlew bootJar command. When this finished, you will find your compiled jar in the build/libs \nsubdirectory. It is named with the project name and version, so in our case it is \nmosaikapp-0.0.1-SNAPSHOT.jar. Try running it with java -jar mosaikapp-0.0.1-SNAPSHOT.jar: Your \napplication starts up and the Mosaik app is served on your local network.\nYou can now give this JAR file to other people to run it, or run it on a server. For running it on \na server, it often is needed to pack the application into a Docker container. We'll do that next!"
    },
    {
      "heading": "Dockerizing the jar",
      "content": "Docker is an application to package and run your application within its\nown predefined container. You already know that you need a JRE to run the application. With Docker, \nyou can build an image with an installed Java and your application, and with predefined commands to \nrun your application. This is not aiming to end users: for end users it is better to download JRE\nand run your application manually. But on servers, it is very good to have an image defining what to\nspin up and how, and Docker is usually available. It is also prerequisite to host your application \non Flux, which is a natural fit for dAps and Ergo is partnering with.\nTo dockerize your application, place a plain text file named dockerfile on the root level of your \nMosaik app repo (next to gradlew and build.gradle files) with the following content:\n# syntax=docker/dockerfile:1\n    FROM eclipse-temurin:17-jdk-jammy\n    COPY build/libs/mosaikapp-0.0.1-SNAPSHOT.jar app.jar\n    EXPOSE 8080\n    ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\nThe first line is defining the docker file syntax and not interesting for us. The second line is\nthe most powerful one: It defines that our Docker image will built up on the definitions of a \nDocker image called eclipse-temurin:17-jdk-jammy - it is an image shipping a Java 17 JDK. \nFind more information on the project page.\nThe third line copies our jar we've built before into the Docker image, and the last line defines\nrunning it is the \"entry point\" to the container image.\nOur Spring Boot server runs on port 8080, so line 4 defines that this port is exposed when the image\nruns in a Docker container.\nWith this file, we can build a Docker image. You'll need to install Docker on your system for this.\nYou'll find information how to do so on Docker Docs. When Docker is \ninstalled, you can build the Docker image with a command like the following\ndocker build -t mosaikappexample:latest .\nDon't miss the last character (point), it defines that docker build runs in the current directo..."
    },
    {
      "heading": "Deploy on Flux",
      "content": "You can deploy your jar or docker image on any hosting provider. We emphasize Flux here because it\nis decentralized, can be paid with the Flux cryptocurrency and is very inexpensive for a Mosaik app.\nFlux provides a step by step guide how to deploy an example \napp on their service. Besides the Docker image from the step before, you'll need a Zel ID and \naround 1 USD in Flux.\nFollow the Flux guide to register your app, but take care on the following steps:"
    },
    {
      "heading": "App name",
      "content": "The app name defines on which URL your Mosaik app will be available later. Replace 127.0.0.1:8080\nwith this URL in your app source before building the Docker image."
    },
    {
      "heading": "Owner / Zel ID",
      "content": "Don't confuse Zel ID with your ZelCore log in name. You find your Zel ID on the Zel ID app."
    },
    {
      "heading": "Run command",
      "content": "You can leave it blank, our Docker image already defines its run command."
    },
    {
      "heading": "Public port",
      "content": "You must enter a port here. Just enter 31000."
    },
    {
      "heading": "Domains",
      "content": "Leave it blank"
    },
    {
      "heading": "Private ports",
      "content": "Enter 8080 here, as this was the port our Spring Boot process is listening on."
    },
    {
      "heading": "Instances",
      "content": "You can leave it at 3"
    },
    {
      "heading": "Processors",
      "content": "Your Mosaik app will perform okay on 0.1 processors, but of course it will be three times faster \nwith 0.3 processors. Go for 0.1 if you want it as cheap as possible, or more if you want a better\nperformance."
    },
    {
      "heading": "RAM",
      "content": "The Java process will take around 300 MB of RAM, so give it 1000 here to be safe to not run into \nproblems."
    },
    {
      "heading": "SSD space",
      "content": "Our image is around 750 MB in size, so give it 2 GB here to be safe."
    },
    {
      "heading": "Deploy on other hosters",
      "content": "If you deployed to other hosters, feel free to enhance this guide."
    }
  ],
  "qa_pairs": []
}