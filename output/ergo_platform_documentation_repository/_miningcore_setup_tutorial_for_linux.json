{
  "title": "\ud83e\uddf1 MiningCore Setup Tutorial for Linux",
  "source_url": "docs/mining/setup/miningcore.md",
  "summary": "---\ntags:\n  - Mining Core\n  - miningcore\n  - Pool Setup\n  - Linux\n  - PostgreSQL\n  - Guide\n---\n\n# \ud83e\uddf1 MiningCore Setup Tutorial for Linux\n\n> \ud83d\udca1 If you're using **Windows 10**, see the [Windows Tutorial](pool_win.md)\n\n---\n\n## Step 1: Download MiningCore\n\n- Clone Mining Core from [GitHub](https://github.com/oliverw/miningcore)\n\nRequirements:\n\n- You must have a working [**PostgreSQL** database](https://www.postgresql.org/download/)\n- Ensure you meet all dependencies from the [README](https://github.com/oliverw/miningcore/blob/master/README.md)\n- Avoid Docker unless you are confident managing containers\n\n---\n\n## Step 2: Install and Configure PostgreSQL\n\n- For production environments:\n      - Monitor I/O, disk, CPU, and memory \u2014 MiningCore's API can put heavy load on your DB\n      - Keep all PostgreSQL settings default for now\n- [Reference setup guide](https://www.postgresqltutorial.com/install-postgresql/)\n\n---\n\n##  Step 3: Create the Database Schema\n\n### Login to PostgreSQL\n\n```bash\nsudo -u postgres psql\n```\n\n### Create Role and Database\n\nReplace `'your-secure-password'` with a strong password:\n\n```sql\nCREATE ROLE miningcore WITH LOGIN ENCRYPTED PASSWORD 'your-secure-password';\nCREATE DATABASE miningcore OWNER miningcore;\n```\n\n---\n\n## Step 4: Load Schema SQL Files\n\n> \u2705 Make sure you can connect using `psql` before proceeding. - As the `postgres` user, run:\n\n```bash\npsql -d miningcore -f miningcore/src/Miningcore/Persistence/Postgres/Scripts/createdb.sql\n```\n\n- Then apply the partitioning script:\n\n```bash\npsql -d miningcore -f miningcore/src/Miningcore/Persistence/Postgres/Scripts/createdb_postgresql_11_appendix.sql\n```\n\n---\n\n##  Step 5: Create a Pool Table\n\n- Run the following command **once per pool** you set up:\n\n```sql\nCREATE TABLE shares_mypool1 PARTITION OF shares FOR VALUES IN ('mypool1');\n```\n\n- Replace `mypool1` with your pool's unique identifier\n- This name is used in the configuration files as well\n\n---\n\n## Step 6: Configure the Pool\n\n- Go to the `build/` directory inside your MiningCore folder\n- Create a `<coin>.json` configuration file (e.g. `ergo.json`)\n- Refer to:",
  "keywords": [
    "mining",
    "core",
    "miningcore",
    "pool",
    "setup",
    "linux",
    "postgresql",
    "guide",
    "tutorial",
    "windows",
    "tutorial](pool_win.md",
    "step",
    "download",
    "clone",
    "github](https://github.com",
    "oliverw",
    "requirement",
    "database](https://www.postgresql.org",
    "dependency",
    "blob",
    "master",
    "readme.md",
    "avoid",
    "docker",
    "container",
    "install",
    "configure",
    "production",
    "environment",
    "monitor",
    "disk",
    "memory",
    "load",
    "setting",
    "default",
    "reference",
    "database",
    "schema",
    "bash",
    "sudo",
    "postgre",
    "psql",
    "role",
    "replace",
    "password",
    "login",
    "encrypted",
    "owner",
    "files",
    "user",
    "persistence",
    "postgres",
    "scripts",
    "createdb.sql",
    "script",
    "createdb_postgresql_11_appendix.sql",
    "table",
    "command",
    "create",
    "shares_mypool1",
    "partition",
    "share",
    "value",
    "identifier",
    "name",
    "configuration",
    "file",
    "directory",
    "folder",
    "coin>.json",
    "ergo.json",
    "refer",
    "config",
    "example](https://github.com",
    "wiki",
    "example",
    "detail",
    "ergo",
    "config.json",
    "type",
    "fields",
    "placeholder",
    "yourpostgresql_password_goes_here",
    "rewardrecipient",
    "percentage",
    "payout",
    "model",
    "level",
    "info",
    "enableconsolecolor",
    "case",
    "event",
    "console",
    "core.log",
    "request",
    "file(s",
    "/path",
    "id>.log",
    "iptable",
    "manager",
    "banoninvalidshare",
    "notification",
    "email",
    "host",
    "smtp.example.com",
    "port",
    "fromaddress",
    "support",
    "block",
    "generate",
    "millisecond",
    "interval",
    "path",
    "emergency",
    "condition",
    "outage",
    "recovered-shares.txt",
    "address",
    "listenaddress",
    "whitelist",
    "prometheus",
    "metrics",
    "metricsipwhitelist",
    "limit",
    "rate",
    "basis",
    "together",
    "override",
    "rule",
    "https://github.com/stefanprodan/aspnetcoreratelimit/wiki/ipratelimitmiddleware#defining-rate-limit-rule",
    "endpoint",
    "period",
    "list",
    "none",
    "ipwhitelist",
    "section",
    "coin",
    "reward",
    "wallet",
    "miner",
    "operator(s",
    "donation",
    "daemon",
    "blockrefreshinterval",
    "minute",
    "time",
    "timeout",
    "second",
    "jobrebroadcasttimeout",
    "worker",
    "contact",
    "attacker",
    "thousand",
    "socket",
    "connection",
    "zombie",
    "clientconnectiontimeout",
    "threshold",
    "system",
    "network",
    "percent",
    "trigger",
    "invalidpercent",
    "checkthreshold",
    "difficulty",
    "vardiff",
    "0.0.0.0",
    "tlspfxfile",
    "/var",
    "certs",
    "mycert.pfx",
    "feature",
    "hash",
    "order",
    "mindiff",
    "maxdiff",
    "null",
    "target",
    "retarget",
    "direction",
    "maxdelta",
    "instance",
    "sync",
    "offline",
    "redundancy",
    "transaction",
    "update",
    "backup",
    "-datadir=/backup",
    "argument",
    "https://",
    "//ergo",
    "testnet",
    "mainnet",
    "notifications",
    "zeromq",
    "bitcoin",
    "family",
    "option",
    "string",
    "parameter",
    "polling",
    "tcp://127.0.0.1:15101",
    "websocket",
    "ethereum",
    "parity",
    "--ws",
    "interface",
    "--jsonrpc",
    "apis",
    "web3,personal",
    "portws",
    "payment",
    "base",
    "currency",
    "satoshis",
    "minimumpayment",
    "pplns",
    "payoutschemeconfig",
    "factor",
    "auto",
    "start",
    "startup",
    "config>.json",
    "json",
    "error",
    "issue",
    "activity",
    "output",
    "success",
    "message",
    "node",
    "online",
    "synced",
    "blockchain",
    "summary",
    "testnet|mainnet",
    "current",
    "height",
    "blockheight",
    "connect",
    "peers",
    "diff",
    "hashrate",
    "stratum",
    "port(s",
    "check",
    "note",
    "machine",
    "communication",
    "initial",
    "traffic",
    "flow",
    "server",
    "component",
    "opening",
    "guidelines",
    "need",
    "localhost",
    "open",
    "firewall",
    "forwarding",
    "router",
    "green"
  ],
  "sections": [
    {
      "heading": "\ud83e\uddf1 MiningCore Setup Tutorial for Linux",
      "content": "\ud83d\udca1 If you're using Windows 10, see the Windows Tutorial"
    },
    {
      "heading": "Step 1: Download MiningCore",
      "content": "Clone Mining Core from GitHub\nRequirements:\nYou must have a working PostgreSQL database\nEnsure you meet all dependencies from the README\nAvoid Docker unless you are confident managing containers"
    },
    {
      "heading": "Step 2: Install and Configure PostgreSQL",
      "content": "For production environments:\nMonitor I/O, disk, CPU, and memory \u2014 MiningCore's API can put heavy load on your DB\nKeep all PostgreSQL settings default for now\n\n\nReference setup guide"
    },
    {
      "heading": "Login to PostgreSQL",
      "content": "bash\nsudo -u postgres psql"
    },
    {
      "heading": "Create Role and Database",
      "content": "Replace 'your-secure-password' with a strong password:\nsql\nCREATE ROLE miningcore WITH LOGIN ENCRYPTED PASSWORD 'your-secure-password';\nCREATE DATABASE miningcore OWNER miningcore;"
    },
    {
      "heading": "Step 4: Load Schema SQL Files",
      "content": "\u2705 Make sure you can connect using psql before proceeding.\nAs the postgres user, run:\nbash\npsql -d miningcore -f miningcore/src/Miningcore/Persistence/Postgres/Scripts/createdb.sql\nThen apply the partitioning script:\nbash\npsql -d miningcore -f miningcore/src/Miningcore/Persistence/Postgres/Scripts/createdb_postgresql_11_appendix.sql"
    },
    {
      "heading": "Step 5: Create a Pool Table",
      "content": "Run the following command once per pool you set up:\nsql\nCREATE TABLE shares_mypool1 PARTITION OF shares FOR VALUES IN ('mypool1');\nReplace mypool1 with your pool's unique identifier\nThis name is used in the configuration files as well"
    },
    {
      "heading": "Step 6: Configure the Pool",
      "content": "Go to the build/ directory inside your MiningCore folder\nCreate a <coin>.json configuration file (e.g. ergo.json)\nRefer to: MiningCore Config Example and the example given below.\n/// details | Example Ergo config.json:\n     {type: tip, open: false}"
    },
    {
      "heading": "Required Fields in Config",
      "content": "Replace placeholders:\nYOURPOSTGRESQL_PASSWORD_GOES_HERE\nYOUR_REWARD_ADDR_GOES_HERE\n\n\nAdjust:\nrewardRecipients percentage to fit your payout model\nEnable paymentProcessing if you will use automatic share payouts\n{\n    \"logging\": {\n        \"level\": \"info\",\n        \"enableConsoleLog\": true,\n        \"enableConsoleColors\": true,\n        // Log file name (full log) - can be null in which case log events are written to console (stdout)\n        \"logFile\": \"core.log\",\n        // Log file name for API-requests - can be null in which case log events are written to either main logFile or console (stdout)\n        \"apiLogFile\": \"api.log\",\n        // Folder to store log file(s)\n        \"logBaseDirectory\": \"/path/to/logs\", // or c:\\path\\to\\logs on Windows\n        // If enabled, separate log file will be stored for each pool as <pool id>.log\n        // in the above specific folder.\n        \"perPoolLogFile\": false\n    },\n    \"banning\": {\n        // \"integrated\" or \"iptables\" (linux only - not yet implemented)\n        \"manager\": \"Integrated\",\n        \"banOnJunkReceive\": true,\n        \"banOnInvalidShares\": false\n    },\n    \"notifications\": {\n        \"enabled\": true,\n        \"email\": {\n            \"host\": \"smtp.example.com\",\n            \"port\": 587,\n            \"user\": \"user\",\n            \"password\": \"password\",\n            \"fromAddress\": \"info@yourpool.org\",\n            \"fromName\": \"pool support\"\n        },\n        \"admin\": {\n            \"enabled\": false,\n            \"emailAddress\": \"user@example.com\",\n            \"notifyBlockFound\": true\n        }\n    },\n    // Where to persist shares and blocks to\n    \"persistence\": {\n        // Persist to postgresql database\n        \"postgres\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 5432,\n            \"user\": \"miningcore\",\n            \"password\": \"YOURPOSTGRESQL_PASSWORD_GOES_HERE\",\n            \"database\": \"miningcore\"\n        }\n    },\n    // Generate payouts for recorded shares and blocks\n    \"paymentProcessing\": {\n        \"enabled\":..."
    },
    {
      "heading": "Step 7: Start the Pool",
      "content": "You should configure your pool to auto-start using a startup script.\nbash\ncd build\nMiningcore -c <your-config>.json\nThe JSON config defines the log files you should monitor for:\n\nStartup errors\nDaemon issues\nPool activity\n\n\n\nYou may need to adjust the config to fit your specific pool setup."
    },
    {
      "heading": "\u2705 Expected Log Output (Success)",
      "content": "When everything is working properly, your logs should show the following messages:"
    },
    {
      "heading": "\ud83d\udfe2 Node Online and Synced",
      "content": "[2022-03-16 14:26:12.9080] [I] [ergo1] All daemons online\n[2022-03-16 14:26:12.9345] [I] [ergo1] Daemon is synced with blockchain"
    },
    {
      "heading": "\ud83d\udfe2 Pool Online",
      "content": "[2022-03-16 14:26:14.4346] [I] [ergo1] Pool Online"
    },
    {
      "heading": "\ud83d\udcca Pool Info Summary",
      "content": "Mining Pool:            <YOUR POOL NAME>\nCoin Type:              ERG [ERG]\nNetwork Connected:      <testnet|mainnet>\nDetected Reward Type:   POW\nCurrent Block Height:   <BLOCKHEIGHT>\nCurrent Connect Peers:  5\nNetwork Difficulty:     <NETWORK DIFF>\nNetwork Hash Rate:      <NETWORK HASHRATE>\nStratum Port(s):        3056, 4056, 3156, 4156\nPool Fee:               <YOUR FEE>\n\u26a0\ufe0f If the network difficulty or other values look off, double-check your diff setting in the config."
    },
    {
      "heading": "Step 8: Network Setup Notes",
      "content": "If your miner, pool, or node are on different machines, you will need to open ports to allow communication between them."
    },
    {
      "heading": "Initial Mining Traffic Flow",
      "content": "Miner\n  \u2192 connects to Stratum port (e.g. 3746)  \nPool Server\n  \u2192 connects to Node RPC (mainnet: 9053, testnet: 9052)  \nNode\nOnce all components connect, traffic becomes bi-directional."
    },
    {
      "heading": "Port Opening Guidelines",
      "content": "If all components are on the same machine:\n\n\u2705 No need to open ports \u2014 uses localhost\n\n\n\nIf using LAN or WAN:\n\n\ud83d\udda5\ufe0f Open required ports on your OS firewall\n\ud83c\udf10 On WAN, configure port forwarding on your router"
    },
    {
      "heading": "You're Good to Go!",
      "content": "You now have a fully operational MiningCore pool on Linux.\nMake sure everything is synced, ports are configured, and logs show green \u2014 then start mining! \u26cf\ufe0f"
    }
  ],
  "qa_pairs": []
}