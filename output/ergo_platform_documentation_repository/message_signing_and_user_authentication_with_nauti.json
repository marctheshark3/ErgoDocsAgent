{
  "title": "Message signing and user authentication with Nautilus wallet and sigma-rust",
  "source_url": "docs/tutorials/message-signing.md",
  "summary": " ---\ntags:\n  - Message Signing\n  - Authentication\n  - Nautilus\n  - sigma-rust\n  - Wallet\n  - Security\n  - Tutorial\n  - Guide\n---\n\n# Message signing and user authentication with Nautilus wallet and sigma-rust\n\nDid you know that besides transactions you can sign any piece of data? Here is how you do it using Nautilus wallet\n```javascript\nconst message = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);\nconst signature = ergo.sign_data('<your_addr>', message);\n```\n\nYeah\u2026 but why? you may ask.",
  "keywords": [
    "message",
    "signing",
    "authentication",
    "sigma",
    "rust",
    "wallet",
    "security",
    "tutorial",
    "guide",
    "user",
    "transaction",
    "piece",
    "datum",
    "nautilus",
    "javascript",
    "const",
    "uint8array([1",
    "signature",
    "ergo.sign_data('<your_addr",
    "nodejs",
    "application",
    "import",
    "ergo",
    "wasm",
    "ergowasm.verify_signature(addr",
    "isvalid",
    "client",
    "owner",
    "address",
    "sigmavalley",
    "plot",
    "information",
    "custom",
    "model",
    "backend",
    "request",
    "token",
    "access",
    "functionality",
    "balance",
    ".get(`https://api.ergoplatform.com",
    "addresses/${addr}/balance",
    "token.tokenid",
    "allow",
    "break",
    "method",
    "character",
    "game",
    "ticketing",
    "system",
    "step",
    "expiration",
    "mechanism",
    "example",
    "date",
    "while",
    "idea",
    "check",
    "verification",
    "middleware",
    "route",
    "reference",
    "https://github.com/ergoplatform/sigma-rust/tree/develop/bindings/ergo-lib-wasm",
    "discord"
  ],
  "sections": [
    {
      "heading": "Message signing and user authentication with Nautilus wallet and sigma-rust",
      "content": "Did you know that besides transactions you can sign any piece of data?\nHere is how you do it using Nautilus wallet\njavascript\nconst message = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);\nconst signature = ergo.sign_data('<your_addr>', message);\nYeah\u2026 but why? you may ask.\nWell, because now you can post it to your NodeJS backend application and do this, using sigma-rust:\njavascript\nimport * as ergoWasm from 'ergo-lib-wasm-nodejs'\nconst isValid = ergoWasm.verify_signature(addr, message, signature);\nif (isValid) { // authenticated!!! }\nThis is called wallet authentication\u200a-\u200athe way to verify that the user/client is the owner of the address he is claiming to be.\nIn SigmaValley we allow NFT owners to edit their plot information and upload custom models. So if isValid === true and the backend knows that the request came from the wallet owner, I can now request all the tokens on that address and provide the client with access to protected functionality or data.\njavascript\nconst balance = await request\n  .get(`https://api.ergoplatform.com/api/v1/addresses/${addr}/balance/confirmed`)\n  .then(res => res.body);\nif (balance.tokens.find(token => token.tokenId === '<valid token>') {\n   // Allow user break SigmaValley\n}\nYou can use the same method to allow your users to upload their NFT as a character in your game or build an NFT-based ticketing system, the uses are limitless."
    },
    {
      "heading": "Next steps/security tips",
      "content": "User expiration mechanism\u200a-\u200aThe example above is very simplified, you can use it right away, but for more secure applications you may consider implementing some message expiration mechanism. Instead of signing a random message, you can include an expiration date to it and force users to sign a new message once in a while. You can also switch to a more popular JTW token authentication once the user is verified.\nCheck the token balance on every request\u200a-\u200ait's not enough to check whether the user holds the NFT only once. The user can get access and sell his NFT to someone else. It's a good idea to move the balance check and the verification to authentication middleware to be executed on every request to your protected routes.\nReferences:\nSigma-rust https://github.com/ergoplatform/sigma-rust/tree/develop/bindings/ergo-lib-wasm\nSigma-rust discord https://discord.com/channels/668903786361651200/729692906209673257"
    }
  ],
  "qa_pairs": []
}