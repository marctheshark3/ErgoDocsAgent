{
  "title": "EIP-0005: Contract Template Documentation",
  "source_url": "docs/dev/wallet/standards/eip5.md",
  "summary": "---\ntags:\n  - EIP\n---\n\n# EIP-0005: Contract Template Documentation\n\n## Overview\n\n**Author:** aslesarenko  \n**Status:** Proposed  \n**Created:** 06-Apr-2020  \n**License:** CC0  \n**Forking:** Not Needed\n\n## Table of Contents\n\n- [Description](#description)\n- [Background And Motivation](#background-and-motivation)\n- [Example Use Cases](#example-use-cases)\n- [Contract Template Serialization Format](#contract-template-serialization-format)\n- [Parameter Serialization Format](#parameter-serialization-format)\n- [JSON Format](#json-format)\n-",
  "keywords": [
    "eip-0005",
    "contract",
    "template",
    "documentation",
    "overview",
    "author",
    "status",
    "apr-2020",
    "license",
    "forking",
    "table",
    "contents",
    "background",
    "motivation](#background",
    "motivation",
    "example",
    "cases](#example",
    "case",
    "serialization",
    "format](#contract",
    "format",
    "parameter",
    "format](#parameter",
    "format](#json",
    "conversion",
    "ergotree](#conversion",
    "ergotree",
    "note",
    "compilers](#note",
    "compiler",
    "description",
    "standard",
    "metadata",
    "platform",
    "developer",
    "protocol",
    "implementation",
    "application",
    "tool",
    "ergo",
    "language",
    "ergotree](https://ergoplatform.org",
    "docs",
    "ergotree.pdf",
    "proposition",
    "utxo",
    "storage",
    "transaction",
    "validation",
    "capability",
    "ergoscala",
    "environment",
    "library",
    "java",
    "scala2.12",
    "self",
    "entity",
    "parse",
    "section",
    "wire",
    "transfer",
    "below",
    "field",
    "name",
    "|-----------------|-------------------|-----------------------|-------------|",
    "treeversion",
    "opt[ubyte",
    "optional",
    "version",
    "namelength",
    "vlq(uint",
    "length",
    "byte",
    "bytes",
    "rewardoutputscript",
    "user",
    "desclength",
    "mining",
    "rewards\"|",
    "document",
    "detail",
    "minerpk",
    "miner",
    "constantindex",
    "index",
    "ergotree.constants",
    "json",
    "human",
    "sample",
    "representation",
    "reward",
    "structure",
    "substitution",
    "value",
    "constant",
    "default",
    "compilers",
    "ergoscript",
    "annotation",
    "source",
    "code",
    "specification"
  ],
  "sections": [
    {
      "heading": "Overview",
      "content": "Author: aslesarenko\nStatus: Proposed\nCreated: 06-Apr-2020\nLicense: CC0\nForking: Not Needed"
    },
    {
      "heading": "Table of Contents",
      "content": "Description\nBackground And Motivation\nExample Use Cases\nContract Template Serialization Format\nParameter Serialization Format\nJSON Format\nConversion to ErgoTree\nNotes on Supporting this EIP in ErgoTree Compilers"
    },
    {
      "heading": "Description",
      "content": "EIP-0005 outlines a standard for serializing contract templates and including metadata to make them reusable across multiple platforms. It aims to provide a way for developers to easily move contract templates between different protocol implementations, applications, and tools."
    },
    {
      "heading": "Background And Motivation",
      "content": "Ergo employs a robust language, known as ErgoTree, to create guarding propositions that protect UTXO boxes. While ErgoTree's serialization is efficient for storage and transaction validation, it lacks the metadata necessary for broader application use. This EIP aims to extend ErgoTree's capabilities by adding serialization formats for contract templates, including metadata for more versatile applications."
    },
    {
      "heading": "Example Use Cases",
      "content": "ErgoTree compilers can generate contract templates complete with necessary metadata.\nContract templates generated by one compiler (e.g., ErgoScala) can be used in environments where specific libraries (e.g., Java jar generated by Scala2.12) are not supported.\nThe contract template becomes a self-contained entity, making it easier to store, transfer, parse, or execute across different platforms and tools."
    },
    {
      "heading": "Contract Template Serialization Format",
      "content": "This section provides the binary serialization format for contract templates, optimized for compact storage and wire transfer. Below is a table illustrating the fields and their formats:\n| Field Name      | Format            | Example               | Description |\n|-----------------|-------------------|-----------------------|-------------|\n| TreeVersion   | Opt[UByte]      | 1                     | Optional version of ErgoTree to be used |\n| NameLength    | VLQ(UInt)       | 18                    | Length of Name in bytes |\n| Name          | Bytes           | \"rewardOutputScript\"  | User-readable name of the contract |\n| DescLength    | VLQ(UInt)       | 20                    | Length of Description in bytes |\n| Description   | Bytes           | \"holds mining rewards\"| User-readable contract description |\n| ...             | ...               | ...                   | ... |\nNote: See the original EIP-0005 document for complete field descriptions and further details."
    },
    {
      "heading": "Parameter Serialization Format",
      "content": "This section provides the binary serialization format for parameters within contract templates.\n| Field Name      | Format            | Example               | Description |\n|-----------------|-------------------|-----------------------|-------------|\n| NameLength    | VLQ(UInt)       | 7                     | Length of Name in bytes |\n| Name          | Bytes           | \"minerPk\"             | User-readable parameter name |\n| DescLength    | VLQ(UInt)       | 18                    | Length of Description in bytes |\n| Description   | Bytes           | \"miner's public key\"  | User-readable parameter description |\n| ConstantIndex | VLQ(UInt)       | 1                     | Index in the ErgoTree.constants array |"
    },
    {
      "heading": "JSON Format",
      "content": "Contract templates can also be serialized into JSON format, suitable for applications that require human-readable or editable templates. A sample JSON representation is as follows:\njson\n{\n  \"name\": \"rewardOutputScript\",\n  \"description\": \"holds mining rewards\",\n  ...\n}"
    },
    {
      "heading": "Conversion to ErgoTree",
      "content": "This section outlines how to convert a contract template into an ErgoTree structure. The conversion allows for the substitution of new values for the constants in the template, either redefining the default values or providing missing ones."
    },
    {
      "heading": "Notes on Supporting this EIP in ErgoTree Compilers",
      "content": "Compilers like ErgoScript and ErgoScala can easily incorporate this EIP by generating templates packaged as either JSON or bytes. Annotations in the source code can also aid the compiler in generating the appropriate metadata and serialization formats.\nFor complete technical details and field specifications, refer to the original EIP-0005 document."
    }
  ],
  "qa_pairs": []
}