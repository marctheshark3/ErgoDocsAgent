{
  "title": "Subblocks in Ergo",
  "source_url": "docs/uses/sidechains/subblocks.md",
  "summary": "# Subblocks in Ergo \n\n/// details |TLDR\n    {type: info, open: true}\n\nWith the renaming and introduction of sub-blocks, Ergo now distinguishes between sub-blocks (also called input blocks) and full blocks (now called ordering blocks). This change reduces typical onchain confirmation times from about 2 minutes to roughly 2 seconds, achieving a 17\u00d7 improvement in detecting transaction failures and transforming the current competitive mempool into a more cooperative environment. ///\n\n### What Are Sub-blocks and Ordering Blocks?\n\n  \n- **Sub-blocks (Input Blocks):** These are block candidates generated with a lower difficulty threshold than full blocks.",
  "keywords": [
    "subblock",
    "ergo",
    "detail",
    "|tldr",
    "type",
    "info",
    "renaming",
    "introduction",
    "block",
    "input",
    "change",
    "confirmation",
    "time",
    "minute",
    "second",
    "improvement",
    "transaction",
    "failure",
    "mempool",
    "environment",
    "ordering",
    "blocks",
    "candidate",
    "difficulty",
    "threshold",
    "datum",
    "work",
    "system",
    "consensus",
    "security",
    "blockchain",
    "note",
    "naming",
    "document](https://raw.githubusercontent.com",
    "ergoplatform",
    "e15dcd0b4ca0a72d32d97228f010d813540de39d",
    "paper",
    "user",
    "experience",
    "rapid",
    "onchain",
    "confirmations",
    "token",
    "exchange",
    "swap",
    "wallet",
    "transfer",
    "faster",
    "detection",
    "responsiveness",
    "cooperative",
    "design",
    "shift",
    "multiplayer",
    "network",
    "nutshell",
    "speed",
    "reliability",
    "instant",
    "dive",
    "details](input",
    "blocks.md"
  ],
  "sections": [
    {
      "heading": "Subblocks in Ergo",
      "content": "/// details |TLDR\n    {type: info, open: true}\nWith the renaming and introduction of sub-blocks, Ergo now distinguishes between sub-blocks (also called input blocks) and full blocks (now called ordering blocks). This change reduces typical onchain confirmation times from about 2 minutes to roughly 2 seconds, achieving a 17\u00d7 improvement in detecting transaction failures and transforming the current competitive mempool into a more cooperative environment.\n///"
    },
    {
      "heading": "What Are Sub-blocks and Ordering Blocks?",
      "content": "Sub-blocks (Input Blocks):\n  These are block candidates generated with a lower difficulty threshold than full blocks. They are produced approximately once per second and carry most transaction data. This allows transactions to propagate and confirm much faster.\n\n\nOrdering Blocks:\n  These are the traditional full blocks of Ergo\u2019s proof-of-work system, now renamed as ordering blocks. They are generated roughly every 2 minutes and maintain the overall consensus and security of the blockchain.\nNote: The naming \u201cinput blocks\u201d (or sub-blocks) and \u201cordering blocks\u201d was proposed in detail in this document."
    },
    {
      "heading": "Enhanced User Experience",
      "content": "Rapid Onchain Confirmations:\n  Everyday transactions\u2014like receiving tokens from decentralized exchange (DEX) swaps or wallet-to-wallet transfers\u2014are now confirmed in approximately 2 seconds.\n\n\nFaster Failure Detection:\n  Instead of waiting up to 6 minutes to detect a transaction failure, the new system detects failures in about 2 seconds\u2014a 17\u00d7 improvement in responsiveness.\n\n\nA More Cooperative Mempool:\n  The design shift transforms the mempool from a competitive (PvP) environment into a cooperative, multiplayer-like system, enhancing overall network responsiveness."
    },
    {
      "heading": "In a Nutshell",
      "content": "Ergo\u2019s renaming and introduction of sub-blocks (input blocks) paired with ordering blocks significantly improves transaction processing speed and reliability. These changes provide users with near-instant confirmations and faster failure detection, thereby offering a smoother and more efficient experience on the network.\nFor a deep dive into the technical details behind these changes, see the technical details."
    }
  ],
  "qa_pairs": []
}