{
  "title": "ErgoAuth: user authentication protocol between wallet applications and dApps",
  "source_url": "docs/dev/wallet/payments/ergoauth.md",
  "summary": "# ErgoAuth: user authentication protocol between wallet applications and dApps\n\n* Author: @MrStahlfelge\n* Status: Implemented\n* Created: 25-Jan-2022\n* Last change: 24-Oct-2022\n* License: CC0\n* Forking: not needed\n\n## Contents\n- [ErgoAuth: user authentication protocol between wallet applications and dApps](#ergoauth-user-authentication-protocol-between-wallet-applications-and-dapps)\n  - [Contents](#contents)\n  - [Description](#description)\n  -",
  "keywords": [
    "ergoauth",
    "user",
    "authentication",
    "protocol",
    "wallet",
    "application",
    "dapps",
    "author",
    "@mrstahlfelge",
    "status",
    "jan-2022",
    "change",
    "oct-2022",
    "license",
    "forking",
    "content",
    "dapps](#ergoauth",
    "contents](#contents",
    "background",
    "motivation](#background",
    "motivation",
    "protocol](#ergoauth",
    "data",
    "formats](#data",
    "format",
    "response",
    "body",
    "ergoauthrequest](#response",
    "support](#cold",
    "support",
    "implementation",
    "app](#implementation",
    "dapp](#implementation",
    "dapp",
    "benefit",
    "dapps](#benefit",
    "description",
    "standard",
    "trustless",
    "ability",
    "holder",
    "token",
    "moment",
    "address",
    "access",
    "privilege",
    "transaction",
    "time",
    "fund",
    "secret",
    "information",
    "example",
    "p2pk",
    "ergopay",
    "message",
    "sigmaboolean",
    "link",
    "code",
    "datum",
    "ergoauthrequesturl",
    "section",
    "screen",
    "request",
    "device",
    "enhancement",
    "auth",
    "eip-0019",
    "byte",
    "ergoauthrequest",
    "replytourl",
    "host",
    "domain",
    "middleman",
    "flow",
    "formats",
    "scheme",
    "ergoauth://<url",
    "https",
    "prefix",
    "http",
    "communication",
    "order",
    "network",
    "ergoauth://sigmavalley.io/auth/2021-16b8-66c4-b800-6e52-8ce4",
    "https://sigmausd.io/auth/2021-16b8-66c4-b800-6e52-8ce4",
    "ergoauth://192.168.0.1",
    "http://192.168.0.1",
    "json",
    "signingmessage",
    "string",
    "base64",
    "usermessage",
    "messageseverity",
    "warning",
    "remark",
    "ergo",
    "character",
    "part",
    "sign",
    "hostname",
    "signing",
    "ergoauthresponse",
    "signedmessage",
    "proof",
    "addition",
    "task",
    "output",
    "case",
    "error",
    "side",
    "ergoauthrequesterror",
    "internet",
    "file",
    "interchange",
    "chunk",
    "eip-0019](eip19.md#interchange",
    "name",
    "earq",
    "earq\":\"{\\\"signingmessage\\\":\\\"",
    "\\\",\\\"sigmaboolean\\\":\\\"",
    "\\\",\\\"usermessage\\\":\\\"",
    "ears\":\"{\\\"signedmessage\\\":\\\"",
    "....",
    "\\\",\\\"proof\\\":\\\"",
    "field",
    "ergoplatform",
    "issues/112",
    "appkit",
    "pull/157",
    "backend",
    "example](https://github.com",
    "mrstahlfelge",
    "server",
    "commit/9271f0ef890d6c8e63789f6c82b65595efe8549a",
    "website",
    "security"
  ],
  "sections": [
    {
      "heading": "ErgoAuth: user authentication protocol between wallet applications and dApps",
      "content": "Author: @MrStahlfelge\nStatus: Implemented\nCreated: 25-Jan-2022\nLast change: 24-Oct-2022\nLicense: CC0\nForking: not needed"
    },
    {
      "heading": "Contents",
      "content": "ErgoAuth: user authentication protocol between wallet applications and dApps\nContents\nDescription\nBackground And Motivation\nErgoAuth authentication protocol\nData Formats\nResponse body: ErgoAuthRequest\n\n\nCold wallet support\nImplementation in wallet app\nImplementation in dApp\nBenefits for dApps"
    },
    {
      "heading": "Description",
      "content": "This EIP defines a standard for trustless authentication of users of a wallet app and an online dApp."
    },
    {
      "heading": "Background And Motivation",
      "content": "dApps might want to validate if dApp users are really who they pretend to be. This is especially\nuseful for dApps that grant certain abilities to holders of special tokens. At the moment,\nproving that a user owns a token can only be done by sending the token to a depositary address.\nBy sending the token, the user proofed to have access privileges to the token.\nHowever, sending token around is not always desirable. Especially for valuable tokens, users might\nnot want to send it away, and doing two transactions (one to send it to the depositary address, one\nto refund it back) costs both time and transaction fees.\nTo overcome this, ErgoAuth proposes a way to authenticate users trustless to have access to certain\naddresses storing a box. The protocol is trustless in both ways: The users don't need to trust\nthe dApp, because the dApp does not get access to funds or secrets. The dApp don't need to trust\nthe users or the wallet app, because it can validate the authentication keys."
    },
    {
      "heading": "ErgoAuth authentication protocol",
      "content": "An authentication with ErgoAuth is driven by a dApp that needs to authenticate a user.\n1) The user enters the necessary information in the dApp's UI for the dApp to know if authentication\nis necessary. For example, users might enter their P2PK address (or, instead of manually entering,\nuse ErgoPay to send the address to the dApp automatically).\n2) The dApp determines that authenticating the user is needed. For this, the dApp prepares a unique\nmessage that the wallet app should sign with a user's private key, and a SigmaBoolean that the user\nneeds to authenticate for. This might be a P2PK address wrapped in a SigmaBoolean.\n3) The dApp presents an ErgoAuth link for the user to click and open the wallet app and a QR code\nfor mobile users to scan from within the wallet app.\n4) The wallet application parses the QR code/link data and obtains a\nErgoAuthRequestUrl to fetch the actual ErgoAuthRequest data from\n(see Data Formats section).\n5) When ErgoAuthRequest is obtained, the wallet presents a screen showing that a dApp wants to\nauthenticate the user, and the address the request is for. The wallet app should also inform the\nuser that no funds or moved and no secrets will leave the device.\nIn a future enhancement, the Auth Request could be relayed to a Cold wallet device. This is an enhancement \nof EIP-0019 and would not change ErgoAuth protocol.\n6) When the user agrees, the wallet app adds some own bytes to the obtained message from ErgoAuthRequest,\nsigns it  and sends the signed message to the ErgoAuthRequest's replyToUrl. The added bytes include\nthe host address the authentication request was fetched from, added right after the message defined\nby the dApp. This way, dApp can check if a user authenticated via the right domain and there is no\nmiddleman.\n8) The dApp validates the signed message. When successful, it can proceed with its flow."
    },
    {
      "heading": "Data Formats",
      "content": "Wallet apps should be able to initiate ErgoAuth both by using URI schemes\n(clickable links) or QR codes.\nergoauth://<URL>\nAn URL is provided without the https prefix. http communication is not allowed except for IP addresses\n(in order to test within a local network).\nExamples:\n* ergoauth://sigmavalley.io/auth/2021-16b8-66c4-b800-6e52-8ce4 will make the wallet app request\nhttps://sigmausd.io/auth/2021-16b8-66c4-b800-6e52-8ce4\n* ergoauth://192.168.0.1/auth will make the wallet app request\nhttp://192.168.0.1/auth"
    },
    {
      "heading": "Response body: ErgoAuthRequest",
      "content": "The wallet application should request URL and obtain the following data (json format)\nErgoAuthRequest:\n  - signingMessage: String\n  - sigmaBoolean: String (base64 from serialized SigmaBoolean)\n  - userMessage: String (optional*)\n  - messageSeverity: String (optional) \"INFORMATION\", \"WARNING\"\n  - replyToUrl: String\n(Remark: An Ergo p2pk address is a SigmaBoolean, so authenticating a wallet address is possible with this)\nThe signingMessage is a String that is not user-friendly to read in general, as it might contain\ninformation the dApp adds to make it unique. If the signingMessage contains 0-byte character (unicode 0000), \nthe part of the signingMessage before this sign is interpreted as the user prompt what he is going to sign for\nand must be shown to the user.\nIf provided, the wallet application should show the userMessage and display the messageSeverity\nin a suitable way. It should also show the replyToUrl's hostname so that the user knows to where \nthe authentication is sent. The replyToUrl's hostname must be the same as the one the request was\nfetched from - a wallet application should verify that.\nAfter signing is performed, the\nwallet must POST the following data to the dApp using replyToUrl from the\nrequest (json format).\nErgoAuthResponse:\n  - signedMessage: String\n  - proof: String (Base64)\nsignedMessage: Message containing the signingMessage sent by the dApp with additional bytes added by the \nwallet. The addition of random bytes is done to prevent letting the user signing a message that might be used\nfor unwanted malicious tasks. Besides random based, the signed message must also contain the replyToUrl's \nhostname right after the original signing message. This way, the dApp can check if an authentication was done by\nthe user for that dApp, or if another middleman reuses an authentication.\nproof: Output of signing signedMessage\nIn case there was an error building the ErgoAuthRequest on the dApp side, the dApp might reply\nwith an ErgoAuthRequestError to info..."
    },
    {
      "heading": "Cold wallet support",
      "content": "Similar to EIP-0019 for signing transactions from devices not connected to the internet \n(\"cold wallets\"), ErgoAuth can be used to sign messages from cold wallets. This is transparent for \ndApps and handled by the wallet connected to the internet (\"hot wallet\").\nFor this, the ErgoAuthRequest must be transferred to the cold wallet via files or QR codes and \nthe ErgoAuthResponse must be transferred back the same way.\nThe interchange format to transfer chunks between hot wallet and cold wallet is similar to the one \ndefined in EIP-0019, with name \"EARQ\" for ErgoAuthRequest and \"EARS\" \nfor ErgoAuthResponse. Examples:\n{\"EARQ\":\"{\\\"signingMessage\\\":\\\"....\\\",\\\"sigmaBoolean\\\":\\\"...\\\",\\\"userMessage\\\":\\\"...\\\",...}\"}\n\n {\"EARS\":\"{\\\"signedMessage\\\":\\\"....\\\",\\\"proof\\\":\\\"...\\\"}\nThe ErgoAuthRequest's replyToUrl field must be omitted to save data bandwidth.\nChunking as described in EIP-0019 is supported as well."
    },
    {
      "heading": "Implementation in wallet app",
      "content": "Ergo Wallet App #112"
    },
    {
      "heading": "Implementation in dApp",
      "content": "Ergo Appkit #157\ndApp: \n* ErgoPay backend example\n* Login to https://www.paideia.im/"
    },
    {
      "heading": "Benefits for dApps",
      "content": "A dApp or website don\u2019t need to handle user's secrets (mnemonic/private keys), but can\nsafely validate if a user has access to certain Ergo addresses.\ndApp's users don't need to worry about security of their private keys as the\nwallet guarantees they never leave the device. This is especially true if authentication\nis done with a cold device."
    }
  ],
  "qa_pairs": []
}