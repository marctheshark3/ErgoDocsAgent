{
  "title": "ErgoTree Functions",
  "source_url": "docs/dev/scs/ergotree/functions.md",
  "summary": "# ErgoTree Functions\n\n> This page is a WIP. Please see [ErgoTree.pdf](https://storage.googleapis.com/ergo-cms-media/docs/ErgoTree.pdf) for full details. | Code | Mnemonic | Description | Description |\n|---|---|---|---|\n115 | ConstantPlaceholder |  Int    => T | Create special ErgoTree node which can be replaced by constant with given id. \n116 | SubstConstants | Coll[Byte], Coll[Int], Coll[T]    => Coll[Byte] | ... \n122 | LongToByteArray | Long    => Coll[Byte] | Converts Long value to big-endian bytes representation. \n123 | ByteArrayToBigInt | Coll[Byte]    => BigInt | Convert big-endian bytes representation (Coll[Byte]) to BigInt value. 124 | ByteArrayToLong | Coll[Byte]    => Long | Convert big-endian bytes representation (Coll[Byte]) to Long value.",
  "keywords": [
    "ergotree",
    "function",
    "page",
    "ergotree.pdf](https://storage.googleapis.com",
    "ergo",
    "medium",
    "docs",
    "ergotree.pdf",
    "detail",
    "code",
    "mnemonic",
    "description",
    "|---|---|---|---|",
    "constantplaceholder",
    "node",
    "substconstants",
    "coll[byte",
    "coll[int",
    "coll[t",
    "longtobytearray",
    "long",
    "convert",
    "value",
    "byte",
    "representation",
    "bytearraytobigint",
    "bigint",
    "bytearraytolong",
    "downcast",
    "type",
    "exception",
    "upcast",
    "selectfield",
    "select",
    "field",
    "index",
    "e.g.",
    "input._1",
    "selectfield(input",
    "return",
    "operand",
    "compare",
    "equality",
    "argument",
    "inequality",
    "compute",
    "condition",
    "truebranch",
    "falsebranch",
    "coll[boolean",
    "element",
    "collection",
    "\\emph{any",
    "atleast",
    "coll[sigmaprop",
    "sigmaprop",
    "minus",
    "result",
    "bytes",
    "multiply",
    "multiplication",
    "division",
    "integer",
    "modulo",
    "reminder",
    "maximum",
    "createavltree",
    "option[int",
    "avltree",
    "dictionary",
    "parameter",
    "tree",
    "root",
    "digest",
    "treelookup",
    "option[coll[byte",
    "calcblake2b256",
    "calculate",
    "blake2b",
    "hash",
    "input",
    "calcsha256",
    "sha256",
    "createprovedlog",
    "groupelement",
    "operation",
    "logarithm",
    "signature",
    "protocol",
    "createprovedhtuple",
    "diffie",
    "hellman",
    "booltosigmaprop",
    "boolean",
    "deserializecontext",
    "deserializeregister",
    "option[t",
    "getvar",
    "context",
    "variable",
    "varid",
    "sigmaand",
    "proposition",
    "sigmaor",
    "binor",
    "logical",
    "binand",
    "groupelementserializer",
    "logicalnot",
    "falseand",
    "falseif",
    "negation",
    "bitinversion",
    "invert",
    "bitor",
    "bitwise",
    "bitand",
    "binxor",
    "bitxor",
    "shift",
    "bitshiftleft",
    "bitshiftrightzeroed",
    "xorof",
    "allof"
  ],
  "sections": [
    {
      "heading": "ErgoTree Functions",
      "content": "This page is a WIP. Please see ErgoTree.pdf for full details.\n| Code | Mnemonic | Description | Description |\n|---|---|---|---|\n115 | ConstantPlaceholder |  Int    => T | Create special ErgoTree node which can be replaced by constant with given id. \n116 | SubstConstants | Coll[Byte], Coll[Int], Coll[T]    => Coll[Byte] | ... \n122 | LongToByteArray | Long    => Coll[Byte] | Converts Long value to big-endian bytes representation. \n123 | ByteArrayToBigInt | Coll[Byte]    => BigInt | Convert big-endian bytes representation (Coll[Byte]) to BigInt value. \n124 | ByteArrayToLong | Coll[Byte]    => Long | Convert big-endian bytes representation (Coll[Byte]) to Long value. \n125 | Downcast |   (T    => R) | Cast this numeric value to a smaller type (e.g. Long to Int). Throws exception if overflow. \n126 | Upcast |  (T    => R) | Cast this numeric value to a bigger type (e.g. Int to Long) \n140 | SelectField | (T, Byte    => R) | Select tuple field by its 1-based index. E.g. input._1 is transformed to SelectField(input, 1 \n143 | LT | T, T    => Boolean | Returns true is the left operand is less then the right operand, false otherwise. \n144 | LE | T, T    => Boolean | Returns true is the left operand is less then or equal to the right operand, false otherwise. \n145 | GT | T, T    => Boolean | Returns true is the left operand is greater then the right operand, false otherwise. \n146 | GE | T, T    => Boolean | Returns true is the left operand is greater then or equal to the right operand, false otherwise. \n147 | EQ | T, T    => Boolean | Compare equality of left and right arguments \n148 | NEQ | T, T    => Boolean | Compare inequality of left and right arguments \n149 | If | Boolean, T, T    => T | Compute condition, if true then compute trueBranch else compute falseBranch \n150 | AND | Coll[Boolean]    => Boolean | Returns true if \\emph{all the elements in collection are true. \n151 | OR | Coll[Boolean]    => Boolean | Returns true if \\emph{any the elements in collection are true. \n152..."
    }
  ],
  "qa_pairs": []
}