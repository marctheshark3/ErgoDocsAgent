{
  "title": "Signing Transactions Using a Backend Wallet",
  "source_url": "docs/tutorials/sign-tx.md",
  "summary": "---\ntags:\n  - Signing Transactions\n  - Backend\n  - Wallet\n  - sigma-rust\n  - NodeJS\n  - Tutorial\n  - Guide\n---\n\n# Signing Transactions Using a Backend Wallet\n\nThere are various scenarios where signing a transaction on the backend is necessary. This documentation provides instructions on how to accomplish this task using Ergo. We will outline two common use cases: NFT vending machine and off-chain bots that withdraw funds from contracts. ## Use Cases\n\n### NFT Vending Machine\n\nIn this use case, you may need to mint a token and send it to a user when their address is funded. To achieve this, it is recommended to define a wallet on your backend that can sign the transactions.",
  "keywords": [
    "signing",
    "transactions",
    "backend",
    "wallet",
    "sigma",
    "rust",
    "nodejs",
    "tutorial",
    "guide",
    "scenario",
    "transaction",
    "documentation",
    "instruction",
    "task",
    "ergo",
    "case",
    "machine",
    "chain",
    "fund",
    "contract",
    "vending",
    "token",
    "user",
    "address",
    "code",
    "snippet",
    "javascript",
    "import",
    "signerwallet",
    "service",
    "walletfrommnemonic",
    "example",
    "const",
    "unsignedtx",
    "input",
    "output",
    "seed",
    "phrase",
    "manager",
    "signerwallet().frommnemonics('add",
    "word",
    "signedtx",
    "wallet.sign(unsignedtx",
    "mempool",
    "additional",
    "references",
    "detail",
    "library",
    "tree",
    "binding",
    "wasm",
    "discord",
    "channels/668903786361651200/729692906209673257",
    "discussion",
    "support",
    "dappstep",
    "nirvanush",
    "play",
    "blob",
    "walletfrommnemonics.ts",
    "information"
  ],
  "sections": [
    {
      "heading": "Signing Transactions Using a Backend Wallet",
      "content": "There are various scenarios where signing a transaction on the backend is necessary. This documentation provides instructions on how to accomplish this task using Ergo. We will outline two common use cases: NFT vending machine and off-chain bots that withdraw funds from contracts."
    },
    {
      "heading": "NFT Vending Machine",
      "content": "In this use case, you may need to mint a token and send it to a user when their address is funded. To achieve this, it is recommended to define a wallet on your backend that can sign the transactions. The following code snippet demonstrates how this can be done:\n```javascript\nimport SignerWallet from '../src/services/WalletFromMnemonics';\n// Example transaction\nconst unsignedTx = {\n  inputs: [...], \n  outputs: [...],\n  ...\n}\n// It is crucial to avoid storing the seed phrase in your code; always use a secret manager.\nconst wallet = await new SignerWallet().fromMnemonics('add your 12-word seed phrase here');\nconst signedTx = wallet.sign(unsignedTx);\n// The signed transaction can now be submitted to the mempool.\n```"
    },
    {
      "heading": "Off-Chain Bot",
      "content": "In this use case, an off-chain bot is responsible for withdrawing funds from a contract. Similar to the previous use case, you will need a backend wallet to sign the transactions. The code snippet below illustrates how to achieve this:\n```javascript\nimport SignerWallet from '../src/services/WalletFromMnemonics';\n// Example transaction\nconst unsignedTx = {\n  inputs: [...], \n  outputs: [...],\n  ...\n}\n// It is crucial to avoid storing the seed phrase in your code; always use a secret manager.\nconst wallet = await new SignerWallet().fromMnemonics('add your 12-word seed phrase here');\nconst signedTx = wallet.sign(unsignedTx);\n// The signed transaction can now be submitted to the mempool.\n```"
    },
    {
      "heading": "Additional References",
      "content": "Sigma-rust - For more details on Ergo's sigma-rust library, please refer to the sigma-rust repository.\nSigma-rust Discord - Join the Sigma-rust Discord channel to engage in discussions and receive support related to Ergo's sigma-rust library.\ndAppstep Repo - Visit the dAppstep repository for further information on using the backend wallet for transaction signing."
    }
  ],
  "qa_pairs": []
}