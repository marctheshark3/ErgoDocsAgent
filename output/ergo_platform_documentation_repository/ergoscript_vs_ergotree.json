{
  "title": "ErgoScript vs ErgoTree",
  "source_url": "docs/dev/scs/ergoscriptvergotree.md",
  "summary": "---\ntags:\n  - ErgoScript\n  - ErgoTree\n---\n\n## ErgoScript vs ErgoTree\n\n[ErgoScript](ergoscript.md) is a high-level, developer-friendly language for writing smart contracts that are then compiled to ErgoTree before being written to the blockchain. The [Ergo node](install.md) does not understand ErgoScript. Instead, it uses a low-level language called [**ErgoTree**](https://ergoplatform.org/docs/ErgoTree.pdf), which is a \"tree-based\" language (somewhat like XML). However, writing code in ErgoTree is *difficult*. - ErgoTree is similar to Bitcoin's Script in some aspects.",
  "keywords": [
    "ergoscript",
    "ergotree",
    "ergoscript](ergoscript.md",
    "level",
    "developer",
    "language",
    "contract",
    "blockchain",
    "ergo",
    "node](install.md",
    "ergotree**](https://ergoplatform.org",
    "docs",
    "ergotree.pdf",
    "tree",
    "code",
    "bitcoin",
    "script",
    "aspect",
    "program",
    "sequence",
    "predicate",
    "node",
    "transaction",
    "example",
    "scala",
    "and(or(condition_1",
    "condition_3",
    "hold",
    "equivalent",
    "condition_1"
  ],
  "sections": [
    {
      "heading": "ErgoScript vs ErgoTree",
      "content": "ErgoScript is a high-level, developer-friendly language for writing smart contracts that are then compiled to ErgoTree before being written to the blockchain.\nThe Ergo node does not understand ErgoScript. Instead, it uses a low-level language called ErgoTree, which is a \"tree-based\" language (somewhat like XML).\nHowever, writing code in ErgoTree is difficult.\nErgoTree is similar to Bitcoin's Script in some aspects. \nAn ErgoTree program is deterministic and consists of a sequence of boolean predicates joined using AND and OR.\nErgo nodes execute the ErgoTree program contained in a transaction and consider it valid if it evaluates to true.\nAn example of such an ErgoTree program would be\nscala\nAND(OR(condition_1, condition_2), condition_3)\nwhich implies that the transaction is valid if condition_3 holds and at least one of condition_1 or condition_2 holds.\nThe equivalent of the above program in ErgoScript would be\nscala\n(condition_1 || condition_2) && condition_3"
    }
  ],
  "qa_pairs": []
}