{
  "title": "Babel Fees Implementation Guide",
  "source_url": "docs/dev/protocol/tx/babel-impl.md",
  "summary": "# Babel Fees Implementation Guide\n\n## Overview\n\nThis guide provides detailed instructions for implementing Babel fees in your Ergo applications. The implementation example demonstrates how to enable users to pay transaction fees using tokens instead of ERG, which is particularly useful for new users who may not have ERG in their wallets. ## Prerequisites\n\n1. Node.js and npm (tested with Node v20.10.0)\n2. Fleet SDK core and babel-fees plugin\n3.",
  "keywords": [
    "babel",
    "fees",
    "implementation",
    "guide",
    "instruction",
    "ergo",
    "application",
    "example",
    "user",
    "transaction",
    "token",
    "wallet",
    "prerequisite",
    "node.js",
    "node",
    "v20.10.0",
    "fleet",
    "core",
    "plugin",
    "ubuntu",
    "server",
    "setup",
    "step",
    "preparation",
    "first",
    "lightning",
    "supply",
    "asset",
    "272a4aeba6d1596ee0405b13fa223074077fd31f2d519fcd2f7b1656596db029",
    "bank",
    "address",
    "9hqbqkufc4nmi1fvncj8b3ieyh9hunslazcsrhwjozjpzbmrciq",
    "tokenjay.app",
    "liquidity",
    "visit",
    "tokenjay](https://tokenjay.app/",
    "open",
    "purchase",
    "tokens",
    "ergopay",
    "exchange",
    "rate",
    "amount",
    "bash",
    "update",
    "system",
    "upgrade",
    "install",
    "curl",
    "https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh",
    "restart",
    "terminal",
    "nginx",
    "project",
    "directory",
    "/var",
    "html",
    "mkdir",
    "fleetsdk",
    "dependency",
    "@fleet",
    "webpack",
    "loader",
    "typescript",
    "configuration",
    "files",
    "webpack.config.js",
    "javascript",
    "const",
    "path",
    "require('path",
    "htmlwebpackplugin",
    "require('html",
    "module.export",
    "mode",
    "development",
    "entry",
    "./src",
    "devtool",
    "inline",
    "source",
    "module",
    "rule",
    "test",
    "/\\.tsx?$/",
    "/node_modules/",
    "extension",
    "output",
    "filename",
    "path.resolve(__dirname",
    "dist",
    "template",
    "tsconfig.json",
    "json",
    "compileroption",
    "outdir",
    "sourcemap",
    "noimplicitany",
    "target",
    "allowjs",
    "code",
    "file",
    "index.ts",
    "import",
    "outputbuilder",
    "transactionbuilder",
    "babelswapplugin",
    "replace",
    "value",
    "100604000e20${assetid}0400040005000500d803d601e30004d602e4c6a70408d603e4c6a7050595e67201d804d604b2a5e4720100d605b2db63087204730000d606db6308a7d60799c1a7c17204d1968302019683050193c27204c2a7938c720501730193e4c672040408720293e4c672040505720393e4c67204060ec5a796830201929c998c7205029591b1720673028cb272067303000273047203720792720773057202",
    "fetch",
    "async",
    "response",
    "fetch(`https://api.ergoplatform.com",
    "unspent",
    "byergotree/${ergotree",
    "await",
    "response.json",
    "babelbox",
    "json.items[0",
    "additionalregister",
    "babelbox.additionalregister",
    "r5?.serializedvalue",
    "r6?.serializedvalue",
    "r7?.serializedvalue",
    "r9?.serializedvalue",
    "catch",
    "error",
    "null",
    "main",
    "function",
    "babelfees",
    "ergoconnector.nautilus.connect",
    "defaultaddress",
    "ergo.get_change_address",
    "height",
    "fetchbabelbox",
    "console.log(\"no",
    "unsignedtx",
    "transactionbuilder(height",
    ".extend(babelswapplugin(babelbox",
    "tokenid",
    "assetid",
    ".sendchangeto(babelboxbankaddr",
    ".toeip12object",
    "signedtx",
    "txid",
    "console.log(\"transaction",
    "console.error(\"transaction",
    "event",
    "listener",
    "paywithbabelfees",
    "paywithbabelfees.addeventlistener('click",
    "interface",
    "create",
    "lang=\"en",
    "head",
    "charset=\"utf-8",
    "meta",
    "name=\"viewport",
    "device",
    "width",
    "scale=1.0",
    "title",
    "babelfees</title",
    "script",
    "defer",
    "src=\"http://your",
    "domain",
    "bundle.js\"></script",
    "body",
    "15px",
    "button",
    "sign",
    "fees</button",
    "build",
    "deploy",
    "compile",
    "testing",
    "settlement",
    "page",
    "self",
    "signing",
    "security",
    "notes",
    "change",
    "handling",
    "evaluation",
    "attack",
    "monitoring",
    "monitor",
    "status",
    "spending",
    "reference",
    "implementations",
    "nautilus",
    "implementation](https://github.com",
    "capt",
    "nemo429",
    "appkit",
    "ergoplatform",
    "pull/204",
    "plugin](https://fleet",
    "sdk.github.io",
    "docs",
    "plugins",
    "additional",
    "resource",
    "eip-0031",
    "specification](https://github.com",
    "blob",
    "master",
    "documentation](https://fleet",
    "platform",
    "documentation](https://api.ergoplatform.com",
    "consideration",
    "discovery",
    "identification",
    "representation",
    "contract",
    "parameter",
    "endpoint",
    "https://api.ergoplatform.com/api/v1/boxes/unspent/byergotree/{ergotree",
    "requirement",
    "calculation",
    "display",
    "calculate",
    "show",
    "provide",
    "comparison",
    "management",
    "mempool",
    "implement",
    "support",
    "handle",
    "failure",
    "considerations",
    "tools",
    "integration"
  ],
  "sections": [
    {
      "heading": "Overview",
      "content": "This guide provides detailed instructions for implementing Babel fees in your Ergo applications. The implementation example demonstrates how to enable users to pay transaction fees using tokens instead of ERG, which is particularly useful for new users who may not have ERG in their wallets."
    },
    {
      "heading": "Prerequisites",
      "content": "Node.js and npm (tested with Node v20.10.0)\nFleet SDK core and babel-fees plugin\nWebpack for building\nA minted token to use for Babel fees\nA Nautilus wallet\nUbuntu 22.04 LTS (for server setup)"
    },
    {
      "heading": "1. Token Preparation",
      "content": "First, mint the token you wish to use for Babel Fees:\n1. Create your token (e.g., \"lightning tokens\" with 1,000,000 supply)\n2. Note the Asset ID (e.g., 272a4aeba6d1596ee0405b13fa223074077fd31f2d519fcd2f7b1656596db029)\n3. Note the bank wallet address (e.g., 9hqbqkUfC4nmi1fVNcj8B3iEYh9HUnsLazcsRHwjoZJpZbmrCiq)"
    },
    {
      "heading": "2. Create Babel Fee Box",
      "content": "Use TokenJay.app to create a Babel Box providing liquidity:\n1. Visit Tokenjay\n2. Click \"Open App\"\n3. Navigate to \"Purchase Tokens\" \u2192 \"Babel Fee Liquidity\"\n4. Connect your ErgoPay wallet\n5. Create new babel fee box\n6. Set your exchange rate (e.g., 0.0001 ERG per 1 token)\n7. Set liquidity amount (e.g., 10,000 tokens & 100 ERG)"
    },
    {
      "heading": "3. Server Setup",
      "content": "```bash"
    },
    {
      "heading": "Update system",
      "content": "sudo apt-get update\nsudo apt-get upgrade"
    },
    {
      "heading": "Install NVM",
      "content": "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash"
    },
    {
      "heading": "Restart terminal or reboot",
      "content": "nvm install v20.10.0\nnvm install-latest-npm"
    },
    {
      "heading": "Install nginx",
      "content": "sudo apt-get install nginx"
    },
    {
      "heading": "Create project directory",
      "content": "cd /var/www/html\nmkdir fleetsdk\ncd fleetsdk/"
    },
    {
      "heading": "Install dependencies",
      "content": "npm install @fleet-sdk/core\nnpm install --save-dev webpack webpack-cli ts-loader html-webpack-plugin typescript\nnpm install @fleet-sdk/babel-fees-plugin\n```"
    },
    {
      "heading": "4. Configuration Files",
      "content": "Create webpack configuration (webpack.config.js):\n```javascript\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.ts',\n    devtool: 'inline-source-map',\n    module: {\n        rules: [\n        {\n            test: /.tsx?$/,\n            use: 'ts-loader',\n            exclude: /node_modules/,\n        },\n        ],\n    },\n    resolve: {\n        extensions: ['.tsx', '.ts', '.js'],\n    },\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: 'index.html'\n        })\n    ]\n};\n```\nCreate TypeScript configuration (tsconfig.json):\njson\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./dist/\",\n        \"sourceMap\": true,\n        \"noImplicitAny\": true,\n        \"module\": \"es6\",\n        \"target\": \"es5\",\n        \"jsx\": \"react\",\n        \"allowJs\": true\n    },\n    \"include\": [\n        \"./src/**/*\"\n    ]\n}"
    },
    {
      "heading": "5. Implementation Code",
      "content": "Create the main implementation file (src/index.ts):\n```typescript\nimport { OutputBuilder, TransactionBuilder } from '@fleet-sdk/core';\nimport { BabelSwapPlugin } from '@fleet-sdk/babel-fees-plugin';\n// Configuration - Replace with your values\nconst AssetID = \"272a4aeba6d1596ee0405b13fa223074077fd31f2d519fcd2f7b1656596db029\";\nconst BabelBoxBankAddr = \"9hqbqkUfC4nmi1fVNcj8B3iEYh9HUnsLazcsRHwjoZJpZbmrCiq\";\nconst ergoTree = 100604000e20${AssetID}0400040005000500d803d601e30004d602e4c6a70408d603e4c6a7050595e67201d804d604b2a5e4720100d605b2db63087204730000d606db6308a7d60799c1a7c17204d1968302019683050193c27204c2a7938c720501730193e4c672040408720293e4c672040505720393e4c67204060ec5a796830201929c998c7205029591b1720673028cb272067303000273047203720792720773057202;\n// Fetch Babel Box from API\nconst fetchBabelBox = async () => {\n    try {\n        const response = await fetch(https://api.ergoplatform.com/api/v1/boxes/unspent/byErgoTree/${ergoTree});\n        const json = await response.json();\n        const babelBox = json.items[0];\nconst additionalRegisters = { \n        R4: babelBox.additionalRegisters.R4?.serializedValue,\n        R5: babelBox.additionalRegisters.R5?.serializedValue,\n        R6: babelBox.additionalRegisters.R6?.serializedValue,\n        R7: babelBox.additionalRegisters.R7?.serializedValue,\n        R8: babelBox.additionalRegisters.R8?.serializedValue,\n        R9: babelBox.additionalRegisters.R9?.serializedValue \n    };\n\n    return { ...babelBox, additionalRegisters };\n} catch (error) {\n    console.error('Failed to fetch Babel Box:', error);\n    return null;\n}\n}\n// Main Babel Fees transaction function\nconst BabelFees = async () => {\n    try {\n        const connected = await ergoConnector.nautilus.connect();\n        if (connected) {\n            const defaultAddress = await ergo.get_change_address();\n            const height = await ergo.get_current_height();\n            const babelBox = await fetchBabelBox();\nif (!babelBox) {\n            console.log(\"No suitable Babel Bo..."
    },
    {
      "heading": "6. Create HTML Interface",
      "content": "Create babelfees.html:\n```html\nErgo BabelFees\n\n\n\n\n\nSelf Sign with Babel Fees\n```"
    },
    {
      "heading": "7. Build and Deploy",
      "content": "Compile the TypeScript code:\nbash\ncd /var/www/html/fleetsdk\nnpx webpack"
    },
    {
      "heading": "Testing",
      "content": "To test your implementation:\nCreate a new Nautilus wallet (0 assets initially)\nTransfer appropriate amount of tokens to the new wallet\nWait for transaction settlement\nConnect to your test page using the wallet\nAttempt self-signing with Babel fees"
    },
    {
      "heading": "Important Security Notes",
      "content": "Change Address Handling:\nCurrent implementation sends change to BabelBoxBankAddr\nUsing defaultAddress is cleaner but requires security evaluation\n\nConsider potential liquidity draining attacks\n\n\nTransaction Monitoring:\n\nImplement proper error handling\nMonitor transaction status\nHandle concurrent spending attempts"
    },
    {
      "heading": "Reference Implementations",
      "content": "Nautilus Wallet implementation\nAppKit implementation\nFleet SDK Babel fees plugin"
    },
    {
      "heading": "Additional Resources",
      "content": "EIP-0031 Specification\nFleet SDK Documentation\nErgo Platform API Documentation"
    },
    {
      "heading": "Box Discovery and Identification",
      "content": "The hexadecimal representation of the Babel Fees contract is:\n100604000e20{tokenId}0400040005000500d803d601e30004d602e4c6a70408d603e4c6a7050595e67201d804d604b2a5e4720100d605b2db63087204730000d606db6308a7d60799c1a7c17204d1968302019683050193c27204c2a7938c720501730193e4c672040408720293e4c672040505720393e4c67204060ec5a796830201929c998c7205029591b1720673028cb272067303000273047203720792720773057202\nReplace {tokenId} with the specific token ID and use this as a parameter in the API endpoint: https://api.ergoplatform.com/api/v1/boxes/unspent/byErgoTree/{ErgoTree}"
    },
    {
      "heading": "Implementation Requirements",
      "content": "Fee Calculation and Display\n\nCalculate required Babel fee amount\nShow clear exchange rates\nProvide fee comparisons\nDisplay transaction status updates\n\n\n\nTransaction Management\n\nMonitor mempool for concurrent spending\nImplement chained transaction support\nHandle transaction failures gracefully\nSupport multiple users spending same box\n\n\n\nSecurity Considerations\n\nValidate all Babel fee box parameters\nImplement proper change address handling\nConsider potential liquidity draining attacks"
    },
    {
      "heading": "Development Tools",
      "content": "Fleet SDK plugin: @fleet-sdk/babel-fees-plugin\nAPI integration endpoints\nSmart contract templates"
    }
  ],
  "qa_pairs": []
}