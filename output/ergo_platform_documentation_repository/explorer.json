{
  "title": "Explorer",
  "source_url": "docs/dev/stack/explorer/explorer_local.md",
  "summary": "# Explorer\n\n## Intro \n\nThe Ergo Blockchain Explorer is your interface with the blockchain and provides four services. 1. `modules/chain-grabber`: Dumps aggregated data blockchain -> database\n2. `modules/explorer-api`: Provides a set of HTTP API methods for querying on/off-chain data. 3. `modules/utx-tracker`: Dumps unconfirmed transactions from the mempool to local database\n4.",
  "keywords": [
    "intro",
    "ergo",
    "blockchain",
    "explorer",
    "interface",
    "service",
    "module",
    "chain",
    "grabber",
    "dumps",
    "datum",
    "database",
    "http",
    "method",
    "tracker",
    "transaction",
    "mempool",
    "broadcaster",
    "peer",
    "source",
    "ergoplatform",
    "frontend",
    "resource",
    "docker",
    "compose](https://github.com",
    "backend",
    "wiki",
    "deploying",
    "services",
    "compose",
    "raspberry",
    "device](rpi",
    "toolkit](https://github.com",
    "bootstrap](https://github.com",
    "bootstrap",
    "setup](https://github.com",
    "abchrisxyz",
    "setup",
    "node",
    "graphql",
    "option",
    "nixos",
    "instance",
    "directory",
    "mkdir",
    "file",
    "bash",
    "echo",
    "db_url",
    "jdbc",
    "postgresql://postgres:5432",
    "db_user",
    "postgre",
    "db_pass=1234",
    ".db_env",
    ".redis_env",
    "redis://localhost:6379",
    "configuration",
    "entry",
    "field",
    "docker-compose.yaml",
    ".http_env",
    "clone",
    "https://github.com/ergoplatform/explorer-frontend",
    "build",
    "sudo",
    "/front",
    "config",
    "app.config.js",
    "https://github.com/ergoplatform/explorer-backend",
    ".x_env",
    "default",
    "application.conf",
    "network",
    "booting",
    "redi",
    "adminer",
    "documentaion",
    "/explorer/",
    "following",
    "point",
    "environments.url",
    "environment",
    "name",
    "mainnet",
    "typeof",
    "global.__app_config",
    "yaml",
    "version",
    "image",
    "nginx:1.17.9",
    "alpine",
    "port",
    "443:443",
    "volume",
    "/data",
    "nginx",
    "nginx.conf:/etc",
    "nginx.conf",
    "ssl:/etc",
    "/explorer",
    "front",
    "share",
    "html",
    "config:/usr",
    "depends_on",
    "postgres:11",
    "shm_size",
    "password",
    "postgres:/var",
    "postgresql",
    "data",
    "restart",
    "command",
    "server",
    "redis:/usr",
    "oskin1",
    "redis",
    "manual",
    "prerequsite",
    "update",
    "upgrade",
    "sdkman",
    "curl",
    "https://get.sdkman.io",
    "java",
    "install",
    "createuser",
    "load",
    "schema",
    "psql",
    "core",
    "v9__schema.sql"
  ],
  "sections": [
    {
      "heading": "Intro",
      "content": "The Ergo Blockchain Explorer is your interface with the blockchain and provides four services.\nmodules/chain-grabber: Dumps aggregated data blockchain -> database\nmodules/explorer-api: Provides a set of HTTP API methods for querying on/off-chain data.\nmodules/utx-tracker: Dumps unconfirmed transactions from the mempool to local database\nmodules/utx-broadcaster: Broadcasts unconfirmed transactions to a set of known peers"
    },
    {
      "heading": "Sources",
      "content": "explorer-backend\nexplorer-frontend"
    },
    {
      "heading": "Resources",
      "content": "Deploying Explorer services with Docker Compose\nHow to setup the Chain-Grabber module on a Raspberry Pi device\nErgo Nix Toolkit\nErgo Bootstrap\nergo-setup is a Docker based Ergo setup (Node, Explorer & GraphQL). Somewhat similar to Ergo Bootstrap except it offers much less options and is not NixOS-based."
    },
    {
      "heading": "Running your own instance of Explorer",
      "content": "First we'll create a working directory and cd into it.\nbash\nmkdir explorer && cd \"$_\""
    },
    {
      "heading": "Creating env files",
      "content": ".db_env\nbash\necho \"DB_URL=jdbc:postgresql://postgres:5432/explorer\nDB_USER=postgres\nDB_PASS=1234\" > .db_env\n.redis_env\nbash\necho \"REDIS_URL=redis://localhost:6379\" > .redis_env\nAdditional configurations are made by adding entries to the env_file field in docker-compose.yaml. ie, .http_env"
    },
    {
      "heading": "explorer-frontend",
      "content": "bash\ngit clone https://github.com/ergoplatform/explorer-frontend\nsudo mkdir -p front/build\nsudo cp -r explorer-frontend/build /front\nsudo mkdir front/config\nsudo vi front/config/app.config.js\nsudo vi docker-compose.yaml"
    },
    {
      "heading": "explorer-backend",
      "content": "```bash\ngit clone https://github.com/ergoplatform/explorer-backend\ncd explorer-backend/modules"
    },
    {
      "heading": "in default config of the corresponding service",
      "content": "vi chain-grabber/src/main/resources/application.conf\nvi explorer-api/src/main/resources/application.conf\nvi utx-tracker/src/main/resources/application.conf\nvi utx-broadcaster/src/main/resources/application.conf"
    },
    {
      "heading": "Create docker network",
      "content": "docker network create explorer-network\n```"
    },
    {
      "heading": "Booting",
      "content": "Configure other services (such as: nginx, postgres, redis, adminer) according to their documentaion\n```bash"
    },
    {
      "heading": "Run from /explorer/",
      "content": "docker-compose up -d"
    },
    {
      "heading": "To make sure everything up and working.",
      "content": "docker ps -a\n```"
    },
    {
      "heading": "Files",
      "content": "paste the following into app.config.js\napiUrl points to your to backend API. \nenvironments.url points to your frontend\n```bash\nvar APP_CONFIG = {\n  apiUrl: 'https://api.ergoplatform.org',\n  alternativeLogo: false, // true by default\n  environments: [\n     {\n       name: 'Mainnet',\n       url: 'https://explorer.ergoplatform.org',\n     },\n  ],\n};\nif (typeof global !== 'undefined') {\n  global.APP_CONFIG = APP_CONFIG;\n}\n```\ndocker-compose.yaml\n```yaml\nversion: '3.4'\nservices:\n  nginx:\n    image: nginx:1.17.9-alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - /data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - /data/nginx/ssl:/etc/ssl:ro\n      - /explorer/front/build:/usr/share/nginx/html\n      - /explorer/front/config:/usr/share/nginx/config\n    networks:\n      - explorer-network\n    depends_on:\n      - api\n  postgres:\n    image: postgres:11-alpine\n    shm_size: 2g\n    environment:\n      POSTGRES_PASSWORD: \n    ports:\n      - \"5432:5432\"\n    volumes:\n      - /data/postgres:/var/lib/postgresql/data:rw\n    networks:\n      - explorer-network\n  redis:\n    image: redis:latest\n    restart: always\n    command: [\"redis-server\"]\n    ports:\n      - \"127.0.0.1:6379:6379\"\n    volumes:\n      - /data/redis:/usr/local/etc/redis\n    networks:\n      - explorer-network\n  adminer:\n    image: adminer:4-standalone\n    ports:\n      - \"8082:8080\"\n    networks:\n      - explorer-network\n  grabber:\n    image: oskin1/chain-grabber:latest\n    networks:\n      - explorer-network\n    env_file:\n      - .db_env\n    depends_on:\n      - postgres\n  api:\n    image: oskin1/explorer-api:latest\n    ports:\n      - \"8081:8081\"\n    networks:\n      - explorer-network\n    env_file:\n      - .db_env\n    depends_on:\n      - postgres\n      - redis\n  utx-tracker:\n    image: oskin1/utx-tracker:latest\n    networks:\n      - explorer-network\n    env_file:\n      - .db_env\n    depends_on:\n      - postgres\n  utx-broadcaster:\n    image: oskin1/utx-broadcaster:latest\n    networks:\n      - explorer-network\n    env_file..."
    },
    {
      "heading": "Prerequsites",
      "content": "```\nsudo apt update\nsudo apt full-upgrade"
    },
    {
      "heading": "SDKMAN",
      "content": "curl -s \"https://get.sdkman.io\" | bash\nsdk install java\nsdk install sbt"
    },
    {
      "heading": "PostgreSQL",
      "content": "sudo apt install postgresql\nsudo su postgres\ncreateuser ergo -P --interactive\n```\nLoad database schema\npsql\ncreate database explorer;\n\\c explorer;\n\\i /explorer-backend/modules/explorer-core/src/main/resources/db/V9__Schema.sql\ndocker build explorer-backend/modules/chain-grabber/\ndocker build explorer-backend/modules/chain-grabber/\ndocker build explorer-backend/modules/chain-grabber/\ndocker build explorer-backend/modules/chain-grabber/"
    }
  ],
  "qa_pairs": []
}