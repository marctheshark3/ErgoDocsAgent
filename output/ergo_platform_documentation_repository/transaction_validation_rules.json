{
  "title": "Transaction Validation Rules",
  "source_url": "docs/dev/protocol/tx/validation.md",
  "summary": "# Transaction Validation Rules The validation of a single transaction is divided into two stages: stateless checks and stateful checks. Stateless checks are performed solely based on the transaction itself, while stateful checks require knowledge of the current state, including the UTXO set or a part of it, and the specific boxes a transaction is destroying, along with their proof of authenticity (against a root hash included in the last block header). **Stateless Checks:**\n\n-   A transaction must spend at least one input and create at least one output. A transaction can spend up to $32767$ inputs and create up to $32767$ outputs.",
  "keywords": [
    "transaction",
    "validation",
    "rules",
    "stage",
    "stateless",
    "check",
    "knowledge",
    "state",
    "utxo",
    "part",
    "proof",
    "authenticity",
    "root",
    "hash",
    "block",
    "header",
    "checks",
    "input",
    "output",
    "amount",
    "asset",
    "note",
    "consideration",
    "value",
    "description",
    "https://github.com/ergoplatform/ergo/issues/581",
    "stateful",
    "member",
    "datum",
    "spending",
    "cost",
    "verification",
    "token",
    "limit",
    "miner",
    "voting",
    "kind",
    "identifier",
    "case",
    "rule",
    "preservation",
    "issuance",
    "equality",
    "node",
    "verify",
    "verifytransactions",
    "transformation",
    "todo",
    "mention",
    "emission",
    "extractemissionbox",
    "function",
    "extension"
  ],
  "sections": [
    {
      "heading": "Transaction Validation Rules",
      "content": "The validation of a single transaction is divided into two stages: stateless checks and stateful checks. Stateless checks are performed solely based on the transaction itself, while stateful checks require knowledge of the current state, including the UTXO set or a part of it, and the specific boxes a transaction is destroying, along with their proof of authenticity (against a root hash included in the last block header).\nStateless Checks:\nA transaction must spend at least one input and create at least one output. A transaction can spend up to $32767$ inputs and create up to $32767$ outputs.\nAll output amounts must be non-negative.\nAn output cannot contain more than four assets, and all the assets' amounts must be positive.\nThe transaction outputs collectively cannot contain more than 16 assets.\nNotes\n\nConsideration: Should we allow a 0-value?\nCheck box and transaction sizes\nPrecise description to be provided during https://github.com/ergoplatform/ergo/issues/581\nStateful Checks:\nAll the input boxes must be members of the UTXO set or created by other transactions within the same block. \nAll the data input boxes must be members of the UTXO set or created by other transactions within the same block. \nThe total input and output ERG amounts must be the same, with overflow checks.\nAll the inputs must have valid spending proofs.\nThe total transaction cost, which includes the cost of all spending proofs verification and the cost of all tokens in transaction inputs and outputs validation, should not exceed a limit per block (adjustable via miners voting).\nFor each kind of asset in the outputs, the total output amount for the asset should not exceed the total input amount unless the asset identifier is the identifier of the first input; in this case, the total output amount must be positive. This rule ensures asset preservation and allows for new asset issuance.\nNote: For the total input amount of an asset, we do not require strict equality of the input and output amounts: t..."
    },
    {
      "heading": "Full-Block Validation Rules",
      "content": "The following rules apply for block validation when a node is verifying transactions ($VerifyTransactions = 1$):\nEvery transaction in a block must reference inputs from the UTXO set or created by previous transactions in the block. \nNote: An input cannot refer to an output of a subsequent block transaction.\nEvery transaction in a block must be valid (refer to the transaction validation rules above).\nThe total cost of validation of all the inputs of all the transactions in the block must not exceed the allowed limit.\nThe root hash of the authenticated UTXO set after applying the block transactions must match the one in the header.\nFor a node maintaining UTXO, the hash of the calculated state transformations proof must match the one announced in the block's header.\nThe header must be valid (refer to header validation rules).\nTODO: (Mention emission rules. The extractEmissionBox function may have bugs. Extension validation rules need to be added.)"
    }
  ],
  "qa_pairs": []
}