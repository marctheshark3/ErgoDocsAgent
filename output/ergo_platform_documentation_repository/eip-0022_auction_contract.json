{
  "title": "EIP-0022: Auction Contract",
  "source_url": "docs/dev/tokens/standards/eip22.md",
  "summary": "---\ntags:\n  - EIP\n---\n\n# EIP-0022: Auction Contract\n\n> \ud83d\udd17 From [EIP-0022:](https://github.com/ergoplatform/eips/blob/master/eip-0022.md)\n\n\n## Motivation \nDecentralized auctioning of any kind of tokens (artwork, share tokens, etc.) is an important part of any blockchain. This EIP is proposing the auction contract with various features listed in the [Design](#design) section\n\n\n## Design\nThis proposed contract allows any kind of tokens to be auctioned while supporting the following features:  \n\n- Any token as the auction's currency alongside ERG\n- \"Buy it now\" which allows a buyer to instantly buy the auctioned token by paying the predefined amount in the auction's currency\n- Auction duration as timestamp which is much more precise than block height and is independent of the network difficulty\n- Auto extending the duration near the end of the auction based on a global config\n- Minimum bid step - each bidder has to increase the previous bid at least by this amount\n- Royalty - The original owner (whomever issued the token) gets a share of the auction every time his/her token is auctioned using a global config\n\n## The contract\n```scala\n{\n  // R4: The seller's ergo tree\n  // R5: Current bidder's ergo tree\n  // R6: (Minimum bid, minimum step)\n  // R7: The auction's end time in timestamp\n  // R8: The auction's \"Buy it now\" amount.",
  "keywords": [
    "eip-0022",
    "auction",
    "contract",
    "eip-0022:](https://github.com",
    "ergoplatform",
    "blob",
    "master",
    "eip-0022.md",
    "motivation",
    "kind",
    "token",
    "artwork",
    "share",
    "part",
    "blockchain",
    "feature",
    "design](#design",
    "section",
    "currency",
    "buyer",
    "amount",
    "duration",
    "timestamp",
    "block",
    "height",
    "network",
    "difficulty",
    "auto",
    "config",
    "minimum",
    "step",
    "bidder",
    "royalty",
    "owner",
    "whomever",
    "time",
    "seller",
    "ergo",
    "tree",
    "info",
    "purpose",
    "json",
    "coll[byte",
    "initialbid",
    "starttime",
    "start",
    "description",
    "future",
    "tokens(0",
    "tokens(1",
    "datainputs(0",
    "house",
    "configuration",
    "artist",
    "implementor",
    "miner",
    "withdrawal",
    "coll[long",
    "value",
    "extendthreshold",
    "extendnum",
    "1000l",
    "40min",
    "30min",
    "originalissuancebox",
    "spent",
    "percentage",
    "address",
    "self.r4[coll[byte]].get",
    "currbidder",
    "self.r5[coll[byte]].get",
    "minbid",
    "self.r6[coll[long]].get(0",
    "minstep",
    "self.r6[coll[long]].get(1",
    "endtime",
    "self.r7[long].get",
    "buyitnowamount",
    "sigusd",
    "auctioncurrency",
    "self.tokens.size",
    "self.tokens(1)._1",
    "iscurrencyerg",
    "getboxval",
    "b.value",
    "b.tokens.size",
    "b.tokens(0)._1",
    "b.tokens(0)._2",
    "b.tokens(1)._1",
    "b.tokens(1)._2",
    "currbid",
    "getboxval(self",
    "auctionconfig",
    "context.datainputs(0",
    "isnextbid",
    "extendconfig",
    "extendconfig.get(0",
    "extendconfig.get(1",
    "newendtime",
    "context.preheader.timestamp",
    "outputs(1",
    "refund",
    "getboxval(newself",
    "check",
    "newself.value",
    "self.value",
    "tokens",
    "newself.tokens(0",
    "self.tokens(0",
    "isusingbuyitnow",
    "newself.propositionbytes",
    "self.propositionbytes",
    "getboxval(oldbidrefundbox",
    "r4[coll[byte]].get",
    "type",
    "r6[coll[long]].get.size",
    "r6[coll[long]].get(0",
    "r6[coll[long]].get(1",
    "r7[long].get",
    "newself",
    "self.r9[coll[byte",
    "isfinishedwithbid",
    "winnerbox",
    "auctionfeebox",
    "sellerbox",
    "outputs.size",
    "self",
    "outputs(2",
    "outputs(3",
    "outputs(outputs.size",
    "r4[int].get",
    "auctionfeeto",
    "r5[coll[byte]].get",
    "artistshareperc",
    "r4[int].isdefined",
    "max(originalissuancebox",
    "artistshare",
    "maxfee",
    "r6[long].get",
    "minerfeeincurrency",
    "artistgetshisshare",
    "blake2b256(originalissuancebox.bytes",
    "self.tokens(0)._1",
    "integrity",
    "line",
    "originalissuancebox.propositionbyte",
    "buyitnow",
    "getboxval(auctionfeebox",
    "auctionfee",
    "auctionfeebox.propositionbytes",
    "winnerbox.tokens(0",
    "winnerbox.propositionbytes",
    "getboxval(sellerbox",
    "sellerbox.propositionbyte",
    "case",
    "winner",
    "isfinishedwithoutbid",
    "outputs(0).tokens(0",
    "getboxval(outputs(0",
    "validconfig",
    "auctionconfig.tokens(0)._1",
    "auction_config_token_id",
    "sigmaprop((isnextbid"
  ],
  "sections": [
    {
      "heading": "EIP-0022: Auction Contract",
      "content": "\ud83d\udd17 From EIP-0022:"
    },
    {
      "heading": "Motivation",
      "content": "Decentralized auctioning of any kind of tokens (artwork, share tokens, etc.) is an important part of any blockchain. This EIP is proposing the auction contract with various features listed in the Design section"
    },
    {
      "heading": "Design",
      "content": "This proposed contract allows any kind of tokens to be auctioned while supporting the following features:\nAny token as the auction's currency alongside ERG\n\"Buy it now\" which allows a buyer to instantly buy the auctioned token by paying the predefined amount in the auction's currency\nAuction duration as timestamp which is much more precise than block height and is independent of the network difficulty\nAuto extending the duration near the end of the auction based on a global config\nMinimum bid step - each bidder has to increase the previous bid at least by this amount\nRoyalty - The original owner (whomever issued the token) gets a share of the auction every time his/her token is auctioned using a global config"
    },
    {
      "heading": "The contract",
      "content": "```scala\n{\n  // R4: The seller's ergo tree\n  // R5: Current bidder's ergo tree\n  // R6: (Minimum bid, minimum step)\n  // R7: The auction's end time in timestamp\n  // R8: The auction's \"Buy it now\" amount. -1 if it is not enabled.\n  // R9: Auction info that is needed for UI/UX purposes - stringfied json encoded as Coll[Byte]:\n  //     - initialBid: The auction's initial bid\n  //     - startTime: The auction's start time\n  //     - description: The auction's description\n  //     - Any other info needed in the future\n  //\n  // tokens(0): auctioned token\n  // tokens(1): current bid for non-ERG auctions - doesn't exist otherwise\n  //\n  // dataInputs(0): Auction house configuration - contains configs like UI fee and artist fee\n  //     - R4: UI fee in thousand, e.g. 10 for 1% or 5 for 0.5%\n  //     - R5: UI implementor's ergo tree\n  //     - R6: Maximum miner fee for withdrawal\n  //     - R7: Extend configuration as a Coll[Long] with two values (extendThreshold, extendNum)\n  //             e.g., (30 * 60 * 1000L, 40 * 60 * 1000L) to extend the duration for 40min if 30min is left when the bid is placed\n// originalIssuanceBox: Spent box with ID equal to the NFT ID\n  //     - R4: Royalty percentage - 0 if empty\n  //     - R5: Artist address\nval seller = SELF.R4[Coll[Byte]].get\n  val currBidder = SELF.R5[Coll[Byte]].get\n  val minBid = SELF.R6[Coll[Long]].get(0)\n  val minStep = SELF.R6[Coll[Long]].get(1)\n  val endTime = SELF.R7[Long].get\n  val buyItNowAmount = SELF.R8[Long].get\n// auction currency can be any token like SigUSD\n  val auctionCurrency = if (SELF.tokens.size > 1) SELF.tokens(1)._1\n                        else CollByte\n  val isCurrencyERG = auctionCurrency.size == 0\n  val getBoxVal = {(b: Box) => {\n     if (isCurrencyERG) b.value\n     else {\n       if (b.tokens.size == 1 && b.tokens(0)._1 == auctionCurrency) b.tokens(0)._2\n       else if (b.tokens.size == 2 && b.tokens(1)._1 == auctionCurrency) b.tokens(1)._2\n       else 0L\n     }\n  }}\nval currBid = getBoxVal(SELF)\n..."
    }
  ],
  "qa_pairs": []
}