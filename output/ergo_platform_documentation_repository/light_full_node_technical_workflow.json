{
  "title": "Light Full Node Technical Workflow",
  "source_url": "docs/node/modes/light-techworkflow.md",
  "summary": "# Light Full Node Technical Workflow The light full node operates by checking all the full blocks or a specified suffix of the full blockchain, depending on the settings. It starts from a trusted pre-genesis digest or a digest within the blockchain. To obtain a new digest from an old one, the light full node utilizes AD-transformations (authenticated dictionary transformations) block sections that contain batch-proof for UTXO transformations. However, it only stores a single digest and does not retain any transaction data.",
  "keywords": [
    "light",
    "full",
    "node",
    "technical",
    "workflow",
    "operate",
    "block",
    "suffix",
    "blockchain",
    "setting",
    "digest",
    "transformation",
    "section",
    "batch",
    "proof",
    "utxo",
    "transaction",
    "datum",
    "information",
    "paper](https://eprint.iacr.org/2016/994",
    "depth",
    "past",
    "checktransaction",
    "genesis",
    "check",
    "trust",
    "validity",
    "step",
    "ergosyncinfo",
    "message",
    "peer",
    "response",
    "request",
    "header",
    "history.apply(header).issuccess",
    "localscore",
    "networkscore",
    "goto",
    "blacklist",
    "blocktransactions",
    "adproofs",
    "value",
    "history",
    "bootstrapping",
    "process",
    "history.lastbestheaders(blockstokeep).foreach",
    "random",
    "message(getadproofsheader(header",
    "modifier",
    "todo",
    "progressinfo",
    "state().apply(progressinfo",
    "mode",
    "adproof",
    "/*drop",
    "sequence",
    "history.drop(blocktransactions.headerid"
  ],
  "sections": [
    {
      "heading": "Light Full Node Technical Workflow",
      "content": "The light full node operates by checking all the full blocks or a specified suffix of the full blockchain, depending on the settings. It starts from a trusted pre-genesis digest or a digest within the blockchain.\nTo obtain a new digest from an old one, the light full node utilizes AD-transformations (authenticated dictionary transformations) block sections that contain batch-proof for UTXO transformations. However, it only stores a single digest and does not retain any transaction data.\nFor more detailed information, refer to this paper.\nAdditional settings:\nThe light full node supports the following additional settings:\ndepth - from which block in the past to checktransactions (if 0, then go from genesis).\nadditional-checks - light-full node trusts the previous digest and checks current digest validity by using the previous one as well as AD-transformations.\nadditional-depth - depth to start additional checks from."
    },
    {
      "heading": "Workflow Steps",
      "content": "Send ErgoSyncInfo message to connected peers.\nGet a response with an INV message containing the IDs of blocks that are better than the current best block.\nRequest headers for all the IDs received in step 2.\nUpon receiving a header, perform the following checks:\njava\nif (History.apply(header).isSuccess) {\n    if (localScore != networkScore) {\n        GOTO 1\n    } else {\n        GOTO 5\n    }\n} else {\n    blacklist peer\n}\nRequest BlockTransactions and ADProofs starting from the specified BlocksToKeep value in the history. This is done after the node bootstrapping process and involves requesting the last header:\njava\nHistory.lastBestHeaders(BlocksToKeep).foreach { header =>\n    send message(GetBlockTransactionsForHeader(header)) to Random full node\n    send message(GetAdProofsHeader(header)) to Random full node\n}\nUpon receiving a modifier (BlockTransactions or ADProofs), perform the following checks:\njava\nif (History.apply(modifier) == Success(ProgressInfo)) {\n    /* TODO if history now contains both ADProofs and BlockTransactions,\n    it should return ProgressInfo with both of them. Otherwise,\n    it should return an empty ProgressInfo */\n    if (State().apply(ProgressInfo) == Success((newState, ADProofs))) {\n        if (\"mode\" == \"pruned-full\") {\n            drop BlockTransactions and ADProofs older than BlocksToKeep\n        }\n    } else {\n        /*Drop Header from history because its transaction sequence is not valid*/\n        History.drop(BlockTransactions.headerId)\n    }\n}"
    }
  ],
  "qa_pairs": []
}