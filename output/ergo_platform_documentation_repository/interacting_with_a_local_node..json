{
  "title": "Interacting with a local node.",
  "source_url": "docs/dev/stack/appkit/appkit-node.md",
  "summary": "# Interacting with a local node. Among other things, the Appkit library allows us to communicate with Ergo nodes via the [REST API](https://github.com/ergoplatform/ergo/blob/master/src/main/resources/api/openapi.yaml). Let's see how we can write ErgoTool - a simple Java console application (similar to [ergo-tool](https://github.com/ergoplatform/ergo-tool) utility) which uses Appkit library. ErgoTool allows to create and send a new transaction to any existing Ergo node on the network which. A new node can also be started locally and thus available at `http://localhost:9052/`.",
  "keywords": [
    "node",
    "thing",
    "appkit",
    "library",
    "ergo",
    "rest",
    "api](https://github.com",
    "ergoplatform",
    "blob",
    "master",
    "resource",
    "openapi.yaml",
    "ergotool",
    "java",
    "console",
    "application",
    "tool",
    "utility",
    "transaction",
    "network",
    "http://localhost:9052/",
    "wiki",
    "command",
    "target",
    "scala-2.12",
    "ergo-4.0.8.jar",
    "ergo-testnet.conf",
    "configuration",
    "parameter",
    "ergotool.json",
    "file",
    "json",
    "nodeapi",
    "http://139.59.29.87:9053",
    "apikey",
    "wallet",
    "start",
    "wash",
    "bundle",
    "bulb",
    "height",
    "spin",
    "express",
    "remind",
    "today",
    "effort",
    "helmet",
    "password",
    "mnemonicpassword",
    "mainnet",
    "newboxspendingdelay",
    "authentication",
    "here](swagger.md",
    "phrase",
    "setup",
    "wallet](wallet.md",
    "mnemonic](https://github.com",
    "example",
    "amount",
    "nanoerg",
    "line",
    "argument",
    "void",
    "main(string",
    "args",
    "amounttopay",
    "long.parselong(args[0",
    "ergotoolconfig",
    "conf",
    "ergotoolconfig.load(\"ergotool.json",
    "code",
    "testnet",
    "ergoclient",
    "instance",
    "ergonodeconfig",
    "nodeconf",
    "conf.getnode",
    "ergoclient.java",
    "block",
    "context",
    "string",
    "txjson",
    "ergoclient.execute((blockchaincontext",
    "lambda",
    "logic",
    "step",
    "access",
    "ergowallet",
    "ctx.getwallet",
    "nanoergs",
    "totaltospend",
    "parameters",
    "minfee",
    "request",
    "optional",
    "list",
    "inputbox",
    "wallet.getunspentboxes(totaltospend",
    "boxes.ispresent",
    "ergoclientexception",
    "coin",
    "prover",
    "object",
    "secret",
    "signature",
    "proof",
    "ergoprover",
    "ctx.newproverbuilder",
    "secretstring.create(nodeconf.getwallet().getmnemonic",
    "secretstring.create(nodeconf.getwallet().getmnemonicpassword",
    "input",
    "output",
    "contract",
    "builder",
    "relationship",
    "blockchain",
    "datum",
    "unsignedtransactionbuilder",
    "case",
    "ergocontract",
    "source",
    "ergoscript",
    "outbox",
    "txb.outboxbuilder",
    "constantsbuilder.create",
    "ctx.getheight",
    "newboxdelay",
    "prover.getp2pkaddress().pubkey",
    "sigmaprop(height",
    "freezedeadline",
    "pkowner",
    "order",
    "compilecontract",
    "method",
    "value",
    "constant",
    "script",
    "constantsbuilder.empty",
    "placeholder",
    "owner",
    "section",
    "address",
    "change",
    "unsignedtransaction",
    "txb.boxestospend(boxes.get",
    ".outputs(newbox",
    ".fee(parameters",
    "signedtransaction",
    "prover.sign(tx",
    "signed.tojson(/*prettyprint=*/true",
    "printing",
    "code](https://github.com",
    "freezecoin.java"
  ],
  "sections": [
    {
      "heading": "Interacting with a local node.",
      "content": "Among other things, the Appkit library allows us to communicate with Ergo nodes via the REST API.\nLet's see how we can write ErgoTool - a simple Java console application (similar to ergo-tool utility) which uses Appkit library.\nErgoTool allows to create and send a new transaction to any existing Ergo node on the network which. A new node can also be started locally and thus available at http://localhost:9052/.\nSuppose we set up a full node and started it using the following command.\nshell\n$ java -jar -Xmx4G target/scala-2.12/ergo-4.0.8.jar --testnet -c ergo-testnet.conf\nWe will need some configuration parameters which can be loaded from ergotool.json file\njson\n{\n  \"node\": {\n    \"nodeApi\": {\n      \"apiUrl\": \"http://139.59.29.87:9053\",\n      \"apiKey\": \"82344a18c24adc42b78f52c58facfdf19c8cc38858a5f22e68070959499076e1\"\n    },\n    \"wallet\": {\n      \"mnemonic\": \"slow silly start wash bundle suffer bulb ancient height spin express remind today effort helmet\",\n      \"password\": \"\",\n      \"mnemonicPassword\": \"\"\n    },\n    \"networkType\": \"MAINNET\"\n  },\n  \"parameters\": {\n    \"newBoxSpendingDelay\": \"30\"\n  }\n}\nHere apiKey is the secret key required for API authentication which can be obtained as described here. And mnemonic is the secret phrase obtained during setup of a new wallet or if you don't want to set up your node using ergo-tool's mnemonic command.\nOur example app also reads the amount of NanoErg to put into a new box from command line arguments\njava\npublic static void main(String[] args) {\n    long amountToPay = Long.parseLong(args[0]);\n    ErgoToolConfig conf = ErgoToolConfig.load(\"ergotool.json\");\n    int newBoxSpendingDelay = Integer.parseInt(conf.getParameters().get(\"newBoxSpendingDelay\"));\n    // the rest of the code shown below \n    ...\n}\nNext, we connect to the running testnet node from our Java application by creating a ErgoClient instance.\njava\nErgoNodeConfig nodeConf = conf.getNode();\nErgoClient ergoClient = RestApiErgoClient.create(nodeConf, null);\nUsing Erg..."
    }
  ],
  "qa_pairs": []
}