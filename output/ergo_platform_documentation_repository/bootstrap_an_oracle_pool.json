{
  "title": "Bootstrap an Oracle Pool",
  "source_url": "docs/tutorials/oracle-bootstrap.md",
  "summary": "---\ntags:\n  - Oracle Pool\n  - Bootstrap\n  - Setup\n  - Tutorial\n  - Guide\n  - oracle-core\n  - Testnet\n---\n\n# Bootstrap an Oracle Pool\n\n## Before you start\n\n### Plan pool parameters\n\nLet's say we have 5 operators. We want to keep consensus above 1/2, so it means we can start a pool of 9 oracles (`oracle_tokens:quantity: 9`, `ballot_tokens:quantity: 9`), with 5 oracles threshold for minimum data points (`min_data_points: 5`) and voting (`min_votes: 5`). This way, we'll have 3 vacant oracles places in case someone wants to join later. ## Step 1. Generate a bootstrap config template\n\nGenerate an oracle config file from the default template with:\n\n```bash\noracle-core generate-oracle-config\n```\n\nand set the required parameters:\n\n- `oracle_address` to my node's wallet address (make sure you have coins).",
  "keywords": [
    "oracle",
    "pool",
    "bootstrap",
    "setup",
    "tutorial",
    "guide",
    "core",
    "testnet",
    "plan",
    "parameter",
    "operator",
    "consensus",
    "oracle_token",
    "quantity",
    "ballot_token",
    "threshold",
    "data",
    "point",
    "min_data_point",
    "place",
    "case",
    "step",
    "config",
    "template",
    "file",
    "default",
    "generate",
    "oracle_address",
    "node",
    "wallet",
    "address",
    "coin",
    "node_url",
    "connection",
    "bootstrap.yaml",
    "change",
    "parameters](#plan",
    "token",
    "tokens_to_mint",
    "section",
    "source",
    "data_point_source",
    "nanoergxau",
    "version",
    "split",
    "command",
    "update",
    "reward",
    "ballot",
    "task",
    "following",
    "refresh",
    "reference",
    "ergoplatform",
    "blob",
    "develop",
    "docs",
    "how_to_bootstrap.md"
  ],
  "sections": [
    {
      "heading": "Plan pool parameters",
      "content": "Let's say we have 5 operators. We want to keep consensus above 1/2, so it means we can start a pool of 9 oracles (oracle_tokens:quantity: 9, ballot_tokens:quantity: 9), with 5 oracles threshold for minimum data points (min_data_points: 5) and voting (min_votes: 5). This way, we'll have 3 vacant oracles places in case someone wants to join later."
    },
    {
      "heading": "Step 1. Generate a bootstrap config template",
      "content": "Generate an oracle config file from the default template with:\nbash\noracle-core generate-oracle-config\nand set the required parameters:\noracle_address to my node's wallet address (make sure you have coins).\nnode_url, node_api_key - node connection parameters;\nRun\nbash\noracle-core bootstrap --generate-config-template bootstrap.yaml"
    },
    {
      "heading": "Step 2. Edit your bootstrap config template",
      "content": "I made the following changes:\nSet the parameters described in Plan pool parameters\nName the tokens in tokens_to_mint section.\nSet data point source data_point_source: NanoErgXau\nSo in the end, it looked like - https://gist.github.com/greenhat/2c6135462fba48773196ad45dd6c7404 (old version, before oracle/pool split configs)"
    },
    {
      "heading": "Step 3. Run bootstrap command",
      "content": "Run\nbash\noracle-core bootstrap bootstrap.yaml\nIt submitted the txs to mint the tokens and make pool, refresh, update boxes. Besides that, it created pool_config.yaml config file to run an oracle."
    },
    {
      "heading": "Step 4. Invite other operators",
      "content": "To invite other operators, I'm sending one oracle, reward, and ballot tokens to the operator's oracle addresses. I'm using https://github.com/ergoplatform/oracle-core/blob/develop/scripts/send_new_oracle.sh for this task."
    },
    {
      "heading": "Step 5. Start your oracle",
      "content": "I started my oracle with the following:\nbash\noracle-core run\nAnd it posted the first data point."
    },
    {
      "heading": "Step 6. Send pool config to the operators",
      "content": "Besides the tokens the pool config file that you are running now should be sent as well. Send pool_config.yaml to the operators and ask them to start the oracle with\nbash\noracle-core run\nAfter they start their oracles keep an eye on your oracle log file and wait for refresh tx generated. It means your pool is running and the pool box was updated."
    },
    {
      "heading": "References",
      "content": "How I bootsrapped an ERG/XAU pool on testnet"
    }
  ],
  "qa_pairs": []
}