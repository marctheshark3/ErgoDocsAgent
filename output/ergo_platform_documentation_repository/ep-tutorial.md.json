{
  "title": "ep-tutorial.md",
  "source_url": "docs/dev/wallet/payments/ergopay/ep-tutorial.md",
  "summary": "---\ntags:\n  - Tutorial\n  - dApp Development\n---\n\n### What we\u2019ll do in this tutorial This tutorial will focus on implementing the backend server-side for ErgoPay, building and preparing transactions. We\u2019ll use [Spring Boot](https://spring.io/) to implement a simple ErgoPay REST API. Spring has the following benefits why we\u2019ve chosen it here: It\u2019s JVM-based, and [ergo-appkit](https://github.com/ergoplatform/ergo-appkit), one of Ergo\u2019s SDKs, is also JVM-based. It\u2019s easy and boilerplate-free, tons of tutorials and information is available, it runs on your local machine with ease.",
  "keywords": [
    "tutorial",
    "dapp",
    "development",
    "server",
    "side",
    "ergopay",
    "building",
    "transaction",
    "spring",
    "boot](https://spring.io/",
    "rest",
    "benefit",
    "ergo",
    "ergoplatform",
    "appkit",
    "boilerplate",
    "information",
    "machine",
    "ease",
    "service",
    "application",
    "public",
    "programming",
    "language",
    "framework",
    "concept",
    "implementation",
    "code",
    "showcase",
    "sourced](https://github.com",
    "mrstahlfelge",
    "frontend",
    "example",
    "course",
    "boot",
    "project",
    "choice",
    "java",
    "openjdk",
    "linux",
    "adoptium](https://adoptium.net/",
    "windows",
    "initializr](https://start.spring.io/",
    "form",
    "dependency",
    "eclipse",
    "gradle",
    "download",
    "bash",
    "bootrun",
    "macos",
    "gradlew",
    "window",
    "print",
    "http://localhost:8080/",
    "ctrl",
    "quick",
    "start](https://spring.io",
    "quickstart",
    "hello",
    "world",
    "endpoint",
    "request",
    "time",
    "method",
    "ergopayresponse",
    "response",
    "body",
    "json",
    "data",
    "interchange",
    "format",
    "wallet",
    "improvement",
    "proposal](https://github.com",
    "datum",
    "type",
    "object",
    "file",
    "package",
    "import",
    "com.fasterxml.jackson.annotation",
    "jsoninclude",
    "class",
    "include",
    "non_null",
    "string",
    "message",
    "@jsoninclude(jsoninclude",
    "severity",
    "messageseverity",
    "address",
    "reducedtx",
    "replyto",
    "enum",
    "none",
    "warning",
    "error",
    "return",
    "restcontroller",
    "serialization",
    "@getmapping(\"/ergopay/",
    "ergopayerror",
    "response.messageseverity",
    "response.message",
    "user",
    "http://localhost:8080",
    "browser",
    "device",
    "network",
    "http(s",
    "prefix",
    "case",
    "localhost",
    "computer",
    "ergopay://192.168.0.1:8080",
    "spice",
    "field",
    "line",
    "section",
    "starter",
    "declaration",
    "org.ergoplatform",
    "appkit_2.11:4.0.6",
    "testimplementation",
    "test",
    "helper",
    "amount",
    "nanoerg",
    "sender",
    "recipient",
    "function",
    "reducedtransaction",
    "getreducedsendtx(boolean",
    "ismainnet",
    "amounttosend",
    "networktype",
    "mainnet",
    "testnet",
    "client",
    "default",
    "explorer",
    "restapiergoclient.create",
    "getdefaultnodeurl(ismainnet",
    "restapiergoclient.getdefaultexplorerurl(networktype",
    "contract",
    "ergotreecontract",
    "ergotreecontract(recipient.getergoaddress().script",
    "fund",
    "unsignedtransaction",
    "boxoperations.puttocontracttxunsigned(ctx",
    "collections.singletonlist(sender",
    "prover",
    "builder",
    "ctx.newproverbuilder().build().reduce(unsignedtransaction",
    "constant",
    "nodes",
    "http://213.239.193.208:9052/",
    "node",
    "getdefaultnodeurl(boolean",
    "look",
    "source",
    "puttocontracttxunsigned](https://github.com",
    "blob",
    "eef262b48cd14ba3d3f8a71201aabbbe28680302",
    "boxoperations.java#l176",
    "input",
    "output",
    "change",
    "content",
    "getting",
    "guide](https://github.com",
    "wiki",
    "starting",
    "projects#what",
    "with",
    "idea",
    "boolean",
    "1000l",
    "byte",
    "getreducedsendtx(ismainnet",
    "recipient).tobyte",
    "response.reducedtx",
    "response.address",
    "round",
    "trip",
    "catch",
    "throwable",
    "t.getmessage",
    "parameter",
    "exception",
    "balance",
    "space",
    "roundtrip/<address",
    "placeholder",
    "ergopay://<yourip>:8080",
    "roundtrip/#p2pk_address",
    "ergopaycontroller.java](https://github.com",
    "master",
    "ergopaysamplecontroller.java",
    "mint",
    "token",
    "getreducedsendtx",
    "payment",
    "behalf",
    "thing",
    "detail",
    "reduced",
    "blockchain",
    "good",
    "minter",
    "spender",
    "burner",
    "feature",
    "ship",
    "list",
    "ingredient",
    "kind",
    "session",
    "management",
    "backend",
    "chance",
    "shop",
    "item",
    "cart",
    "uuid",
    "p2pk",
    "@getmapping(\"/getuseraddress/{sessionid",
    "getuseraddress(@pathvariable",
    "sessionid",
    "userdata",
    "sessionservice.getuserdata(sessionid",
    "userdata.p2pkaddress",
    "sessionservice](https://github.com",
    "usersessionservice.java",
    "hashmap",
    "demonstration",
    "purpose",
    "pressure",
    "point",
    "setaddress",
    "call",
    "getuseraddress",
    "desktop",
    "mobile",
    "urls",
    "link",
    "conclusion",
    "github](https://github.com",
    "heroku"
  ],
  "sections": [
    {
      "heading": "What we\u2019ll do in this tutorial",
      "content": "This tutorial will focus on implementing the backend server-side for ErgoPay, building and preparing transactions. We\u2019ll use Spring Boot to implement a simple ErgoPay REST API. Spring has the following benefits why we\u2019ve chosen it here: It\u2019s JVM-based, and ergo-appkit, one of Ergo\u2019s SDKs, is also JVM-based. It\u2019s easy and boilerplate-free, tons of tutorials and information is available, it runs on your local machine with ease. There are both free and paid services to get the application deployed to the public.\nOf course, you are free to use any other programming language and framework you are experienced with and adapt the concepts outlined here.\nWe won\u2019t cover the implementation of the UI side of your dApp here, but the code of the ErgoPay showcase dApp is open-sourced and of course, you can use it as you wish."
    },
    {
      "heading": "Starting your Spring Boot project",
      "content": "Spring provides an IDE, but it is not needed so you can work with the IDE of your choice. You\u2019ll also need to have a Java Development Kit installed. If you don\u2019t have one installed yet, use OpenJDK on Linux or install Adoptium on Windows. Head over and generate a fresh Spring Boot project with the initializr. Change the information in the form as you like, for this tutorial you only need to add the \u201cSpring web\u201d dependency. If you don\u2019t use Eclipse I would also recommend switching to \u201cGradle project\u201d. Download and extract the generated project and open it with your IDE.\nYou can start your application with Gradle by typing\nbash\n./gradlew bootRun // MacOS/Linux\ngradlew bootRun   // Windows\nThis prints out that the server is running on http://localhost:8080/ now. But as we didn\u2019t do something, it\u2019s not of much use, so you can stop it with Ctrl-C.\nTo get more familiar with how a REST API is implemented using Spring, you should now follow the Spring Quick Start and implement the Hello World endpoint before proceeding here."
    },
    {
      "heading": "Adding an ErgoPay request endpoint",
      "content": "Now it is time to build your first ErgoPay request endpoint. Such an endpoint is a GET REST API method that returns an \u201cErgoPayResponse\u201d in its response body. ErgoPayResponse is a JSON-based data interchange format between a dApp and a wallet app and is described in Ergo Improvement Proposal 0020.\nAt first, we need to declare this response data type as a Java Object.\nAdd the following file to your Spring Boot project:\n```java\npackage org.ergoplatform.ergopay;\nimport com.fasterxml.jackson.annotation.JsonInclude;\npublic class ErgoPayResponse {\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public String message;\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public Severity messageSeverity;\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public String address;\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public String reducedTx;\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public String replyTo;\nenum Severity { NONE, INFORMATION, WARNING, ERROR }\n}\n```\nTo send this back as the response body of an endpoint, simply declare this new class as the return type of a RestController method. Spring Boot will automatically handle serialization to JSON format. Such a method could be declared as follows:\njava\n@GetMapping(\"/ergopay/\")\npublic ErgoPayResponse ergoPayError() {\n     ErgoPayResponse response = new ErgoPayResponse();\n     response.messageSeverity = ErgoPayResponse.Severity.ERROR;\n     response.message = \"Nothing implemented yet.\";\n     return response;\n}\nThis is already a valid ErgoPay response and endpoint. It does not serve a transaction, but will only present an error message to the users in their wallet apps.\nIf you start your Spring Boot application now and open http://localhost:8080/ergopay in your local web browser, you\u2019ll see the JSON response in your browser.\nUse the endpoint from the wallet application\nIt\u2019s all good to see the response in your browser, but of course you want to see this in a wallet app. If you have a mobile device with th..."
    },
    {
      "heading": "Building and reducing a transaction",
      "content": "The spice of ErgoPay is building a transaction on the dApp side and let the user sign it. For this, ErgoPayResponse has a field \u201creducedTx\u201d. But how to build a transaction and \u201creduce\u201d it? For this, we need to integrate the Ergo SDK into our Spring Boot project. To pull in the SDK, edit the build.gradle file of your Spring project and add the following line in the dependencies section, right below the spring-boot-starter-web dependency declaration:\n```java\ndependencies {\n   implementation 'org.springframework.boot:spring-boot-starter-web'\n*  implementation 'org.ergoplatform:ergo-appkit_2.11:4.0.6'\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n```\nWhen this is done, you can add the following helper method that builds a transaction for sending a certain amount of nanoERG from \u201csender\u201d to \u201crecipient\u201d:\n```java\n    // This function takes in boolean, long, address of sender and address of recipient\n    // and returns a reduced transaction object.\n    private ReducedTransaction getReducedSendTx(boolean isMainNet, long amountToSend, Address sender, Address recipient) {\n        // Determine the network type\n        NetworkType networkType = isMainNet ? NetworkType.MAINNET : NetworkType.TESTNET;\n        // Create a REST API client with default explorer url\n        return RestApiErgoClient.create(\n                getDefaultNodeUrl(isMainNet),\n                networkType,\n                \"\",\n                RestApiErgoClient.getDefaultExplorerUrl(networkType)\n        ).execute(ctx -> {\n            // Create a new Ergo contract with the recipient's Ergo address\n            ErgoTreeContract contract = new ErgoTreeContract(recipient.getErgoAddress().script());\n            // Create an unsigned transaction to put the given amount of funds to the contract\n            UnsignedTransaction unsignedTransaction = BoxOperations.putToContractTxUnsigned(ctx,\n                    Collections.singletonList(sender),\n                    contract, amountToSend, Collecti..."
    },
    {
      "heading": "Going further",
      "content": "Now it\u2019s time to start experimenting with building other types of transactions.\nAlso check out the ErgoPay example server project \u2014 its ErgoPayController.java file defines some more endpoints: minting tokens, burning tokens, and spending a specific box.\nYou can also just use the getReducedSendTx method to issue payments on behalf of the user to yourself, for example as a payment service. The great thing is that you know the transaction id beforehand: every detail of the transaction is already known when the Reduced Transaction is built, and you can save this transaction id in your backend db and monitor the blockchain to observe when the payment was made to proceed with delivering the goods or services the user paid for.\nYou know enough now to build something like the token minter and box spender of the ErgoPay showcase app. For the token burner, we need one more feature: Connecting a wallet to the dApp UI."
    },
    {
      "heading": "Connect a wallet to your UI",
      "content": "Connecting a wallet is not needed in general, as you\u2019ve seen: for a payment or minting a token, you don\u2019t need to know the user\u2019s wallet address to collect or validate the data from the user. It is enough to know the address when the transaction is built on request of the wallet app. But for specific use cases, you might need the wallet address more early: The showcase dApp ships a token burner example. For showing the list of owned tokens to choose from, connecting a wallet is needed before the actual transaction is built.\nIndeed, we can obtain the address with all ErgoPay ingredients we already learned about. But we need to introduce some kind of session management on the dApp backend. Chances are high that you already have some kind of session running for the user. For example if your dApp is a web shop, you probably already store the items added to the cart.\nBut if you don\u2019t have any type of session management running, we\u2019ll implement the simplest kind of it now: every user of your dApp has a unique ID (\u201cuuid\u201d) that is randomly chosen by your frontend UI. This uuid is used as a session id. On the backend, we store a user\u2019s P2PK address mapped to this id.\nOur backend needs two API endpoints: one for the wallet app to send a user\u2019s address to store it attached to the uuid, and one for the frontend UI to request if the user address is set.\nThe following two methods do this:\n```java\n    @GetMapping(\"/getUserAddress/{sessionId}\")\n    public String getUserAddress(@PathVariable String sessionId) {\n        UserData userData = sessionService.getUserData(sessionId);\nreturn (userData.p2pkAddress != null) ? userData.p2pkAddress : \"\";\n}\n\n@GetMapping(\"/setAddress/{sessionId}/{address}\")\npublic ErgoPayResponse setAddress(@PathVariable String sessionId, @PathVariable String address) {\n    UserData userData = sessionService.getUserData(sessionId);\n\n    ErgoPayResponse response = new ErgoPayResponse();\n\n    // check the address\n    try {\n        boolean isMainNet = isMainNetAddre..."
    },
    {
      "heading": "Your dApp UI on the same device as the wallet app",
      "content": "We assumed that the user visits your dApp on a desktop and uses the wallet application on mobile, so we only talked about QR codes containing the ErgoPay URLs. This won\u2019t work when users visit your dApp on the same device that the wallet app is running on \u2014 they simply can\u2019t scan a QR code from the same device. Fortunately, you can simply show the ErgoPay URLs as a link for these users. If the user has a compatible wallet app installed, clicking or tapping such a link will open the wallet application processing the ErgoPay request."
    },
    {
      "heading": "Conclusion",
      "content": "You\u2019ve learned to build an ErgoPay capable backend in this tutorial. You\u2019ll find this as a full example on GitHub. It is also deployed on Heroku, a free hosting service for web apps that you can use to start off with your own projects."
    }
  ],
  "qa_pairs": []
}