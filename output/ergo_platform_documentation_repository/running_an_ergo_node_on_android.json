{
  "title": "Running an Ergo Node on Android",
  "source_url": "docs/node/install/node-android.md",
  "summary": "---\ntags:\n  - Android\n  - Node\n  - Mobile\n  - Termux\n  - Installation\n  - Guide\n  - RocksDB\n  - Digest Mode\n  - proot\n---\n# Running an Ergo Node on Android\n\nRunning an Ergo node directly on an Android device is possible and allows users without desktop access to participate more fully in the network, potentially using their own node for mobile wallets or dApps. This guide provides an overview of the methods available using the [Termux](https://termux.dev/) terminal emulator. ## Overview of Methods\n\nThere are two primary approaches, depending on your needs and technical comfort level:\n\n1. ** [Direct Termux Setup (Digest Mode)](termux-digest.md):**\n    *   **Recommended for most users.",
  "keywords": [
    "android",
    "node",
    "termux",
    "installation",
    "guide",
    "rocksdb",
    "digest",
    "mode",
    "proot",
    "ergo",
    "device",
    "user",
    "desktop",
    "access",
    "network",
    "wallet",
    "dapps",
    "overview",
    "method",
    "termux](https://termux.dev/",
    "emulator",
    "approach",
    "need",
    "comfort",
    "level",
    "direct",
    "setup",
    "mode)](termux",
    "resource",
    "simple",
    "process",
    "arch",
    "linux",
    "utxo",
    "mode)](proot",
    "statetype=\"utxo",
    "database",
    "compatibility",
    "issue",
    "failure",
    "environment",
    "glibc",
    "usage",
    "detail",
    "click",
    "attempt",
    "type",
    "ergonodeandroid](https://github.com",
    "rustinmyeye",
    "ergonodeandroid",
    "community",
    "project",
    "script",
    "stateless",
    "alternative",
    "requirement",
    "meeting",
    "experience",
    "version",
    "storage",
    "space",
    "sync",
    "pruning",
    "blockstokeep",
    "archival",
    "blockstokeep=-1",
    "java",
    "4gb+",
    "flag",
    "memory",
    "general",
    "tips",
    "tricks",
    "methods",
    "keyboard",
    "hacker",
    "droid",
    "default",
    "background",
    "operation",
    "install",
    "tmux",
    "pacman",
    "session",
    "window",
    "port",
    "forwarding",
    "peer",
    "configure",
    "home",
    "router",
    "address",
    "connection",
    "setting",
    "http://127.0.0.1:9053",
    "troubleshooting",
    "correct",
    "-xmx",
    "value",
    "file",
    "standard",
    "variant",
    "statetype",
    "syntax",
    "error",
    "permission",
    "disk",
    "clarification",
    "state",
    "capability",
    "link",
    "step"
  ],
  "sections": [
    {
      "heading": "Running an Ergo Node on Android",
      "content": "Running an Ergo node directly on an Android device is possible and allows users without desktop access to participate more fully in the network, potentially using their own node for mobile wallets or dApps.\nThis guide provides an overview of the methods available using the Termux terminal emulator."
    },
    {
      "heading": "Overview of Methods",
      "content": "There are two primary approaches, depending on your needs and technical comfort level:\nDirect Termux Setup (Digest Mode):\n\nRecommended for most users.\nRuns the node directly within Termux.\nBest suited for the resource-efficient stateType=\"digest\" mode.\nSimpler setup process.\n\n\n\nArch Linux via proot (RocksDB/UTXO Mode):\n\nAdvanced method.\nRequired if you need to run stateType=\"utxo\" (which uses RocksDB) or encounter specific database compatibility issues (e.g., LevelDB failures on aarch64).\nInvolves running an Arch Linux environment within Termux to provide glibc compatibility for RocksDB.\nMore complex setup and higher resource usage.\n/// details | One-Click App Attempt\n    {type: tip, open: false}\nErgoNodeAndroid is a community project attempting a one-click Ergo node app for Android, based on Termux scripts. It typically sets up a stateless/digest node. You may explore this as an alternative to manual setup.\n///"
    },
    {
      "heading": "Device Requirements",
      "content": "Meeting these requirements is crucial for a stable experience:\nOS: Android version 7.0 or higher.\nStorage:\nDigest Mode: ~5-10GB free space recommended initially. Actual usage after sync might settle around ~3GB, but bootstrapping can require more temporarily.\nUTXO Mode (via proot): Significantly more, potentially 30GB+ depending on pruning (blocksToKeep). Archival mode (blocksToKeep=-1) is likely impractical on mobile storage.\n\n\nRAM: Minimum 1-2GB available specifically for Termux/Java. More RAM (e.g., 4GB+) provides a smoother experience, especially during sync. You will need to use the -Xmx Java flag to allocate memory appropriately."
    },
    {
      "heading": "General Tips and Tricks (Apply to Both Methods)",
      "content": "Keyboard: Consider installing a different keyboard app (like Hacker's Keyboard from F-Droid) if your default keyboard doesn't work well in Termux.\nBackground Operation: Install tmux (pkg install tmux in Termux, or pacman -S tmux in the Arch environment) to run the node in a background session that persists even if you close the Termux app window.\nPort Forwarding: If you want your node to be reachable by external peers, configure port forwarding for TCP port 9030 on your home router to your Android device's local IP address.\nWallet Connection: If using the Ergo Wallet App on the same device, you can often change its node setting to http://127.0.0.1:9053 to connect to your local node.\nTroubleshooting: If the node fails to start, check common issues:\nCorrect Java version installed and selected (java --version).\nSufficient memory allocated via -Xmx. Try adjusting the value.\nCorrect Ergo node JAR file used (Standard vs. RocksDB variant, depending on the method and stateType).\nSyntax errors in your ergo.conf file.\nInsufficient free storage space on the device.\nPermissions issues within Termux or the proot environment."
    },
    {
      "heading": "Disk Space Clarification",
      "content": "Digest Mode: Typically settles around ~3GB after sync with bootstrapping and moderate blocksToKeep.\nUTXO Mode: Requires significantly more storage (tens of GBs) due to storing the UTXO set state.\nChoose the method that best suits your needs and technical capabilities by following the links above for detailed steps."
    }
  ],
  "qa_pairs": []
}