{
  "title": "Address validation",
  "source_url": "docs/dev/wallet/address/address_validation.md",
  "summary": "# Address validation\n\n[ergo-simple-addresses](https://github.com/kushti/ergo-simple-addresses) contains few zero-dependencies Java-friendly utils for working with addresses. The [Integration Guide for Exchanges](guide.md) may also be relevant. There is also a simple method in [Fleet](https://github.com/fleet-sdk/fleet/blob/master/packages/core/src/models/ergoAddress.ts#L164). - **P2S** has no limit since it is the serialized script. - **P2SH** is 192 bits since it is the \"first 192 bits of the Blake2b256 hash of serialized script bytes.",
  "keywords": [
    "address",
    "validation",
    "ergo",
    "kushti",
    "dependency",
    "util",
    "integration",
    "guide",
    "exchanges](guide.md",
    "method",
    "fleet](https://github.com",
    "fleet",
    "blob",
    "master",
    "package",
    "core",
    "model",
    "limit",
    "script",
    "p2sh",
    "blake2b256",
    "hash",
    "byte",
    "p2pk",
    "length",
    "ergoplatform",
    "appkit",
    "blob/9e19c13d82966eaee59433d16c4fb987bea363a7",
    "impl",
    "java",
    "runtime",
    "exception",
    "string",
    "beginning",
    "0x13",
    "testnet",
    "0x02",
    "0x03",
    "mainnet",
    "base58",
    "88dhgzeutxarxf1rbqbrz6zbw9iigdb4pcdjyfklrk22gnmjkcxzbe53vqjvetra4ttnf9oowqwpp2c6"
  ],
  "sections": [
    {
      "heading": "Address validation",
      "content": "ergo-simple-addresses contains few zero-dependencies Java-friendly utils for working with addresses. The Integration Guide for Exchanges may also be relevant. There is also a simple method in Fleet.\nP2S has no limit since it is the serialized script.\nP2SH is 192 bits since it is the \"first 192 bits of the Blake2b256 hash of serialized script bytes.\"\nP2PK length is fixed. You can use the linked class to validate an address (it gives a runtime exception when created from an invalid string).\nIn P2S, everyone can see the script; in P2SH, the script will be known when it will be spent.\nP2SH has 0x12 at the beginning, and P2S has 0x13 on testnet and 0x02 and 0x03 on mainnet accordingly (note that in hex, you can see that, but in base58, it can change to anything).\nAs you can see\n88dhgzEuTXaRxf1rbqBRZ6Zbw9iigdB4PCdjyFKLrk22gnmjKcxZBe53vqJVetRa4tTNF9oowQWPp2c6\nequals\n03 10 02 04 a0 0b 08 cd 02 a1 f5 67 16 cb 8d f4 fe b9 37 14 37 90 4b 91 25 b8 2d b9 39 23 8c d7 d9 48 78 6d b3 3d e3 13 9f ea 02 d1 92 a3 9a 8c c7 a7 01 73 00 73 01 8c 23 55 af"
    }
  ],
  "qa_pairs": []
}