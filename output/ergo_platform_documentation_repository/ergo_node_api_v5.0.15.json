{
  "title": "Ergo Node API v5.0.15",
  "source_url": "docs/node/swagger/openapi.md",
  "summary": "# Ergo Node API v5.0.15\n\n\n/// admonition | Getting Started! API docs for Ergo Node. Scroll down for code samples, example requests and responses\n///\n\n\n\nBase URLs: * <a href=\"http://213.239.193.208:9053\">http://213.239.193.208:9053</a>\n\n## Authentication\n\n* API Key (ApiKeyAuth)\n    - Parameter Name: **api_key**, in: header. ## UTXO\n\n### getSnapshotsInfo\n\n>",
  "keywords": [
    "ergo",
    "node",
    "admonition",
    "code",
    "sample",
    "example",
    "request",
    "response",
    "base",
    "href=\"http://213.239.193.208:9053\">http://213.239.193.208:9053</a",
    "authentication",
    "apikeyauth",
    "parameter",
    "name",
    "header",
    "utxo",
    "wget",
    "curl",
    "default",
    "getsnapshotsinfo",
    "http",
    "javascript",
    "fetch('/utxo",
    "method",
    "console.log(body",
    "rest",
    "client",
    "json",
    "result",
    "restclient.default",
    "/utxo",
    "param",
    "json.parse(result",
    "import",
    "requests.default('/utxo",
    "print(r.json",
    "vendor",
    "\\guzzlehttp\\client",
    "array",
    "body",
    "request_body",
    "client->request('default','/utxo",
    "print_r($response->getbody()->getcontent",
    "catch",
    "\\guzzlehttp\\exception\\badresponseexception",
    "exception",
    "error",
    "print_r($e->getmessage",
    "java",
    "url(\"/utxo",
    "httpurlconnection",
    "obj.openconnection",
    "responsecode",
    "con.getresponsecode",
    "bufferedreader",
    "string",
    "stringbuffer",
    "in.readline",
    "null",
    "response.append(inputline",
    "system.out.println(response.tostring",
    "package",
    "byte",
    "datum",
    "newbuffer([]byte{jsonreq",
    "newrequest(\"default",
    "resp",
    "do(req",
    "id=\"default__utxo_getsnapshotsinfo",
    "responses\">responses</h3",
    "|status|meaning|description|schema|",
    "|---|---|---|---|",
    "operation",
    "block",
    "getheaderids",
    "id=\"opidgetheaderids\"></a",
    "/blocks",
    "application",
    "const",
    "fetch('/block",
    "requests.get('/block",
    "client->request('get','/blocks",
    "url(\"/block",
    "con.setrequestmethod(\"get",
    "map[string][]string",
    "string{\"application",
    "newrequest(\"get",
    "range",
    "height",
    "return",
    "page",
    "list",
    "limit",
    "item",
    "id=\"getheaderid",
    "parameters\">parameters</h3",
    "|name|in|type|required|description|",
    "|limit|query|integer(int32)|false|the",
    "number",
    "|offset|query|integer(int32)|false|the",
    "|200|[ok](https://tools.ietf.org",
    "html",
    "rfc7231#section-6.3.1)|array",
    "ids|inline|",
    "|default|default|error|[apierror](#schemaapierror)|",
    "responseschema\">response",
    "schema</h3",
    "status",
    "|name|type|required|restrictions|description|",
    "sendminedblock",
    "id=\"opidsendminedblock\"></a",
    "post",
    "content",
    "type",
    "accept",
    "inputbody",
    "timestamp",
    "version",
    "adproofsroot",
    "4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117",
    "nbits",
    "powsolution",
    "0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5",
    "0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12",
    "difficulty",
    "parentid",
    "vote",
    "size",
    "extensionid",
    "transactionsid",
    "blocktransaction",
    "headerid",
    "transaction",
    "input",
    "boxid",
    "proofbyte",
    "4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117",
    "extension",
    "output",
    "value",
    "0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041",
    "asset",
    "tokenid",
    "amount",
    "additionalregister",
    "100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301",
    "transactionid",
    "index",
    "adproofs",
    "3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117",
    "digest",
    "field",
    "type':'application",
    "restclient.post",
    "requests.post('/block",
    "client->request('post','/block",
    "con.setrequestmethod(\"post",
    "/block",
    "id=\"sendminedblock",
    "|body|body|[fullblock](#schemafullblock)|true|none|",
    "reason",
    "server",
    "detail",
    "rfc7231#section-6.3.1)|block",
    "valid|none|",
    "getfullblockat",
    "id=\"opidgetfullblockat\"></a",
    "at/{blockheight",
    "id=\"getfullblockat",
    "|blockheight|path|integer(int32)|true|height",
    "ids|",
    "found](https://tools.ietf.org",
    "rfc7231#section-6.5.4)|block",
    "getchainslice",
    "id=\"opidgetchainslice\"></a",
    "chainslice",
    "http/1.1",
    "id=\"getchainslice",
    "|fromheight|query|integer(int32)|false|min",
    "start",
    "range)|",
    "omitted)|",
    "headers|inline|",
    "|---|---|---|---|---|",
    "|*anonymous*|[[blockheader](#schemablockheader)]|false|none|array",
    "headers|",
    "id|[modifierid](#schemamodifierid)(base16)|true|none|base16",
    "modifier",
    "definition|",
    "version|[version](#schemaversion)(int8)|true|none|ergo",
    "blockchain",
    "protocol",
    "adproofsroot|[digest32](#schemadigest32)(base16)|true|none|base16",
    "digest|",
    "stateroot|[addigest](#schemaaddigest)(base16)|true|none|base16",
    "tree",
    "height|",
    "transactionsroot|[digest32](#schemadigest32)(base16)|true|none|base16",
    "work",
    "target",
    "encoded)|",
    "extensionhash|[digest32](#schemadigest32)(base16)|true|none|base16",
    "powsolutions|[powsolutions](#schemapowsolutions)|true|none|an",
    "component",
    "solution|",
    "pk|string|true|none|base16",
    "key|",
    "w|string|true|none|none|",
    "n|string|true|none|none|",
    "genesis",
    "parentid|[modifierid](#schemamodifierid)(base16)|true|none|base16",
    "fork",
    "bytes|",
    "extensionid|[modifierid](#schemamodifierid)(base16)|false|none|base16",
    "transactionsid|[modifierid](#schemamodifierid)(base16)|false|none|base16",
    "adproofsid|[modifierid](#schemamodifierid)(base16)|false|none|base16",
    "getfullblockbyid",
    "id=\"opidgetfullblockbyid\"></a",
    "/blocks/{headerid",
    "fetch('/blocks/{headerid",
    "requests.get('/blocks/{headerid",
    "client->request('get','/blocks/{headerid",
    "url(\"/blocks/{headerid",
    "info",
    "id=\"getfullblockbyid",
    "block|",
    "object",
    "data|[fullblock](#schemafullblock)|",
    "id=\"opidgetfullblockbyids\"></a",
    "headerids",
    "requests.post('/blocks",
    "client->request('post','/blocks",
    "powsolutions",
    "rfc7231#section-6.3.1)|full",
    "provided|inline|",
    "rfc7231#section-6.5.4)|no",
    "provided|[apierror](#schemaapierror)|",
    "|*anonymous*|[[fullblock](#schemafullblock)]|false|none|[block",
    "header|[blockheader](#schemablockheader)|true|none|header",
    "link",
    "section",
    "transformation",
    "proof",
    "data.|",
    "timestamp|[timestamp](#schematimestamp)(int64)|true|none|basic",
    "blocktransactions|[blocktransactions](#schemablocktransactions)|true|none|section",
    "transactions|[[ergotransaction](#schemaergotransaction)]|true|none|list",
    "ergotransaction",
    "id|[transactionid](#schematransactionid)(base16)|false|none|base16",
    "transaction|",
    "boxid|[transactionboxid](#schematransactionboxid)(base16)|true|none|base16",
    "bytes",
    "input|",
    "spending",
    "proofs|",
    "context|",
    "additionalproperties**|[svalue](#schemasvalue)(base16)|false|none|base-16",
    "sigma",
    "state",
    "value|",
    "transaction.|",
    "outputs|[[ergotransactionoutput](#schemaergotransactionoutput)]|true|none|output",
    "candidate",
    "boxid|[transactionboxid](#schematransactionboxid)(base16)|false|none|base16",
    "token|",
    "additionalregisters|[registers](#schemaregisters)|true|none|ergo",
    "registers|",
    "transactionid|[transactionid](#schematransactionid)(base16)|false|none|base16",
    "index|integer(int32)|false|none|index",
    "outputs|",
    "proofbytes|[serializedadproof](#schemaserializedadproof)(base16)|true|none|base16",
    "digest|[digest32](#schemadigest32)(base16)|true|none|base16",
    "extension|[extension](#schemaextension)|true|none|section",
    "fields|[[keyvalueitem](#schemakeyvalueitem)]",
    "records|",
    "getblockheaderbyid",
    "id=\"opidgetblockheaderbyid\"></a",
    "fetch('/blocks/{headerid}/header",
    "requests.get('/blocks/{headerid}/header",
    "client->request('get','/blocks/{headerid}/header",
    "url(\"/blocks/{headerid}/header",
    "id=\"getblockheaderbyid",
    "header|",
    "getblocktransactionsbyid",
    "id=\"opidgetblocktransactionsbyid\"></a",
    "/blocks/{headerid}/transaction",
    "fetch('/blocks/{headerid}/transaction",
    "requests.get('/blocks/{headerid}/transaction",
    "client->request('get','/blocks/{headerid}/transaction",
    "url(\"/blocks/{headerid}/transaction",
    "/blocks/{headerid}/transactions",
    "signature",
    "spendingproof",
    "getprooffortx",
    "id=\"opidgetprooffortx\"></a",
    "/blocks/{headerid}/prooffor/{txid",
    "fetch('/blocks/{headerid}/prooffor/{txid",
    "requests.get('/blocks/{headerid}/prooffor/{txid",
    "url(\"/blocks/{headerid}/prooffor/{txid",
    "merkle",
    "id=\"getprooffortx",
    "transactions|",
    "leaf",
    "cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3",
    "level",
    "018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337",
    "id=\"opidgetlastheaders\"></a",
    "lastheaders/{count",
    "requests.get('/blocks",
    "id=\"getlastheader",
    "|count|path|number|true|a",
    "|*anonymous*|[[blockheader](#schemablockheader)]|false|none|[header",
    "data.]|",
    "getmodifierbyid",
    "id=\"opidgetmodifierbyid\"></a",
    "modifier/{modifierid",
    "id=\"getmodifierbyid",
    "modifier|",
    "object|none|",
    "getpopowheaderbyid",
    "popowheaderbyid/{headerid",
    "fetch('/nipopow",
    "requests.get('/nipopow",
    "client->request('get','/nipopow",
    "url(\"/nipopow",
    "/nipopow",
    "popow",
    "id=\"getpopowheaderbyid",
    "interlink",
    "rfc7231#section-6.3.1)|popow",
    "rfc7231#section-6.5.4)|header",
    "id=\"opidgetpopowheaderbyheight\"></a",
    "popowheaderbyheight/{height",
    "construct",
    "|height|path|integer(int32)|true|height",
    "id=\"getpopowheaderbyheight",
    "getpopowproof",
    "id=\"opidgetpopowproof\"></a",
    "proof/{minchainlength}/{suffixlength",
    "superchain",
    "length",
    "suffix",
    "id=\"getpopowproof",
    "|suffixlength|path|number|true|suffix",
    "prefix",
    "rfc7231#section-6.3.1)|nipopow",
    "getpopowproofbyheaderid",
    "id=\"opidgetpopowproofbyheaderid\"></a",
    "proof/{minchainlength}/{suffixlength}/{headerid",
    "id=\"getpopowproofbyheaderid"
  ],
  "sections": [
    {
      "heading": "Ergo Node API v5.0.15",
      "content": "/// admonition | Getting Started!\nAPI docs for Ergo Node. Scroll down for code samples, example requests and responses\n///\nBase URLs:\nhttp://213.239.193.208:9053"
    },
    {
      "heading": "Authentication",
      "content": "API Key (ApiKeyAuth)\nParameter Name: api_key, in: header."
    },
    {
      "heading": "getSnapshotsInfo",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X DEFAULT /utxo/getSnapshotsInfo\n```\n=== \"http\"\n```http\nDEFAULT /utxo/getSnapshotsInfo HTTP/1.1\n```\n=== \"javascript\"\n```javascript\n\nfetch('/utxo/getSnapshotsInfo',\n{\n  method: 'DEFAULT'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nresult = RestClient.default '/utxo/getSnapshotsInfo',\n  params: {\n  }\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\n\nr = requests.default('/utxo/getSnapshotsInfo')\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('DEFAULT','/utxo/getSnapshotsInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/getSnapshotsInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"DEFAULT\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"DEFAULT\", \"/utxo/getSnapshotsInfo\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n```\nDEFAULT /utxo/getSnapshotsInfo\nError"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\nThis operation does not require authentication"
    },
    {
      "heading": "getHeaderIds",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The first block height to include in the list|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  \"8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\"\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of header ids|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of header ids\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\nThis operation does not require authentication"
    },
    {
      "heading": "sendMinedBlock",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blocks \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blocks HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"blockTransactions\": {\n    \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactions\": [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|FullBlock|true|none|\nExample responses\ndefault Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Block is valid|None|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getFullBlockAt",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/at/{blockHeight} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/at/{blockHeight} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/at/{blockHeight}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/at/{blockHeight}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/at/{blockHeight}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/at/{blockHeight}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/at/{blockHeight}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|blockHeight|path|integer(int32)|true|Height of a block to retrieve header ids|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  \"8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\"\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of header ids|Inline|\n|404|Not Found|Blocks at this height doesn't exist|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of header ids\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\nThis operation does not require authentication"
    },
    {
      "heading": "getChainSlice",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/chainSlice \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/chainSlice HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/chainSlice',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/chainSlice',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/chainSlice', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/chainSlice', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/chainSlice\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string]..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|fromHeight|query|integer(int32)|false|Min header height (start of the range)|\n|toHeight|query|integer(int32)|false|Max header height of the range (last header height then omitted)|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of headers|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of headers\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[BlockHeader]|false|none|Array of headers|\n|\u00bb id|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb timestamp|Timestamp(int64)|true|none|Basic timestamp definition|\n|\u00bb version|Version(int8)|true|none|Ergo blockchain protocol version|\n|\u00bb adProofsRoot|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb stateRoot|ADDigest(base16)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|\u00bb transactionsRoot|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|\u00bb extensionHash|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb powSolutions|PowSolutions|true|none|An object containing all components of pow solution|\n|\u00bb\u00bb pk|string|true|none|Base16-encoded public key|\n|\u00bb\u00bb w|string|true|none|none|\n|\u00bb\u00bb n|string|true|none|none|\n|\u00bb\u00bb d|number|true|none|none|\n|\u00bb height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|\u00bb difficulty|string|true|none|none|\n|\u00bb parentId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb votes|Votes(base16)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|\u00bb size|integer(int32)|false|none|Size of the header in bytes|\n|\u00bb extensionId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb transactionsId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb adProofsId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\nThis operation does not require authentication"
    },
    {
      "heading": "getFullBlockById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/{headerId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/{headerId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/{headerId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string]..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of the header the wanted block|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"blockTransactions\": {\n    \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactions\": [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\":..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Block object representing the full block data|FullBlock|\n|404|Not Found|Block with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getFullBlockByIds",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blocks/headerIds \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blocks/headerIds HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '[\n  \"string\"\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blocks/headerIds',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blocks/headerIds',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blocks/headerIds', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blocks/headerIds', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/headerIds\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer re..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|array[string]|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"height\": 667,\n      \"difficulty\": \"9575989248\",\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"votes\": \"000000\",\n      \"size\": 0,\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    },\n    \"blockTransactions\": {\n      \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactions\": [\n        {\n          \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Full blocks corresponding to ids provided|Inline|\n|404|Not Found|No block exist for every id provided|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[FullBlock]|false|none|[Block with header and transactions]|\n|\u00bb header|BlockHeader|true|none|Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.|\n|\u00bb\u00bb id|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb timestamp|Timestamp(int64)|true|none|Basic timestamp definition|\n|\u00bb\u00bb version|Version(int8)|true|none|Ergo blockchain protocol version|\n|\u00bb\u00bb adProofsRoot|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb stateRoot|ADDigest(base16)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|\u00bb\u00bb transactionsRoot|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|\u00bb\u00bb extensionHash|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb powSolutions|PowSolutions|true|none|An object containing all components of pow solution|\n|\u00bb\u00bb\u00bb pk|string|true|none|Base16-encoded public key|\n|\u00bb\u00bb\u00bb w|string|true|none|none|\n|\u00bb\u00bb\u00bb n|string|true|none|none|\n|\u00bb\u00bb\u00bb d|number|true|none|none|\n|\u00bb\u00bb height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|\u00bb\u00bb difficulty|string|true|none|none|\n|\u00bb\u00bb parentId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb votes|Votes(base16)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|\u00bb\u00bb size|integer(int32)|false|none|Size of the header in bytes|\n|\u00bb\u00bb extensionId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb transactionsId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb adProofsId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb blockTransactions|BlockTransactions|true|none|Section of a block which contains transactions.|\n|\u00bb\u00bb headerId|Mo..."
    },
    {
      "heading": "getBlockHeaderById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/{headerId}/header \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/{headerId}/header HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}/header',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}/header',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}/header', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}/header', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/{headerId}/header\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/h..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of a wanted block header|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powSolutions\": {\n    \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n    \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n    \"n\": \"0000000000000000\",\n    \"d\": 987654321\n  },\n  \"height\": 667,\n  \"difficulty\": \"9575989248\",\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"size\": 0,\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Block header object|BlockHeader|\n|404|Not Found|Block with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getBlockTransactionsById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/{headerId}/transactions \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/{headerId}/transactions HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}/transactions',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}/transactions',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}/transactions', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}/transactions', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/{headerId}/transactions\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage m..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of a wanted block transactions|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactions\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n  ],\n  \"size\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Block transaction object|BlockTransactions|\n|404|Not Found|Block with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getProofForTx",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/{headerId}/proofFor/{txId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/{headerId}/proofFor/{txId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}/proofFor/{txId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}/proofFor/{txId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}/proofFor/{txId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}/proofFor/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/{headerId}/proofFor/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n===..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of a wanted block transactions|\n|txId|path|string|true|ID of a wanted transaction|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n  \"levels\": [\n    [\n      \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n      0\n    ]\n  ]\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Merkle proof object|MerkleProof|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getLastHeaders",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/lastHeaders/{count} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/lastHeaders/{count} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/lastHeaders/{count}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/lastHeaders/{count}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/lastHeaders/{count}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/lastHeaders/{count}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/lastHeaders/{count}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|count|path|number|true|a number of block headers to return|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of block headers|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[BlockHeader]|false|none|[Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.]|\n|\u00bb id|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb timestamp|Timestamp(int64)|true|none|Basic timestamp definition|\n|\u00bb version|Version(int8)|true|none|Ergo blockchain protocol version|\n|\u00bb adProofsRoot|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb stateRoot|ADDigest(base16)|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|\u00bb transactionsRoot|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|\u00bb extensionHash|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb powSolutions|PowSolutions|true|none|An object containing all components of pow solution|\n|\u00bb\u00bb pk|string|true|none|Base16-encoded public key|\n|\u00bb\u00bb w|string|true|none|none|\n|\u00bb\u00bb n|string|true|none|none|\n|\u00bb\u00bb d|number|true|none|none|\n|\u00bb height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|\u00bb difficulty|string|true|none|none|\n|\u00bb parentId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb votes|Votes(base16)|true|none|Base16-encoded votes for a soft-fork and parameters|\n|\u00bb size|integer(int32)|false|none|Size of the header in bytes|\n|\u00bb extensionId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb transactionsId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb adProofsId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\nThis operation does not require authentication"
    },
    {
      "heading": "getModifierById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blocks/modifier/{modifierId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blocks/modifier/{modifierId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/modifier/{modifierId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/modifier/{modifierId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/modifier/{modifierId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/modifier/{modifierId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blocks/modifier/{modifierId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|modifierId|path|string|true|ID of a wanted modifier|\nExample responses\n404 Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Persistent modifier object|None|\n|404|Not Found|Modifier with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowHeaderById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /nipopow/popowHeaderById/{headerId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /nipopow/popowHeaderById/{headerId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/popowHeaderById/{headerId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/popowHeaderById/{headerId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/popowHeaderById/{headerId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/popowHeaderById/{headerId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/nipopow/popowHeaderById/{headerId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|headerId|path|string|true|ID of wanted header|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"interlinks\": [\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  ]\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|PoPow header object|PopowHeader|\n|404|Not Found|Header of extension of a corresponding block are not available|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowHeaderByHeight",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /nipopow/popowHeaderByHeight/{height} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /nipopow/popowHeaderByHeight/{height} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/popowHeaderByHeight/{height}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/popowHeaderByHeight/{height}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/popowHeaderByHeight/{height}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/popowHeaderByHeight/{height}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/nipopow/popowHeaderByHeight/{height}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|height|path|integer(int32)|true|Height of a wanted header|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"interlinks\": [\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  ]\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|PoPow header object|PopowHeader|\n|404|Not Found|Header of extension of a corresponding block are not available|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowProof",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /nipopow/proof/{minChainLength}/{suffixLength} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /nipopow/proof/{minChainLength}/{suffixLength} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/proof/{minChainLength}/{suffixLength}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/proof/{minChainLength}/{suffixLength}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/proof/{minChainLength}/{suffixLength}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/proof/{minChainLength}/{suffixLength}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/nipopow/proof/{minChainLength}/{suffixLength}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    respon..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minChainLength|path|number|true|Minimal superchain length|\n|suffixLength|path|number|true|Suffix length|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"m\": 0,\n  \"k\": 0,\n  \"prefix\": [\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n  ],\n  \"suffixHead\": {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Nipopow proof object|NipopowProof|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowProofByHeaderId",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response =..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minChainLength|path|number|true|Minimal superchain length|\n|suffixLength|path|number|true|Suffix length|\n|headerId|path|string|true|ID of wanted header|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"m\": 0,\n  \"k\": 0,\n  \"prefix\": [\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n  ],\n  \"suffixHead\": {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"3..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Nipopow proof object|NipopowProof|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getNodeInfo",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /info \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /info HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/info',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/info',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/info', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/info', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/info\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffe..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Node info object|NodeInfo|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "sendTransaction",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ErgoTransaction|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|JSON with ID of the new transaction|TransactionId|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "sendTransactionAsBytes",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions/bytes \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions/bytes HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/bytes',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|JSON with ID of the new transaction|TransactionId|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "checkTransaction",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions/check \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions/check HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/check',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(fu..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ErgoTransaction|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|JSON with ID of the new transaction|TransactionId|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "checkTransactionAsBytes",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions/checkBytes \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions/checkBytes HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/checkBytes',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body)..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|JSON with ID of the new transaction|TransactionId|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactions",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/unconfirmed \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/unconfirmed HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/h..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array with Ergo transactions|Transactions|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "checkUnconfirmedTransaction",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X HEAD /transactions/unconfirmed/{txId}\n```\n=== \"http\"\n```http\nHEAD /transactions/unconfirmed/{txId} HTTP/1.1\n```\n=== \"javascript\"\n```javascript\n\nfetch('/transactions/unconfirmed/{txId}',\n{\n  method: 'HEAD'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nresult = RestClient.head '/transactions/unconfirmed/{txId}',\n  params: {\n  }\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\n\nr = requests.head('/transactions/unconfirmed/{txId}')\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('HEAD','/transactions/unconfirmed/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"HEAD\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"HEAD\", \"/transactions/unconfirmed/{txId}\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n```\nHEAD /tran..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txId|path|string|true|ID of a transaction in question|"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Transaction is in pool|None|\n|404|Not Found|Transaction is not in pool|None|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/byTransactionId/{txId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/unconfirmed/byTransactionId/{txId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/byTransactionId/{txId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/byTransactionId/{txId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/byTransactionId/{txId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/byTransactionId/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed/byTransactionId/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txId|path|string|true|ID of a transaction in question|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Ergo transaction|ErgoTransaction|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionsByErgoTree",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions/unconfirmed/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions/unconfirmed/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/transactions/unconfirmed/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/transactions/unconfirmed/byErgoTree', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/transactions/unconfirmed/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed/byErgoTree\");\nHttpURLConnection con = (HttpURL..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Ergo transaction|Transactions|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getFeeHistogram",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/poolHistogram \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/poolHistogram HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/poolHistogram',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/poolHistogram',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/poolHistogram', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/poolHistogram', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/poolHistogram\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|bins|query|integer(int32)|false|The number of bins in histogram|\n|maxtime|query|integer(int64)|false|Maximal wait time in milliseconds|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"nTxns\": 0,\n    \"totalFee\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array with fee histogram|FeeHistogram|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getRecommendedFee",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/getFee?waitTime=1&txSize=100 \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/getFee?waitTime=1&txSize=100 HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/getFee?waitTime=1&txSize=100',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/getFee',\n  params: {\n  'waitTime' => 'integer(int32)',\n'txSize' => 'integer(int32)'\n}, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/getFee', params={\n  'waitTime': '1',  'txSize': '100'\n}, headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/getFee', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/getFee?waitTime=1&txSize=100\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != nul..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|waitTime|query|integer(int32)|true|Maximum transaction wait time in minutes|\n|txSize|query|integer(int32)|true|Transaction size|\nExample responses\n200 Response\n=== \"json\"\n```json\n0\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Recommended fee for the transaction (in nanoErgs)|integer|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getExpectedWaitTime",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/waitTime?fee=1&txSize=100 \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/waitTime?fee=1&txSize=100 HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/waitTime?fee=1&txSize=100',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/waitTime',\n  params: {\n  'fee' => 'integer(int32)',\n'txSize' => 'integer(int32)'\n}, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/waitTime', params={\n  'fee': '1',  'txSize': '100'\n}, headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/waitTime', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/waitTime?fee=1&txSize=100\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    respons..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|fee|query|integer(int32)|true|Transaction fee (in nanoErgs)|\n|txSize|query|integer(int32)|true|Transaction size|\nExample responses\n200 Response\n=== \"json\"\n```json\n0\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Expected wait time in milliseconds|integer|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionInputBoxById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/inputs/byBoxId/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/unconfirmed/inputs/byBoxId/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/inputs/byBoxId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/inputs/byBoxId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/inputs/byBoxId/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/inputs/byBoxId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed/inputs/byBoxId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of an input box in question|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Unspent Ergo Box that is to be used as Input in unconfirmed tx|ErgoTransactionOutput|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/outputs/byBoxId/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/unconfirmed/outputs/byBoxId/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byBoxId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/outputs/byBoxId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/outputs/byBoxId/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/outputs/byBoxId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed/outputs/byBoxId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of an output box in question|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Unspent Ergo Box that is to be created by unconfirmed tx|ErgoTransactionOutput|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByErgoTree",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions/unconfirmed/outputs/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions/unconfirmed/outputs/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/transactions/unconfirmed/outputs/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/transactions/unconfirmed/outputs/byErgoTree', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/transactions/unconfirmed/outputs/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirme..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Unconfirmed transaction output boxes that correspond to given ErgoTree hex|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoTransactionOutput]|false|none|none|\n|\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByTokenId",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/outputs/byTokenId/{tokenId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /transactions/unconfirmed/outputs/byTokenId/{tokenId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byTokenId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/outputs/byTokenId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/outputs/byTokenId/{tokenId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/outputs/byTokenId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/transactions/unconfirmed/outputs/byTokenId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile (..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|string|true|ID of a token in question|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Unspent Ergo Boxes that are to be created by unconfirmed tx and contain given token|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoTransactionOutput]|false|none|none|\n|\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByRegisters",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /transactions/unconfirmed/outputs/byRegisters \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /transactions/unconfirmed/outputs/byRegisters HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byRegisters',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/transactions/unconfirmed/outputs/byRegisters',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/transactions/unconfirmed/outputs/byRegisters', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/transactions/unconfirmed/outputs/byRegisters', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/trans..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|Registers|true|none|\n|limit|query|integer(int32)|false|The number of items in list to return|\n|offset|query|integer(int32)|false|The number of items in list to skip|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Unconfirmed transaction output boxes that contain given registers|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoTransactionOutput]|false|none|none|\n|\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nThis operation does not require authentication"
    },
    {
      "heading": "getAllPeers",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /peers/all \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /peers/all HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/all',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/all',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/all', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/all', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/all\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"}..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of peer objects|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[Peer]|false|none|none|\n|\u00bb address|string|true|none|none|\n|\u00bb restApiUrl|string\u00a6null|false|none|none|\n|\u00bb name|string\u00a6null|false|none|none|\n|\u00bb lastSeen|Timestamp(int64)|false|none|Basic timestamp definition|\n|\u00bb connectionType|string\u00a6null|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|connectionType|Incoming|\n|connectionType|Outgoing|\nThis operation does not require authentication"
    },
    {
      "heading": "getConnectedPeers",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /peers/connected \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /peers/connected HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/connected',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/connected',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/connected', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/connected', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/connected\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n    ..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of peer objects|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[Peer]|false|none|none|\n|\u00bb address|string|true|none|none|\n|\u00bb restApiUrl|string\u00a6null|false|none|none|\n|\u00bb name|string\u00a6null|false|none|none|\n|\u00bb lastSeen|Timestamp(int64)|false|none|Basic timestamp definition|\n|\u00bb connectionType|string\u00a6null|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|connectionType|Incoming|\n|connectionType|Outgoing|\nThis operation does not require authentication"
    },
    {
      "heading": "connectToPeer",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /peers/connect \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /peers/connect HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"127.0.0.1:5673\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/peers/connect',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/peers/connect',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/peers/connect', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/peers/connect', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/connect\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\nExample responses\ndefault Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Attempt to connect to the peer|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getBlacklistedPeers",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /peers/blacklisted \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /peers/blacklisted HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/blacklisted',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/blacklisted',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/blacklisted', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/blacklisted', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/blacklisted\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string]..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Array of the addresses|BlacklistedPeers|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getPeersStatus",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /peers/status \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /peers/status HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/status',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/status',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/status', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/status', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/status\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []strin..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Network status|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[PeersStatus]|false|none|none|\n|\u00bb lastIncomingMessage|Timestamp(int64)|true|none|Basic timestamp definition|\n|\u00bb currentNetworkTime|Timestamp(int64)|true|none|Basic timestamp definition|\nThis operation does not require authentication"
    },
    {
      "heading": "getPeersSyncInfo",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /peers/syncInfo \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /peers/syncInfo HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/syncInfo',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/syncInfo',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/syncInfo', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/syncInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/syncInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Ac..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Network status|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[SyncInfo]|false|none|none|\n|\u00bb address|string|true|none|none|\n|\u00bb mode|PeerMode|true|none|none|\n|\u00bb\u00bb state|string|true|none|none|\n|\u00bb\u00bb verifyingTransactions|boolean|true|none|none|\n|\u00bb\u00bb fullBlocksSuffix|integer|true|none|none|\n|\u00bb version|string|true|none|none|\n|\u00bb status|string|true|none|none|\n|\u00bb height|integer|true|none|none|\nThis operation does not require authentication"
    },
    {
      "heading": "getPeersTrackInfo",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /peers/trackInfo \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /peers/trackInfo HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/trackInfo',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/trackInfo',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/trackInfo', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/trackInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/peers/trackInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n    ..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Network status|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[TrackInfo]|false|none|none|\n|\u00bb invalidModifierApproxSize|integer|true|none|none|\n|\u00bb requested|object|true|none|Currently requested modifiers|\n|\u00bb\u00bb additionalProperties|RequestedInfoByModifierId|false|none|none|\n|\u00bb\u00bb\u00bb additionalProperties|RequestedInfo|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb address|string|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb version|string|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb checks|integer|true|none|How many times we checked for modifier delivery status|\n|\u00bb received|object|true|none|Received modifiers|\n|\u00bb\u00bb additionalProperties|ConnectedPeerByModifierId|false|none|none|\n|\u00bb\u00bb\u00bb additionalProperties|ConnectedPeer|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb address|string|true|none|none|\n|\u00bb\u00bb\u00bb\u00bb version|string|false|none|none|\n|\u00bb\u00bb\u00bb\u00bb lastMessage|Timestamp(int64)|false|none|Basic timestamp definition|\nThis operation does not require authentication"
    },
    {
      "heading": "getRandomSeed",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utils/seed \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utils/seed HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/seed',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/seed',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/seed', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/seed', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/seed\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Base16-encoded 32 byte seed|string|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "CheckAddressValidityWithGet",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utils/address/{address} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utils/address/{address} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/address/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/address/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/address/{address}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/address/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/address/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|ErgoAddress|true|address to check|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"isValid\": true,\n  \"error\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Address validity with validation error|AddressValidity|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "CheckAddressValidity",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /utils/address \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /utils/address HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utils/address',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utils/address',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utils/address', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utils/address', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/address\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLi..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|address to check|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"isValid\": true,\n  \"error\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Address validity with validation error|AddressValidity|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "AddressToRaw",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utils/addressToRaw/{address} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utils/addressToRaw/{address} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/addressToRaw/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/addressToRaw/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/addressToRaw/{address}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/addressToRaw/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/addressToRaw/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|ErgoAddress|true|address to extract public key from|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|hex-encoded public key (serialized secp256k1 element)|string|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "RawToAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utils/rawToAddress/{pubkeyHex} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utils/rawToAddress/{pubkeyHex} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/rawToAddress/{pubkeyHex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/rawToAddress/{pubkeyHex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/rawToAddress/{pubkeyHex}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/rawToAddress/{pubkeyHex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/rawToAddress/{pubkeyHex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage m..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|pubkeyHex|path|string|true|public key to get address from|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Pay-to-public-key (P2PK) address|ErgoAddress|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "ErgoTreeToAddressWithGet",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utils/ergoTreeToAddress/{ergoTreeHex} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utils/ergoTreeToAddress/{ergoTreeHex} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/ergoTreeToAddress/{ergoTreeHex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/ergoTreeToAddress/{ergoTreeHex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/ergoTreeToAddress/{ergoTreeHex}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/ergoTreeToAddress/{ergoTreeHex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/ergoTreeToAddress/{ergoTreeHex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(r..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|ergoTreeHex|path|string|true|ErgoTree to derive an address from|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Ergo address|ErgoAddress|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "ErgoTreeToAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /utils/ergoTreeToAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /utils/ergoTreeToAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utils/ergoTreeToAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utils/ergoTreeToAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utils/ergoTreeToAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utils/ergoTreeToAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/ergoTreeToAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = c..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|ErgoTree hex to derive an address from|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Ergo address|ErgoAddress|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getRandomSeedWithLength",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utils/seed/{length} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utils/seed/{length} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/seed/{length}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/seed/{length}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/seed/{length}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/seed/{length}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/seed/{length}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|length|path|string|true|seed length in bytes|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"\\\"83375fd213cfd7dfd984ce1901d62c302a1db53160b416674c8da1a393a6bbc316\\\"\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Base16-encoded N byte seed|string|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "hashBlake2b",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /utils/hash/blake2b \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /utils/hash/blake2b HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utils/hash/blake2b',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utils/hash/blake2b',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utils/hash/blake2b', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utils/hash/blake2b', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utils/hash/blake2b\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInpu..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"\\\"6ed54addddaf10fe8fcda330bd443a57914fbce38a9fa27248b07e361cc76a41\\\"\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Base16-encoded 32 byte hash|string|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "walletInit",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/init \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/init HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"pass\": \"string\",\n  \"mnemonicPass\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/init',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/init',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/init', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/init', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/init\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCod..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|InitWallet|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"mnemonic\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|New wallet with randomly generated seed created successfully|InitWalletResult|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletRestore",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/restore \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/restore HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"pass\": \"string\",\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\",\n  \"usePre1627KeyDerivation\": true\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/restore',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/restore',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/restore', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/restore', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/restore\");\nHttpURLConnection con = (HttpURLConnection) obj.openC..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|RestoreWallet|true|none|\nExample responses\ndefault Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Wallet restored successfully|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "checkSeed",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/check \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/check HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/check',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/check',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/check', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/check', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/check\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.get..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|CheckWallet|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"matched\": true\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Whether passphrase match wallet|PassphraseMatch|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUnlock",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/unlock \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/unlock HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"pass\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/unlock',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/unlock',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/unlock', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/unlock', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/unlock\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedR..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|UnlockWallet|true|none|\nExample responses\ndefault Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Wallet unlocked successfully|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletLock",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/lock \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/lock HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/lock',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/lock',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/lock', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/lock', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/lock\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\ni..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Wallet locked successfully|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletRescan",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/rescan \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/rescan HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"fromHeight\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/rescan',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/rescan',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/rescan', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/rescan', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/rescan\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedRe..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|object|false|none|\n|\u00bb fromHeight|body|integer(int32)|true|none|\nExample responses\ndefault Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Wallet rescanned|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getWalletStatus",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/status \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/status HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/status',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/status',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/status', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/status', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/status\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\np..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Wallet status|WalletStatus|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUpdateChangeAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/updateChangeAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/updateChangeAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/updateChangeAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/updateChangeAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/updateChangeAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/updateChangeAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/updateChangeAddress\");\nHttpURLConnection con = (H..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ErgoAddress|true|none|\nExample responses\ndefault Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Change address updated successfully|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletDeriveKey",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/deriveKey \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/deriveKey HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"derivationPath\": \"m/1/2\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/deriveKey',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/deriveKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/deriveKey', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/deriveKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/deriveKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = co..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|DeriveKey|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Resulted address|DeriveKeyResult|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletDeriveNextKey",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/deriveNextKey \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/deriveNextKey HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/deriveNextKey',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/deriveNextKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/deriveNextKey', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/deriveNextKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/deriveNextKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.p..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Resulted secret path and address|DeriveNextKeyResult|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletBalances",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/balances \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/balances HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/balances',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/balances',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/balances', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/balances', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/balances\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n==..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Get total amount of confirmed Ergo tokens and assets|BalancesSnapshot|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactions",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/transactions \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/transactions HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transactions',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/transactions',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/transactions', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/transactions', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/transactions\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minInclusionHeight|query|integer(int32)|false|Minimal tx inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximal tx inclusion height|\n|minConfirmations|query|integer(int32)|false|Minimal confirmations number|\n|maxConfirmations|query|integer(int32)|false|Maximal confirmations number|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"inclusionHeight\": 20998,\n    \"numConfirmations\": 20998,\n    \"scans\": [\n      1\n    ],\n    \"si..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|A list of all wallet-related transactions|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletTransaction]|false|none|[Transaction augmented with some useful information]|\n|\u00bb id|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb inputs|[ErgoTransactionInput]|true|none|Transaction inputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb spendingProof|SpendingProof|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb proofBytes|SpendingProofBytes(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb dataInputs|[ErgoTransactionDataInput]|true|none|Transaction data inputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb outputs|[ErgoTransactionOutput]|true|none|Transaction outputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb numConfirmations|integer(int32)|true|none|Number of transac..."
    },
    {
      "heading": "walletGetTransaction",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/transactionById?id=string \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/transactionById?id=string HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transactionById?id=string',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/transactionById',\n  params: {\n  'id' => 'string'\n}, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/transactionById', params={\n  'id': 'string'\n}, headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/transactionById', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/transactionById?id=string\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhil..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|id|query|string|true|Transaction id|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"inclusionHeight\": 20998,\n    \"numConfirmations\": 20998,\n    \"scans\": [\n      1\n    ],\n    \"size\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Wallet-related transaction|Inline|\n|404|Not Found|Transaction with specified id not found in wallet|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletTransaction]|false|none|[Transaction augmented with some useful information]|\n|\u00bb id|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb inputs|[ErgoTransactionInput]|true|none|Transaction inputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb spendingProof|SpendingProof|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb proofBytes|SpendingProofBytes(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb dataInputs|[ErgoTransactionDataInput]|true|none|Transaction data inputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb outputs|[ErgoTransactionOutput]|true|none|Transaction outputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb numConfirmations|integer(int32)|true|none|Number of transac..."
    },
    {
      "heading": "walletTransactionsByScanId",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/transactionsByScanId/{scanId} \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/transactionsByScanId/{scanId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transactionsByScanId/{scanId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/transactionsByScanId/{scanId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/transactionsByScanId/{scanId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/transactionsByScanId/{scanId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/transactionsByScanId/{scanId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBu..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|scanId|path|integer(int32)|true|identifier of a scan|\n|minInclusionHeight|query|integer(int32)|false|Minimal tx inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximal tx inclusion height|\n|minConfirmations|query|integer(int32)|false|Minimal confirmations number|\n|maxConfirmations|query|integer(int32)|false|Maximal confirmations number|\n|includeUnconfirmed|query|boolean|false|Include transactions from mempool|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  ..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Scan-related transactions|Inline|\n|404|Not Found|Transactions with related scan id not found in wallet|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletTransaction]|false|none|[Transaction augmented with some useful information]|\n|\u00bb id|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb inputs|[ErgoTransactionInput]|true|none|Transaction inputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb spendingProof|SpendingProof|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb proofBytes|SpendingProofBytes(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb dataInputs|[ErgoTransactionDataInput]|true|none|Transaction data inputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb outputs|[ErgoTransactionOutput]|true|none|Transaction outputs|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb numConfirmations|integer(int32)|true|none|Number of transac..."
    },
    {
      "heading": "walletBoxes",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/boxes \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/boxes HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/boxes',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/boxes',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/boxes', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/boxes', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/boxes\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|A list of all wallet-related boxes|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletBox]|false|none|none|\n|\u00bb box|ErgoTransactionOutput|true|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletBoxesCollect",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/boxes/collect \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/boxes/collect HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"targetAssets\": [\n    [\n      \"string\",\n      \"string\"\n    ]\n  ],\n  \"targetBalance\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/boxes/collect',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/boxes/collect',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/boxes/collect', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/boxes/collect', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/boxes/collect\");\nHttpURLConnection con = (Htt..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|BoxesRequestHolder|true|This API method recieves balance and assets, according to which, it's collecting result|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|A list of all collected boxes|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletBox]|false|none|none|\n|\u00bb box|ErgoTransactionOutput|true|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUnspentBoxes",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/boxes/unspent \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/boxes/unspent HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/boxes/unspent',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/boxes/unspent',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/boxes/unspent', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/boxes/unspent', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/boxes/unspent\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.p..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|A list of unspent boxes|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletBox]|false|none|none|\n|\u00bb box|ErgoTransactionOutput|true|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletBalancesUnconfirmed",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/balances/withUnconfirmed \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/balances/withUnconfirmed HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/balances/withUnconfirmed',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/balances/withUnconfirmed',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/balances/withUnconfirmed', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/balances/withUnconfirmed', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/balances/withUnconfirmed\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.read..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Get summary amount of confirmed plus unconfirmed Ergo tokens and assets|BalancesSnapshot|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletAddresses",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /wallet/addresses \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /wallet/addresses HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/addresses',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/addresses',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/addresses', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/addresses', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/addresses\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|String with encoded wallet addresses|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoAddress]|false|none|[Encoded Ergo Address]|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactionGenerate",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/transaction/generate \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/transaction/generate HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transaction/generate',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/transaction/generate',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/transaction/generate', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request b..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|RequestsHolder|true|This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \"assets\" and \"registers\" fields are not needed. For asset issuance request, \"registers\" field is not needed.|"
    },
    {
      "heading": "Detailed descriptions",
      "content": "body: This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \"assets\" and \"registers\" fields are not needed. For asset issuance request, \"registers\" field is not needed.\nYou may specify boxes to spend by providing them in \"inputsRaw\". Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \"inputsRaw\" empty.\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d1..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Generated Ergo transaction|ErgoTransaction|\n|400|Bad Request|Bad transaction request|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUnsignedTransactionGenerate",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/transaction/generateUnsigned \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/transaction/generateUnsigned HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transaction/generateUnsigned',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/transaction/generateUnsigned',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/transaction/generateUnsigned', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|RequestsHolder|true|The same as /wallet/transaction/generate but generates unsigned transaction.|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extension\": {\n        \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Generated unsigned Ergo transaction|UnsignedErgoTransaction|\n|400|Bad Request|Bad transaction request|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactionSign",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/transaction/sign \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/transaction/sign HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ],\n  \"hints\": {\n    \"secretHints\": [\n      {\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\": -51,\n              \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n            },\n            \"position\": \"0-1\",\n            \"type\": \"dlog\",..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|TransactionSigningRequest|true|With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported.|"
    },
    {
      "heading": "Detailed descriptions",
      "content": "body: With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported.\nPlease note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \"inputsRaw\" and \"dataInputsRaw\" fields.\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Generated Ergo transaction|ErgoTransaction|\n|400|Bad Request|Bad transaction request|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactionGenerateAndSend",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/transaction/send \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/transaction/send HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transaction/send',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/transaction/send',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/transaction/send', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body =..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|RequestsHolder|true|See description of /wallet/transaction/generate|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Identifier of an Ergo transaction generated|TransactionId|\n|400|Bad Request|Bad transaction request|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletPaymentTransactionGenerateAndSend",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/payment/send \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/payment/send HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '[\n  {\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"value\": 1,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"registers\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    }\n  }\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/payment/send',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/payment/send',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/payment/send', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/payment/send', array(\n        'headers' => $headers,\n        'json' => $request_body,\n      ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|PaymentRequest|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Identifier of an Ergo transaction generated|TransactionId|\n|400|Bad Request|Bad payment request|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletGetPrivateKey",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/getPrivateKey \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/getPrivateKey HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/getPrivateKey',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/getPrivateKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/getPrivateKey', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/getPrivateKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/wallet/getPrivateKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\nco..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ErgoAddress|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Successfully retrieved secret key|DlogSecret|\n|404|Not Found|Address not found in wallet database|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "generateCommitments",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/generateCommitments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/generateCommitments HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"secrets\": {\n    \"dlog\": [\n      \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n    ],\n    \"dht\": [\n      {\n        \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n        \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|GenerateCommitmentsRequest|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"secretHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ],\n  \"publicHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Transaction-related hints|TransactionHintsBag|\n|400|Bad Request|Error|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "extractHints",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /wallet/extractHints \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /wallet/extractHints HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  },\n  \"real\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\"..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|HintExtractionRequest|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"secretHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ],\n  \"publicHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Hints for the transaction|TransactionHintsBag|\n|400|Bad Request|Error|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningRequestBlockCandidate",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /mining/candidate \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /mining/candidate HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/candidate',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/mining/candidate',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/mining/candidate', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/mining/candidate', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/mining/candidate\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|External candidate|WorkMessage|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningRequestBlockCandidateWithMandatoryTransactions",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /mining/candidateWithTxs \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /mining/candidateWithTxs HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetc..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|Transactions|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"b\": 987654321,\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"proof\": {\n    \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n    \"txProofs\": [\n      {\n        \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n        \"levels\": [\n          [\n            \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n            0\n          ]\n        ]\n      }\n    ]\n  }\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|External candidate|WorkMessage|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningReadMinerRewardAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /mining/rewardAddress \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /mining/rewardAddress HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/rewardAddress',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/mining/rewardAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/mining/rewardAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/mining/rewardAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/mining/rewardAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.p..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Miner Reward Script (in P2S format)|RewardAddress|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningReadMinerRewardPubkey",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /mining/rewardPublicKey \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /mining/rewardPublicKey HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/rewardPublicKey',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/mining/rewardPublicKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/mining/rewardPublicKey', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/mining/rewardPublicKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/mining/rewardPublicKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close()..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Public key for miner rewards (as hex-encoded secp256k1 point)|RewardPubKey|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningSubmitSolution",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /mining/solution \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /mining/solution HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n  \"n\": \"0000000000000000\",\n  \"d\": 987654321\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/solution',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/mining/solution',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/mining/solution', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/mining/solution', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|PowSolutions|true|none|\nExample responses\n400 Response\n=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Solution is valid|None|\n|400|Bad Request|Solution is invalid|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getBoxesBinaryProof",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /utxo/getBoxesBinaryProof \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /utxo/getBoxesBinaryProof HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '[\n  \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/utxo/getBoxesBinaryProof',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/utxo/getBoxesBinaryProof',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/utxo/getBoxesBinaryProof', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utxo/getBoxesBinaryProof', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/getBoxesBinaryProof\");\nHttpURLConnection co..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|TransactionBoxId|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Serialized batch proof|SerializedAdProof|\n|400|Bad Request|Prove error|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getBoxById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utxo/byId/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utxo/byId/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/byId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/byId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/byId/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/byId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/byId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string]..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a wanted box|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Box object|ErgoTransactionOutput|\n|404|Not Found|Box with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxByIdBinary",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utxo/byIdBinary/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utxo/byIdBinary/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/byIdBinary/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/byIdBinary/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/byIdBinary/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/byIdBinary/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/byIdBinary/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a wanted box|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Json containing box identifier and hex-encoded box bytes|SerializedBox|\n|404|Not Found|Box with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxWithPoolById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utxo/withPool/byId/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utxo/withPool/byId/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/withPool/byId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/withPool/byId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/withPool/byId/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/withPool/byId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/withPool/byId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a box to obtain|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Box object|ErgoTransactionOutput|\n|404|Not Found|Box with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxWithPoolByIds",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /utxo/withPool/byIds \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /utxo/withPool/byIds HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '[\n  \"string\"\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utxo/withPool/byIds',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utxo/withPool/byIds',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utxo/withPool/byIds', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utxo/withPool/byIds', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/withPool/byIds\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString input..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|array[string]|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Box object|Inline|\n|404|Not Found|No any box exists for every id provided|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoTransactionOutput]|false|none|none|\n|\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxWithPoolByIdBinary",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utxo/withPool/byIdBinary/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utxo/withPool/byIdBinary/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/withPool/byIdBinary/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/withPool/byIdBinary/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/withPool/byIdBinary/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/withPool/byIdBinary/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/withPool/byIdBinary/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n`..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|ID of a wanted box|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Json containing box identifier and hex-encoded box bytes|SerializedBox|\n|404|Not Found|Box with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getSnapshotsInfo",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utxo/getSnapshotsInfo\n```\n=== \"http\"\n```http\nGET /utxo/getSnapshotsInfo HTTP/1.1\n```\n=== \"javascript\"\n```javascript\n\nfetch('/utxo/getSnapshotsInfo',\n{\n  method: 'GET'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nresult = RestClient.get '/utxo/getSnapshotsInfo',\n  params: {\n  }\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\n\nr = requests.get('/utxo/getSnapshotsInfo')\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/getSnapshotsInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/getSnapshotsInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/utxo/getSnapshotsInfo\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n```\nGET /utxo/getSnapshotsInfo\nGet information about locally stored UTXO snapshots"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|A list of saved snapshots|None|\nThis operation does not require authentication"
    },
    {
      "heading": "genesisBoxes",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /utxo/genesis \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /utxo/genesis HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/genesis',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/genesis',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/genesis', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/genesis', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/utxo/genesis\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []strin..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|A list of all the genesis boxes|Inline|\n|404|Not Found|Box with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoTransactionOutput]|false|none|none|\n|\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nThis operation does not require authentication"
    },
    {
      "heading": "scriptP2SAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /script/p2sAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /script/p2sAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"source\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/script/p2sAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/script/p2sAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/script/p2sAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/script/p2sAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/script/p2sAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = co..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|SourceHolder|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Ergo address derived from source|AddressHolder|\n|400|Bad Request|Bad source|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "scriptP2SHAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /script/p2shAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /script/p2shAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"source\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/script/p2shAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/script/p2shAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/script/p2shAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/script/p2shAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/script/p2shAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCo..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|SourceHolder|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|P2SH address derived from source|AddressHolder|\n|400|Bad Request|Bad source|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "addressToTree",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /script/addressToTree/{address} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /script/addressToTree/{address} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/script/addressToTree/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/script/addressToTree/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/script/addressToTree/{address}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/script/addressToTree/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/script/addressToTree/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage m..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|ErgoAddress|true|address to get a script from|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"tree\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Base16-encoded ErgoTree (script)|ErgoTreeObject|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "addressToBytes",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /script/addressToBytes/{address} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /script/addressToBytes/{address} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/script/addressToBytes/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/script/addressToBytes/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/script/addressToBytes/{address}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/script/addressToBytes/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/script/addressToBytes/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npa..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|address|path|ErgoAddress|true|address to get a script from|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Base16-encoded Sigma byte array constant which contains script bytes|ScriptBytes|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "executeWithContext",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /script/executeWithContext \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /script/executeWithContext HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"script\": \"string\",\n  \"namedConstants\": {},\n  \"context\": {\n    \"lastBlockUtxoRoot\": {\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"treeFlags\": 0,\n      \"keyLength\": 0,\n      \"valueLength\": 0\n    },\n    \"headers\": [\n      {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"height\": 667,\n        \"size\": 667,\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n       ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ExecuteScript|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"value\": {\n    \"op\": -45,\n    \"condition\": true\n  },\n  \"cost\": 10\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Result of reduceToCrypto|CryptoResult|\n|400|Bad Request|Compiler error|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "registerScan",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /scan/register \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /scan/register HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"scanName\": \"Assets Tracker\",\n  \"walletInteraction\": \"off\",\n  \"removeOffchain\": true,\n  \"trackingRule\": {\n    \"predicate\": \"containsAsset\",\n    \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n  }\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/register',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/register',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/register', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/register', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ScanRequest|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"scanId\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Identifier of a scan generated|ScanId|\n|400|Bad Request|Bad request|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "deregisterScan",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /scan/deregister \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /scan/deregister HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"scanId\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/deregister',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/deregister',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/deregister', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/deregister', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/scan/deregister\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ScanId|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"scanId\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Identifier of a scan removed|ScanId|\n|400|Bad Request|No scan found|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "listAllScans",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /scan/listAll \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /scan/listAll HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/listAll',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/scan/listAll',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/scan/listAll', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/scan/listAll', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/scan/listAll\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage ..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|List of scans registered|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[Scan]|false|none|none|\n|\u00bb scanName|string|false|none|none|\n|\u00bb scanId|integer|false|none|none|\n|\u00bb walletInteraction|string|false|none|none|\n|\u00bb removeOffchain|boolean|false|none|none|\n|\u00bb trackingRule|ScanningPredicate|false|none|none|\n|\u00bb\u00bb predicate|string|true|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|walletInteraction|off|\n|walletInteraction|shared|\n|walletInteraction|forced|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "listUnspentScans",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /scan/unspentBoxes/{scanId} \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /scan/unspentBoxes/{scanId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/unspentBoxes/{scanId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/scan/unspentBoxes/{scanId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/scan/unspentBoxes/{scanId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/scan/unspentBoxes/{scanId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/scan/unspentBoxes/{scanId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.app..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|scanId|path|integer(int32)|true|identifier of a scan|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|List of unspent boxes|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletBox]|false|none|none|\n|\u00bb box|ErgoTransactionOutput|true|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "listSpentScans",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /scan/spentBoxes/{scanId} \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nGET /scan/spentBoxes/{scanId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/spentBoxes/{scanId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/scan/spentBoxes/{scanId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/scan/spentBoxes/{scanId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/scan/spentBoxes/{scanId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/scan/spentBoxes/{scanId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine)..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|scanId|path|integer(int32)|true|identifier of a scan|\n|minConfirmations|query|integer(int32)|false|Minimal number of confirmations, -1 means we consider unconfirmed|\n|maxConfirmations|query|integer(int32)|false|Maximum number of confirmations, -1 means unlimited|\n|minInclusionHeight|query|integer(int32)|false|Minimal box inclusion height|\n|maxInclusionHeight|query|integer(int32)|false|Maximum box inclusion height, -1 means unlimited|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|List of spent boxes|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[WalletBox]|false|none|none|\n|\u00bb box|ErgoTransactionOutput|true|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb creationTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingTransaction|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|\u00bb spent|boolean|true|none|A flag signalling whether the box was spent|\n|\u00bb creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|\u00bb scans|[integer]|true|none|Scan identifiers the box relates to|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "scanStopTracking",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /scan/stopTracking \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /scan/stopTracking HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"scanId\": 0,\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/stopTracking',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/stopTracking',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/stopTracking', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/stopTracking', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/scan/stopTracking\");\nHttpURLConnection con = (HttpURLConnection) o..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ScanIdBoxId|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"scanId\": 0,\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|The box is not tracked anymore|ScanIdBoxId|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "scriptP2SRule",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /scan/p2sRule \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /scan/p2sRule HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '4MQyML64GnzMxZgm';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/p2sRule',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/p2sRule',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/p2sRule', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/p2sRule', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/scan/p2sRule\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = ne..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"scanId\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Id of custom scan generated and registered|ScanId|\n|400|Bad Request|Bad source|ApiError|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "addBox",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /scan/addBox \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /scan/addBox HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '{\n  \"scanIds\": [\n    0\n  ],\n  \"box\": {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/addBox',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/addBox',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/addBox', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$cl..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|ScanIdsBox|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|It the box is added successfully, then its id is returned|TransactionId|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "nodeShutdown",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /node/shutdown \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n```\n=== \"http\"\n```http\nPOST /node/shutdown HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/node/shutdown',\n{\n  method: 'POST',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/node/shutdown',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/node/shutdown', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/node/shutdown', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/node/shutdown\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|The node will be shut down in 5 seconds|None|\n|default|Default|Error|ApiError|\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "emissionAt",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /emission/at/{blockHeight} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /emission/at/{blockHeight} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/emission/at/{blockHeight}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/emission/at/{blockHeight}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/emission/at/{blockHeight}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/emission/at/{blockHeight}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/emission/at/{blockHeight}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n      ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|blockHeight|path|integer(int32)|true|Height to get emission data for|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"minerReward\": 0,\n  \"totalCoinsIssued\": 0,\n  \"totalRemainCoins\": 0,\n  \"reemitted\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Emission data|EmissionInfo|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "emissionScripts",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /emission/scripts \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /emission/scripts HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/emission/scripts',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/emission/scripts',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/emission/scripts', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/emission/scripts', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/emission/scripts\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]strin..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|Emission-related scripts|EmissionScripts|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getIndexedHeight",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/indexedHeight \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/indexedHeight HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/indexedHeight',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/indexedHeight',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/indexedHeight', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/indexedHeight', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/indexedHeight\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/h..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|height of the indexer and full height|Inline|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb indexedHeight|integer|false|none|number of blocks indexed|\n|\u00bb fullHeight|integer|false|none|number of all known blocks|\nThis operation does not require authentication"
    },
    {
      "heading": "getTxById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/transaction/byId/{txId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/transaction/byId/{txId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/byId/{txId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/transaction/byId/{txId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/transaction/byId/{txId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/transaction/byId/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/transaction/byId/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txId|path|string|true|id of the wanted transaction|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"index\": 3,\n  \"globalIndex\": 3565445,\n  \"size\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|transaction with wanted id|IndexedErgoTransaction|\n|404|Not Found|Transaction with this id doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getTxByIndex",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/transaction/byIndex/{txIndex} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/transaction/byIndex/{txIndex} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/byIndex/{txIndex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/transaction/byIndex/{txIndex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/transaction/byIndex/{txIndex}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/transaction/byIndex/{txIndex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/transaction/byIndex/{txIndex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|txIndex|path|number|true|index of the wanted transaction|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"index\": 3,\n  \"globalIndex\": 3565445,\n  \"size\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|transaction with wanted index|IndexedErgoTransaction|\n|404|Not Found|Transaction with this index doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getTxsByAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blockchain/transaction/byAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blockchain/transaction/byAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/byAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/transaction/byAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/transaction/byAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/transaction/byAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/transaction/byAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseC..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"items\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"inclusionHeight\": 20998,\n      \"numConfirmations\": 20998,\n      \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40a..."
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|transactions associated with wanted address|Inline|\n|404|Not Found|No transactions found for wanted address|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[IndexedErgoTransaction]|false|none|Array of transactions|\n|\u00bb\u00bb id|TransactionId(base16)|true|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb inputs|[ErgoTransactionInput]|true|none|Transaction inputs|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb spendingProof|SpendingProof|true|none|Spending proof for transaction input|\n|\u00bb\u00bb\u00bb\u00bb proofBytes|SpendingProofBytes(base16)|true|none|Base16-encoded spending proofs|\n|\u00bb\u00bb\u00bb\u00bb extension|object|true|none|Variables to be put into context|\n|\u00bb\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb dataInputs|[ErgoTransactionDataInput]|true|none|Transaction data inputs|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb outputs|[ErgoTransactionOutput]|true|none|Transaction outputs|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\n|\u00bb\u00bb inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|\u00bb\u00bb numConfirmations|integer(int32)|true|none|Number of transaction c..."
    },
    {
      "heading": "getTxRange",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/transaction/range \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/transaction/range HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/range',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/transaction/range',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/transaction/range', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/transaction/range', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/transaction/range\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|transactions ids in wanted range|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of transaction ids\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ModifierId]|false|none|Array of transaction ids|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/box/byId/{boxId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/box/byId/{boxId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/byId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/byId/{boxId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/byId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/byId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       ..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxId|path|string|true|id of the wanted box|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"globalIndex\": 83927\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|box with wanted id|IndexedErgoBox|\n|404|Not Found|No box found with wanted id|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxByIndex",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/box/byIndex/{boxIndex} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/box/byIndex/{boxIndex} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byIndex/{boxIndex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/byIndex/{boxIndex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/byIndex/{boxIndex}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/byIndex/{boxIndex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/byIndex/{boxIndex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n===..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|boxIndex|path|number|true|index of the wanted box|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"globalIndex\": 83927\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|box with wanted index|IndexedErgoBox|\n|404|Not Found|Box with this index doesn't exist|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByTokenId",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/box/byTokenId/{tokenId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/box/byTokenId/{tokenId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byTokenId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/byTokenId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/byTokenId/{tokenId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/byTokenId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/byTokenId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|ModifierId|true|id of the token|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|boxes associated with wanted token|Inline|\n|404|Not Found|No boxes found for wanted token|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\nallOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|ErgoTransactionOutput|false|none|none|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\ncontinued\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByTokenIdUnspent",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/box/unspent/byTokenId/{tokenId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/box/unspent/byTokenId/{tokenId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/unspent/byTokenId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/unspent/byTokenId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/unspent/byTokenId/{tokenId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/unspent/byTokenId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/unspent/byTokenId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|ModifierId|true|id of the token|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|sortDirection|query|string|false|desc = new boxes first ; asc = old boxes first|\n|includeUnconfirmed|query|boolean|false|if true include unconfirmed transactions from mempool|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"globalIndex\": 83927\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|unspent boxes associated with wanted token|Inline|\n|404|Not Found|No unspent boxes found for wanted token|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of boxes\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[allOf]|false|none|Array of boxes|\nallOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|ErgoTransactionOutput|false|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb\u00bb spentTransactionId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByAddress",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blockchain/box/byAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blockchain/box/byAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/byAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/byAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/byAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/byAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new Buf..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|boxes associated with wanted address|Inline|\n|404|Not Found|No boxes found for wanted address|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\nallOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|ErgoTransactionOutput|false|none|none|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\ncontinued\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByAddressUnspent",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blockchain/box/unspent/byAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blockchain/box/unspent/byAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/unspent/byAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/unspent/byAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/unspent/byAddress', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/unspent/byAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/unspent/byAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseC..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|sortDirection|query|string|false|desc = new boxes first ; asc = old boxes first|\n|includeUnconfirmed|query|boolean|false|if true include unconfirmed transactions from mempool|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"globalIndex\": 83927\n  }\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|unspent boxes associated with wanted address|Inline|\n|404|Not Found|No unspent boxes found for wanted address|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of boxes\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[allOf]|false|none|Array of boxes|\nallOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|ErgoTransactionOutput|false|none|none|\n|\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb\u00bb spentTransactionId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxRange",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/box/range \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/box/range HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/range',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/range',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/range', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/range', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/range\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    h..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\nExample responses\n200 Response\n=== \"json\"\n```json\n[\n  \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|box ids in wanted range|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of box ids\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ModifierId]|false|none|Array of box ids|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByErgoTree",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blockchain/box/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blockchain/box/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/byErgoTree', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/byErgoTree\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint re..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|boxes with wanted ergotree|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\nallOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|ErgoTransactionOutput|false|none|none|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\ncontinued\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByErgoTreeUnspent",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blockchain/box/unspent/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blockchain/box/unspent/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/unspent/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/unspent/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/unspent/byErgoTree', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/unspent/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/box/unspent/byErgoTree\");\nHttpURLConnection con = (HttpURLConnection) ob..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|offset|query|integer(int32)|false|amount of elements to skip from the start|\n|limit|query|integer(int32)|false|amount of elements to retrieve|\n|sortDirection|query|string|false|desc = new boxes first ; asc = old boxes first|\n|includeUnconfirmed|query|boolean|false|if true include unconfirmed transactions from mempool|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|unspent boxes with wanted ergotree|Inline|\n|404|Not Found|No unspent box found with wanted ergotree|ApiError|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb items|[allOf]|false|none|Array of boxes|\nallOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|ErgoTransactionOutput|false|none|none|\n|\u00bb\u00bb\u00bb boxId|TransactionBoxId(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|\u00bb\u00bb\u00bb value|integer(int64)|true|none|Amount of Ergo token|\n|\u00bb\u00bb\u00bb ergoTree|ErgoTree(base16)|true|none|Base16-encoded ergo tree bytes|\n|\u00bb\u00bb\u00bb creationHeight|integer(int32)|true|none|Height the output was created at|\n|\u00bb\u00bb\u00bb assets|[Asset]|false|none|Assets list in the transaction|\n|\u00bb\u00bb\u00bb\u00bb tokenId|Digest32(base16)|true|none|Base16-encoded 32 byte digest|\n|\u00bb\u00bb\u00bb\u00bb amount|integer(int64)|true|none|Amount of the token|\n|\u00bb\u00bb\u00bb additionalRegisters|Registers|true|none|Ergo box registers|\n|\u00bb\u00bb\u00bb\u00bb additionalProperties|SValue(base16)|false|none|Base-16 encoded serialized Sigma-state value|\n|\u00bb\u00bb\u00bb transactionId|TransactionId(base16)|false|none|Base16-encoded transaction id bytes|\n|\u00bb\u00bb\u00bb index|integer(int32)|false|none|Index in the transaction outputs|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb\u00bb anonymous|object|false|none|Box indexed with extra information|\n|\u00bb\u00bb\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb\u00bb\u00bb spentTransactionId|ModifierId(base16)|true|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb\u00bb\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb\u00bb\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|\ncontinued\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb total|integer|false|none|Total number of retreived boxes|\nThis operation does not require authentication"
    },
    {
      "heading": "getTokenById",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X GET /blockchain/token/byId/{tokenId} \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nGET /blockchain/token/byId/{tokenId} HTTP/1.1\n\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/token/byId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/token/byId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/token/byId/{tokenId}', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/token/byId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/token/byId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n```\n=== \"go\"\n```go\npa..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|tokenId|path|string|true|id of the wanted token|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"boxId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"emissionAmount\": 3500000,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"decimals\": 8\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|token with wanted id|IndexedToken|\n|404|Not Found|No token found with wanted id|ApiError|\n|default|Default|Error|ApiError|\nThis operation does not require authentication"
    },
    {
      "heading": "getAddressBalanceTotal",
      "content": "Code samples\n=== \"shell\"\n```shell\n## You can also use wget\ncurl -X POST /blockchain/balance \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n=== \"http\"\n```http\nPOST /blockchain/balance HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n```\n=== \"javascript\"\n```javascript\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/balance',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n```\n=== \"ruby\"\n```ruby\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/balance',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n```\n=== \"python\"\n```python\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/balance', headers = headers)\n\nprint(r.json())\n```\n=== \"php\"\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/balance', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n```\n=== \"java\"\n```java\nURL obj = new URL(\"/blockchain/balance\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con..."
    },
    {
      "heading": "Parameters",
      "content": "|Name|In|Type|Required|Description|\n|---|---|---|---|---|\n|body|body|string|true|none|\nExample responses\n200 Response\n=== \"json\"\n```json\n{\n  \"confirmed\": {\n    \"nanoErgs\": 0,\n    \"tokens\": [\n      {\n        \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 0,\n        \"decimals\": 0,\n        \"name\": \"string\"\n      }\n    ]\n  },\n  \"unconfirmed\": {\n    \"nanoErgs\": 0,\n    \"tokens\": [\n      {\n        \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 0,\n        \"decimals\": 0,\n        \"name\": \"string\"\n      }\n    ]\n  }\n}\n```"
    },
    {
      "heading": "Responses",
      "content": "|Status|Meaning|Description|Schema|\n|---|---|---|---|\n|200|OK|balance information|Inline|\n|default|Default|Error|ApiError|"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb confirmed|BalanceInfo|false|none|Balance information|\n|\u00bb\u00bb nanoErgs|integer(int64)|true|none|Balance of nanoERGs|\n|\u00bb\u00bb tokens|[object]|true|none|Balance of tokens|\n|\u00bb\u00bb\u00bb tokenId|ModifierId(base16)|false|none|Base16-encoded 32 byte modifier id|\n|\u00bb\u00bb\u00bb amount|integer(int64)|false|none|Amount of the token|\n|\u00bb\u00bb\u00bb decimals|integer|false|none|Number of decimals of the token|\n|\u00bb\u00bb\u00bb name|string|false|none|Name of the token, if any|\n|\u00bb unconfirmed|BalanceInfo|false|none|Balance information|\nThis operation does not require authentication"
    },
    {
      "heading": "ErgoTransactionInput",
      "content": "=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingProof\": {\n    \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"extension\": {\n      \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n    }\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|TransactionBoxId|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|spendingProof|SpendingProof|true|none|Spending proof for transaction input|"
    },
    {
      "heading": "ErgoTransactionDataInput",
      "content": "=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|TransactionBoxId|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|"
    },
    {
      "heading": "ErgoTransactionUnsignedInput",
      "content": "=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extension\": {\n    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|TransactionBoxId|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|extension|object|false|none|none|\n|\u00bb additionalProperties|SValue|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "SpendingProof",
      "content": "=== \"json\"\n```json\n{\n  \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extension\": {\n    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n  }\n}\n```\nSpending proof for transaction input"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|proofBytes|SpendingProofBytes|true|none|Base16-encoded spending proofs|\n|extension|object|true|none|Variables to be put into context|\n|\u00bb additionalProperties|SValue|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "SerializedBox",
      "content": "=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|TransactionBoxId|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|bytes|HexString|true|none|Base16-encoded bytes|"
    },
    {
      "heading": "ScriptBytes",
      "content": "=== \"json\"\n```json\n{\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|bytes|HexString|true|none|Base16-encoded bytes|"
    },
    {
      "heading": "SnapshotsInfo",
      "content": "=== \"json\"\n```json\n{\n  \"availableManifests\": [\n    {}\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|availableManifests|[object]|true|none|Map of available manifests height -> manifestId|"
    },
    {
      "heading": "ErgoTransactionOutput",
      "content": "=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|boxId|TransactionBoxId|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|\n|value|integer(int64)|true|none|Amount of Ergo token|\n|ergoTree|ErgoTree|true|none|Base16-encoded ergo tree bytes|\n|creationHeight|integer(int32)|true|none|Height the output was created at|\n|assets|[Asset]|false|none|Assets list in the transaction|\n|additionalRegisters|Registers|true|none|Ergo box registers|\n|transactionId|TransactionId|false|none|Base16-encoded transaction id bytes|\n|index|integer(int32)|false|none|Index in the transaction outputs|"
    },
    {
      "heading": "WalletBox",
      "content": "=== \"json\"\n```json\n{\n  \"box\": {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  },\n  \"confirmationsNum\": 147,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"onchain\": true,\n  \"spent\": false,\n  \"creationOutIndex\": 2,\n  \"scans\": [\n    1\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|box|ErgoTransactionOutput|true|none|none|\n|confirmationsNum|integer(int32)\u00a6null|true|none|Number of confirmations, if the box is included into the blockchain|\n|address|ErgoAddress|true|none|Encoded Ergo Address|\n|creationTransaction|ModifierId|true|none|Transaction which created the box|\n|spendingTransaction|ModifierId|true|none|Transaction which created the box|\n|spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|onchain|boolean|true|none|A flag signalling whether the box is created on main chain|\n|spent|boolean|true|none|A flag signalling whether the box was spent|\n|creationOutIndex|integer(int32)|true|none|An index of a box in the creating transaction|\n|scans|[integer]|true|none|Scan identifiers the box relates to|"
    },
    {
      "heading": "BalanceInfo",
      "content": "=== \"json\"\n```json\n{\n  \"nanoErgs\": 0,\n  \"tokens\": [\n    {\n      \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 0,\n      \"decimals\": 0,\n      \"name\": \"string\"\n    }\n  ]\n}\n```\nBalance information"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|nanoErgs|integer(int64)|true|none|Balance of nanoERGs|\n|tokens|[object]|true|none|Balance of tokens|\n|\u00bb tokenId|ModifierId|false|none|Identifier of the token|\n|\u00bb amount|integer(int64)|false|none|Amount of the token|\n|\u00bb decimals|integer|false|none|Number of decimals of the token|\n|\u00bb name|string|false|none|Name of the token, if any|"
    },
    {
      "heading": "IndexedErgoBox",
      "content": "=== \"json\"\n```json\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"globalIndex\": 83927\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|ErgoTransactionOutput|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|Box indexed with extra information|\n|\u00bb address|ErgoAddress|true|none|Encoded Ergo Address|\n|\u00bb spentTransactionId|ModifierId|true|none|Transaction which spent the box|\n|\u00bb spendingHeight|integer(int32)\u00a6null|true|none|The height the box was spent at|\n|\u00bb inclusionHeight|integer(int32)|true|none|The height the transaction containing the box was included in a block at|\n|\u00bb globalIndex|integer(int64)|true|none|Global index of the output in the blockchain|"
    },
    {
      "heading": "IndexedToken",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"boxId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"emissionAmount\": 3500000,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"decimals\": 8\n}\n```\nToken indexed with extra information"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|ModifierId|true|none|Id of the token|\n|boxId|ModifierId|true|none|Id of the box that created the token|\n|emissionAmount|integer(int64)|true|none|The total supply of the token|\n|name|string|true|none|The name of the token|\n|description|string|true|none|The description of the token|\n|decimals|integer(int32)|true|none|The number of decimals the token supports|"
    },
    {
      "heading": "UnsignedErgoTransaction",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extension\": {\n        \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ]\n}\n```\nUnsigned Ergo transaction"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|TransactionId|false|none|Base16-encoded transaction id bytes|\n|inputs|[ErgoTransactionUnsignedInput]|true|none|Unsigned inputs of the transaction|\n|dataInputs|[ErgoTransactionDataInput]|true|none|Data inputs of the transaction|\n|outputs|[ErgoTransactionOutput]|true|none|Outputs of the transaction|"
    },
    {
      "heading": "ErgoTransaction",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}\n```\nErgoTransaction is an atomic operation which changes UTXO state."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|TransactionId|false|none|Id of the transaction|\n|inputs|[ErgoTransactionInput]|true|none|Inputs, that will be spent by this transaction|\n|dataInputs|[ErgoTransactionDataInput]|true|none|Read-only inputs, that are not going to be spent by transaction.|\n|outputs|[ErgoTransactionOutput]|true|none|Outputs of the transaction, i.e. box candidates to be created by this transaction.|\n|size|integer(int32)|false|none|Size of ErgoTransaction in bytes|"
    },
    {
      "heading": "WalletTransaction",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"scans\": [\n    1\n  ],\n  \"size\": 0\n}\n```\nTransaction augmented with some useful information"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|TransactionId|false|none|Base16-encoded transaction id bytes|\n|inputs|[ErgoTransactionInput]|true|none|Transaction inputs|\n|dataInputs|[ErgoTransactionDataInput]|true|none|Transaction data inputs|\n|outputs|[ErgoTransactionOutput]|true|none|Transaction outputs|\n|inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|scans|[integer]|true|none|Scan identifiers the transaction relates to|\n|size|integer(int32)|false|none|Size in bytes|"
    },
    {
      "heading": "IndexedErgoTransaction",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"index\": 3,\n  \"globalIndex\": 3565445,\n  \"size\": 0\n}\n```\nTransaction indexed with extra information"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|TransactionId|true|none|Base16-encoded transaction id bytes|\n|inputs|[ErgoTransactionInput]|true|none|Transaction inputs|\n|dataInputs|[ErgoTransactionDataInput]|true|none|Transaction data inputs|\n|outputs|[ErgoTransactionOutput]|true|none|Transaction outputs|\n|inclusionHeight|integer(int32)|true|none|Height of a block the transaction was included in|\n|numConfirmations|integer(int32)|true|none|Number of transaction confirmations|\n|blockId|ModifierId|true|none|Id of the block the transaction was included in|\n|timestamp|Timestamp|true|none|Basic timestamp definition|\n|index|integer(int32)|true|none|index of the transaction in the block it was included in|\n|globalIndex|integer(int64)|true|none|Global index of the transaction in the blockchain|\n|size|integer(int32)|true|none|Size in bytes|"
    },
    {
      "heading": "ErgoAddress",
      "content": "=== \"json\"\n```json\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n```\nEncoded Ergo Address"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string|false|none|Encoded Ergo Address|"
    },
    {
      "heading": "RewardAddress",
      "content": "=== \"json\"\n```json\n{\n  \"rewardAddress\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|rewardAddress|ErgoAddress|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "RewardPubKey",
      "content": "=== \"json\"\n```json\n{\n  \"rewardPubkey\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|rewardPubkey|string|true|none|none|"
    },
    {
      "heading": "DlogSecret",
      "content": "=== \"json\"\n```json\n\"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n```\nHex-encoded big-endian 256-bits secret exponent"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string|false|none|Hex-encoded big-endian 256-bits secret exponent|"
    },
    {
      "heading": "DhtSecret",
      "content": "=== \"json\"\n```json\n{\n  \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n  \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n  \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n  \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n  \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\n```\nHex-encoded big-endian 256-bits secret exponent \"w\" along with generators \"g\", \"h\", and group elements \"u\", \"v\", such as g^w = u, h^w = v"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|secret|string|true|none|Hex-encoded big-endian 256-bits secret exponent|\n|g|string|true|none|Hex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)|\n|h|string|true|none|Hex-encoded \"h\" generator for the Diffie-Hellman tuple (secp256k1 curve point)|\n|u|string|true|none|Hex-encoded \"u\" group element of the Diffie-Hellman tuple (secp256k1 curve point)|\n|v|string|true|none|Hex-encoded \"v\" group element of the Diffie-Hellman tuple (secp256k1 curve point)|"
    },
    {
      "heading": "TransactionSigningRequest",
      "content": "=== \"json\"\n```json\n{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ],\n  \"hints\": {\n    \"secretHints\": [\n      {\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\": -51,\n              \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n            },\n            \"position\": \"0-1\",\n            \"type\": \"dlog\",\n            \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n            \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n          }\n        ]\n      }\n    ],\n    \"publicHints\": [\n      {\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\":..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tx|UnsignedErgoTransaction|true|none|Unsigned transaction to sign|\n|inputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|hints|TransactionHintsBag|false|none|Optional list of hints used for signing|\n|secrets|object|true|none|Secrets used for signing|\n|\u00bb dlog|[DlogSecret]|false|none|Sequence of secret exponents (DLOG secrets)|\n|\u00bb dht|[DhtSecret]|false|none|Sequence of secret Diffie-Hellman tuple exponents (DHT secrets)|"
    },
    {
      "heading": "AddressHolder",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```\nHolds encoded ErgoAddress"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|ErgoAddress|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "BoxesRequestHolder",
      "content": "=== \"json\"\n```json\n{\n  \"targetAssets\": [\n    [\n      \"string\",\n      \"string\"\n    ]\n  ],\n  \"targetBalance\": 0\n}\n```\nHolds request for wallet boxes"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|targetAssets|[array]|true|none|Target assets|\nanyOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|string|false|none|TokenId|\nor\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|integer|false|none|Long|\ncontinued\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|targetBalance|integer(int64)|true|none|Target balance|"
    },
    {
      "heading": "RequestsHolder",
      "content": "=== \"json\"\n```json\n{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}\n```\nHolds many transaction requests and transaction fee"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|requests|[anyOf]|true|none|Sequence of transaction requests|\nanyOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|PaymentRequest|false|none|Request for generation of payment transaction to a given address|\nor\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|BurnTokensRequest|false|none|Request for burning tokens in wallet|\nor\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|AssetIssueRequest|false|none|Request for generation of asset issue transaction|\ncontinued\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|fee|integer(int64)|false|none|Transaction fee|\n|inputsRaw|[string]|false|none|List of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|List of data inputs to be used in serialized form|"
    },
    {
      "heading": "SourceHolder",
      "content": "=== \"json\"\n```json\n{\n  \"source\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|source|string|true|none|Sigma source to be compiled|"
    },
    {
      "heading": "ErgoLikeTransaction",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|inputs|[ErgoTransactionInput]|true|none|none|\n|dataInputs|[ErgoTransactionDataInput]|true|none|none|\n|outputs|[ErgoTransactionOutput]|true|none|none|"
    },
    {
      "heading": "SigmaHeader",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": {\n    \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"treeFlags\": 0,\n    \"keyLength\": 0,\n    \"valueLength\": 0\n  },\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"height\": 667,\n  \"size\": 667,\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powSolutions\": {\n    \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n    \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n    \"n\": \"0000000000000000\",\n    \"d\": 987654321\n  },\n  \"votes\": \"000000\",\n  \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n  \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n  \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powDistance\": 123456789\n}\n```\nBlock header format used for sigma ErgoLikeContext"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|ModifierId|false|none|Base16-encoded 32 byte modifier id|\n|timestamp|Timestamp|true|none|Basic timestamp definition|\n|version|Version|true|none|Ergo blockchain protocol version|\n|adProofsRoot|Digest32|true|none|Base16-encoded 32 byte digest|\n|adProofsId|ModifierId|false|none|Base16-encoded 32 byte modifier id|\n|stateRoot|AvlTreeData|true|none|none|\n|transactionsRoot|Digest32|true|none|Base16-encoded 32 byte digest|\n|transactionsId|ModifierId|false|none|Base16-encoded 32 byte modifier id|\n|nBits|integer(int64)|true|none|none|\n|extensionHash|Digest32|true|none|Base16-encoded 32 byte digest|\n|extensionRoot|Digest32|false|none|Base16-encoded 32 byte digest|\n|extensionId|ModifierId|false|none|Base16-encoded 32 byte modifier id|\n|height|integer(int32)|true|none|none|\n|size|integer(int32)|false|none|none|\n|parentId|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|powSolutions|PowSolutions|false|none|An object containing all components of pow solution|\n|votes|Votes|true|none|Base16-encoded votes for a soft-fork and parameters|\n|minerPk|string|false|none|none|\n|powOnetimePk|string|false|none|none|\n|powNonce|Digest32|false|none|Base16-encoded 32 byte digest|\n|powDistance|number|false|none|sigma.BigInt|"
    },
    {
      "heading": "PreHeader",
      "content": "=== \"json\"\n```json\n{\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"nBits\": 19857408,\n  \"height\": 667,\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|timestamp|Timestamp|true|none|Basic timestamp definition|\n|version|Version|true|none|Ergo blockchain protocol version|\n|nBits|integer(int64)|true|none|none|\n|height|integer(int32)|true|none|none|\n|parentId|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|votes|Votes|true|none|Base16-encoded votes for a soft-fork and parameters|\n|minerPk|string|false|none|none|"
    },
    {
      "heading": "AvlTreeData",
      "content": "=== \"json\"\n```json\n{\n  \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"treeFlags\": 0,\n  \"keyLength\": 0,\n  \"valueLength\": 0\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|digest|Digest32|true|none|Base16-encoded 32 byte digest|\n|treeFlags|integer(int32)|false|none|none|\n|keyLength|integer(int32)|false|none|none|\n|valueLength|integer(int32)\u00a6null|false|none|none|"
    },
    {
      "heading": "ErgoLikeContext",
      "content": "=== \"json\"\n```json\n{\n  \"lastBlockUtxoRoot\": {\n    \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"treeFlags\": 0,\n    \"keyLength\": 0,\n    \"valueLength\": 0\n  },\n  \"headers\": [\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": {\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"treeFlags\": 0,\n        \"keyLength\": 0,\n        \"valueLength\": 0\n      },\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"height\": 667,\n      \"size\": 667,\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"votes\": \"000000\",\n      \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n      \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n      \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powDistance\": 123456789\n    }\n  ],\n  \"preHeader\": {\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"nBits\": 19857408..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|lastBlockUtxoRoot|AvlTreeData|true|none|state root before current block application|\n|headers|[SigmaHeader]|true|none|fixed number of last block headers in descending order (first header is the newest one)|\n|preHeader|PreHeader|true|none|fields of block header with the current spendingTransaction, that can be predicted by a miner before its formation|\n|dataBoxes|[ErgoTransactionOutput]|true|none|boxes, that corresponds to id's of spendingTransaction.dataInputs|\n|boxesToSpend|[ErgoTransactionOutput]|true|none|boxes, that corresponds to id's of spendingTransaction.inputs|\n|spendingTransaction|ErgoLikeTransaction|true|none|transaction that contains self box|\n|selfIndex|integer(int64)|true|none|index of the box in boxesToSpend that contains the script we're evaluating|\n|extension|object|true|none|prover-defined key-value pairs, that may be used inside a script|\n|validationSettings|string|true|none|validation parameters passed to Interpreter.verify to detect soft-fork conditions|\n|costLimit|integer(int64)|true|none|hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown|\n|initCost|integer(int64)|true|none|initial value of execution cost already accumulated before Interpreter.verify is called|"
    },
    {
      "heading": "ExecuteScript",
      "content": "=== \"json\"\n```json\n{\n  \"script\": \"string\",\n  \"namedConstants\": {},\n  \"context\": {\n    \"lastBlockUtxoRoot\": {\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"treeFlags\": 0,\n      \"keyLength\": 0,\n      \"valueLength\": 0\n    },\n    \"headers\": [\n      {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"height\": 667,\n        \"size\": 667,\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"votes\": \"000000\",\n        \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abad..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|script|string|true|none|Sigma script to be executed|\n|namedConstants|object\u00a6null|true|none|Environment for compiler|\n|context|ErgoLikeContext|true|none|Interpreter context|"
    },
    {
      "heading": "SigmaBoolean",
      "content": "=== \"json\"\n```json\n{\n  \"op\": 0,\n  \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"condition\": true\n}\n```\nAlgebraic data type of sigma proposition expressions"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|op|integer(int8)|true|none|Sigma opCode|\n|h|HexString|false|none|Base16-encoded bytes|\n|g|HexString|false|none|Base16-encoded bytes|\n|u|HexString|false|none|Base16-encoded bytes|\n|v|HexString|false|none|Base16-encoded bytes|\n|condition|boolean|false|none|none|"
    },
    {
      "heading": "SigmaBooleanAndPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"args\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|SigmaBoolean|false|none|Algebraic data type of sigma proposition expressions|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb args|[SigmaBoolean]|false|none|[Algebraic data type of sigma proposition expressions]|"
    },
    {
      "heading": "SigmaBooleanOrPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"args\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|SigmaBoolean|false|none|Algebraic data type of sigma proposition expressions|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb args|[SigmaBoolean]|false|none|[Algebraic data type of sigma proposition expressions]|"
    },
    {
      "heading": "SigmaBooleanThresholdPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"args\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|SigmaBoolean|false|none|Algebraic data type of sigma proposition expressions|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb args|[SigmaBoolean]|false|none|[Algebraic data type of sigma proposition expressions]|"
    },
    {
      "heading": "CryptoResult",
      "content": "=== \"json\"\n```json\n{\n  \"value\": {\n    \"op\": -45,\n    \"condition\": true\n  },\n  \"cost\": 10\n}\n```\nResult of executeWithContext request (reduceToCrypto)"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|value|SigmaBoolean|true|none|value of SigmaProp type which represents a statement verifiable via sigma protocol|\n|cost|integer(int64)|true|none|Estimated cost of contract execution|"
    },
    {
      "heading": "ScanningPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"predicate\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|predicate|string|true|none|none|"
    },
    {
      "heading": "ContainsPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"predicate\": \"string\",\n  \"register\": \"string\",\n  \"bytes\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|ScanningPredicate|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb register|string|false|none|none|\n|\u00bb bytes|string|false|none|none|"
    },
    {
      "heading": "EqualsPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"predicate\": \"string\",\n  \"register\": \"string\",\n  \"bytes\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|ScanningPredicate|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb register|string|false|none|none|\n|\u00bb bytes|string|false|none|none|"
    },
    {
      "heading": "ContainsAssetPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"predicate\": \"string\",\n  \"assetId\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|ScanningPredicate|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb assetId|string|false|none|none|"
    },
    {
      "heading": "AndPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"predicate\": \"string\",\n  \"args\": [\n    {\n      \"predicate\": \"string\"\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|ScanningPredicate|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb args|[ScanningPredicate]|false|none|none|"
    },
    {
      "heading": "OrPredicate",
      "content": "=== \"json\"\n```json\n{\n  \"predicate\": \"string\",\n  \"args\": [\n    {\n      \"predicate\": \"string\"\n    }\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "allOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|ScanningPredicate|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\nand\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|object|false|none|none|\n|\u00bb args|[ScanningPredicate]|false|none|none|"
    },
    {
      "heading": "ScanRequest",
      "content": "=== \"json\"\n```json\n{\n  \"scanName\": \"Assets Tracker\",\n  \"walletInteraction\": \"off\",\n  \"removeOffchain\": true,\n  \"trackingRule\": {\n    \"predicate\": \"containsAsset\",\n    \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanName|string|false|none|none|\n|removeOffchain|boolean|false|none|none|\n|walletInteraction|string|false|none|none|\n|trackingRule|ScanningPredicate|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|walletInteraction|off|\n|walletInteraction|shared|\n|walletInteraction|forced|"
    },
    {
      "heading": "Scan",
      "content": "=== \"json\"\n```json\n{\n  \"scanId\": 2,\n  \"scanName\": \"Assets Tracker\",\n  \"walletInteraction\": \"off\",\n  \"removeOffchain\": true,\n  \"trackingRule\": {\n    \"predicate\": \"containsAsset\",\n    \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanName|string|false|none|none|\n|scanId|integer|false|none|none|\n|walletInteraction|string|false|none|none|\n|removeOffchain|boolean|false|none|none|\n|trackingRule|ScanningPredicate|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|walletInteraction|off|\n|walletInteraction|shared|\n|walletInteraction|forced|"
    },
    {
      "heading": "ScanId",
      "content": "=== \"json\"\n```json\n{\n  \"scanId\": 0\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanId|integer|false|none|none|"
    },
    {
      "heading": "ScanIdBoxId",
      "content": "=== \"json\"\n```json\n{\n  \"scanId\": 0,\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanId|integer|true|none|none|\n|boxId|TransactionBoxId|true|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|"
    },
    {
      "heading": "ScanIdsBox",
      "content": "=== \"json\"\n```json\n{\n  \"scanIds\": [\n    0\n  ],\n  \"box\": {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n}\n```\nErgo box with associated scans (their respective identifiers)"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|scanIds|[integer]|true|none|none|\n|box|ErgoTransactionOutput|true|none|none|"
    },
    {
      "heading": "DlogCommitment",
      "content": "=== \"json\"\n```json\n{\n  \"r\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n  \"a\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\n```\nRandomness and commitment for the first step of the Schnorr protocol"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|r|string|true|none|Hex-encoded big-endian 256-bits secret exponent|\n|a|string|true|none|Hex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)|"
    },
    {
      "heading": "HintExtractionRequest",
      "content": "=== \"json\"\n```json\n{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  },\n  \"real\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ],\n  \"simulated\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b770..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tx|ErgoTransaction|true|none|Transaction to extract prover hints from|\n|real|[SigmaBoolean]|true|none|Real signers of the transaction|\n|simulated|[SigmaBoolean]|true|none|Simulated signers of the transaction|\n|inputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|"
    },
    {
      "heading": "Commitment",
      "content": "=== \"json\"\n```json\n{\n  \"hint\": \"cmtWithSecret\",\n  \"pubkey\": {\n    \"op\": 0,\n    \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"condition\": true\n  },\n  \"position\": \"string\",\n  \"type\": \"dlog\",\n  \"a\": \"string\",\n  \"b\": \"string\"\n}\n```\nbasic trait for prover commitments"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|hint|string|true|none|none|\n|pubkey|SigmaBoolean|true|none|Algebraic data type of sigma proposition expressions|\n|position|string|true|none|none|\n|type|string|false|none|none|\n|a|string|true|none|a group element of the commitment|\n|b|string|false|none|b group element of the commitment (needed for DHT protocol only)|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|hint|cmtWithSecret|\n|hint|cmtReal|\n|hint|cmtSimulated|\n|type|dlog|\n|type|dht|"
    },
    {
      "heading": "CommitmentWithSecret",
      "content": "=== \"json\"\n```json\n{\n  \"hint\": \"cmtWithSecret\",\n  \"pubkey\": {\n    \"op\": 0,\n    \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"condition\": true\n  },\n  \"position\": \"string\",\n  \"type\": \"dlog\",\n  \"a\": \"string\",\n  \"b\": \"string\"\n}\n```\ncommitment to secret along with secret (!) randomness"
    },
    {
      "heading": "Properties",
      "content": "None"
    },
    {
      "heading": "SecretProven",
      "content": "=== \"json\"\n```json\n{\n  \"hint\": \"proofReal\",\n  \"challenge\": \"string\",\n  \"pubkey\": {\n    \"op\": 0,\n    \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"condition\": true\n  },\n  \"proof\": \"string\",\n  \"position\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|hint|string|true|none|none|\n|challenge|string|true|none|none|\n|pubkey|SigmaBoolean|true|none|Algebraic data type of sigma proposition expressions|\n|proof|string|true|none|none|\n|position|string|true|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|hint|proofReal|\n|hint|proofSimulated|"
    },
    {
      "heading": "InputHints",
      "content": "=== \"json\"\n```json\n{\n  \"01\": [\n    {\n      \"hint\": \"cmtWithSecret\",\n      \"pubkey\": {\n        \"op\": -51,\n        \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n      },\n      \"position\": \"0-1\",\n      \"type\": \"dlog\",\n      \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n      \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n    }\n  ]\n}\n```\nhints for inputs, key is input index, values is a set of hints for the input"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|additionalProperties|[oneOf]|false|none|none|\noneOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|CommitmentWithSecret|false|none|commitment to secret along with secret (!) randomness|\nxor\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|Commitment|false|none|basic trait for prover commitments|\nxor\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|SecretProven|false|none|none|"
    },
    {
      "heading": "TransactionHintsBag",
      "content": "=== \"json\"\n```json\n{\n  \"secretHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ],\n  \"publicHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ]\n}\n```\nprover hints extracted from a transaction"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|secretHints|[InputHints]|false|none|Hints which contain secrets, do not share them!|\n|publicHints|[InputHints]|false|none|Hints which contain public data only, share them freely!|"
    },
    {
      "heading": "GenerateCommitmentsRequest",
      "content": "=== \"json\"\n```json\n{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"secrets\": {\n    \"dlog\": [\n      \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n    ],\n    \"dht\": [\n      {\n        \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n        \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n      }\n    ]\n  },\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}\n```\nrequest to generate commitments to sign a transaction"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tx|UnsignedErgoTransaction|true|none|Unsigned transaction to sign|\n|secrets|object|false|none|Optionally, external secrets used for signing|\n|\u00bb dlog|[DlogSecret]|false|none|Sequence of secret exponents (DLOG secrets)|\n|\u00bb dht|[DhtSecret]|false|none|Sequence of secret Diffie-Hellman tuple exponents (DHT secrets)|\n|inputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|\n|dataInputsRaw|[string]|false|none|Optional list of inputs to be used in serialized form|"
    },
    {
      "heading": "PaymentRequest",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"value\": 1,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"registers\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  }\n}\n```\nRequest for generation of payment transaction to a given address"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|ErgoAddress|true|none|Encoded Ergo Address|\n|value|integer(int64)|true|none|Payment amount|\n|assets|[Asset]|false|none|Assets list in the transaction|\n|registers|Registers|false|none|Ergo box registers|"
    },
    {
      "heading": "BurnTokensRequest",
      "content": "=== \"json\"\n```json\n{\n  \"assetsToBurn\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ]\n}\n```\nRequest for burning tokens in wallet"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|assetsToBurn|[Asset]|true|none|Assets list to burn in the transaction|"
    },
    {
      "heading": "AssetIssueRequest",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"ergValue\": 0,\n  \"amount\": 1000000,\n  \"name\": \"TST\",\n  \"description\": \"Test token\",\n  \"decimals\": 8,\n  \"registers\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  }\n}\n```\nRequest for generation of asset issue transaction"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|ErgoAddress|false|none|Optional, first address in the wallet will be used if not defined|\n|ergValue|integer(int64)|false|none|Optional, amount of ergs to be put into box with issued assets|\n|amount|integer(int64)|true|none|Supply amount|\n|name|string|true|none|Assets name|\n|description|string|true|none|Assets description|\n|decimals|integer(int32)|true|none|Number of decimal places|\n|registers|Registers|false|none|Optional, possible values for registers R7...R9|"
    },
    {
      "heading": "FullBlock",
      "content": "=== \"json\"\n```json\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"blockTransactions\": {\n    \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactions\": [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            ..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|header|BlockHeader|true|none|Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.|\n|blockTransactions|BlockTransactions|true|none|Section of a block which contains transactions.|\n|adProofs|BlockADProofs|true|none|none|\n|extension|Extension|true|none|Section of a block which contains extension data.|\n|size|integer(int32)|true|none|Size in bytes|"
    },
    {
      "heading": "PowSolutions",
      "content": "=== \"json\"\n```json\n{\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n  \"n\": \"0000000000000000\",\n  \"d\": 987654321\n}\n```\nAn object containing all components of pow solution"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pk|string|true|none|Base16-encoded public key|\n|w|string|true|none|none|\n|n|string|true|none|none|\n|d|number|true|none|none|"
    },
    {
      "heading": "BlockHeaderWithoutPow",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"height\": 667,\n  \"difficulty\": 62,\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"size\": 0,\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|timestamp|Timestamp|true|none|Basic timestamp definition|\n|version|Version|true|none|Ergo blockchain protocol version|\n|adProofsRoot|Digest32|true|none|Base16-encoded 32 byte digest|\n|stateRoot|ADDigest|true|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|transactionsRoot|Digest32|true|none|Base16-encoded 32 byte digest|\n|nBits|integer(int64)|true|none|none|\n|extensionHash|Digest32|true|none|Base16-encoded 32 byte digest|\n|height|integer(int32)|true|none|none|\n|difficulty|integer(int32)|true|none|none|\n|parentId|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|votes|Votes|true|none|Base16-encoded votes for a soft-fork and parameters|\n|size|integer(int32)|false|none|Size in bytes|\n|extensionId|ModifierId|false|none|Base16-encoded 32 byte modifier id|\n|transactionsId|ModifierId|false|none|Base16-encoded 32 byte modifier id|\n|adProofsId|ModifierId|false|none|Base16-encoded 32 byte modifier id|"
    },
    {
      "heading": "PopowHeader",
      "content": "=== \"json\"\n```json\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"interlinks\": [\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|header|BlockHeader|true|none|Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.|\n|interlinks|[ModifierId]|true|none|Array of header interlinks|"
    },
    {
      "heading": "NipopowProof",
      "content": "=== \"json\"\n```json\n{\n  \"m\": 0,\n  \"k\": 0,\n  \"prefix\": [\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n  ],\n  \"suffixHead\": {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|m|number|true|none|security parameter (min \u03bc-level superchain length)|\n|k|number|true|none|security parameter (min suffix length, >= 1)|\n|prefix|[PopowHeader]|true|none|proof prefix headers|\n|suffixHead|PopowHeader|true|none|none|\n|suffixTail|[BlockHeader]|true|none|tail of the proof suffix headers|"
    },
    {
      "heading": "BlockHeader",
      "content": "=== \"json\"\n```json\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powSolutions\": {\n    \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n    \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n    \"n\": \"0000000000000000\",\n    \"d\": 987654321\n  },\n  \"height\": 667,\n  \"difficulty\": \"9575989248\",\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"size\": 0,\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\n```\nHeader of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|id|ModifierId|true|none|Block id|\n|timestamp|Timestamp|true|none|Block generation time reported by a miner|\n|version|Version|true|none|Protocol version used to generate the block|\n|adProofsRoot|Digest32|true|none|Digest of UTXO set transformation proofs|\n|stateRoot|ADDigest|true|none|AVL+ tree digest of UTXO set (after the block is applied)|\n|transactionsRoot|Digest32|true|none|Merkle tree digest of transactions in the block (BlockTransactions section)|\n|nBits|integer(int64)|true|none|Proof-of-work target (difficulty encoded)|\n|extensionHash|Digest32|true|none|Merkle tree digest of the extension section of the block|\n|powSolutions|PowSolutions|true|none|Solution for the proof-of-work puzzle|\n|height|integer(int32)|true|none|Height of the block (genesis block height == 1)|\n|difficulty|string|true|none|none|\n|parentId|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|votes|Votes|true|none|Votes for changing system parameters|\n|size|integer(int32)|false|none|Size of the header in bytes|\n|extensionId|ModifierId|false|none|Hash of the extension section of the block == hash(modifier type id, header id, extensionHash)|\n|transactionsId|ModifierId|false|none|Hash of the transactions section of the block == hash(modifier type id, header id, transactionsRoot)|\n|adProofsId|ModifierId|false|none|Hash of the UTXO set transformation proofs section of the block == hash(modifier type id, header id, adProofsRoot)|"
    },
    {
      "heading": "BlockTransactions",
      "content": "=== \"json\"\n```json\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactions\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n  ],\n  \"size\": 0\n}\n```\nSection of a block which contains transactions."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|headerId|ModifierId|true|none|Identifier of a header of a corresponding block|\n|transactions|Transactions|true|none|Transactions of the block|\n|size|integer(int32)|true|none|Size in bytes of all block transactions|"
    },
    {
      "heading": "BlockADProofs",
      "content": "=== \"json\"\n```json\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"size\": 0\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|headerId|ModifierId|true|none|Identifier of a header of the block which contains the proofs|\n|proofBytes|SerializedAdProof|true|none|Serialized bytes of the authenticated dictionary proof|\n|digest|Digest32|true|none|Hash of the proofBytes|\n|size|integer(int32)|true|none|Size in bytes|"
    },
    {
      "heading": "Extension",
      "content": "=== \"json\"\n```json\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"fields\": [\n    [\n      \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]\n  ]\n}\n```\nSection of a block which contains extension data."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|headerId|ModifierId|true|none|Identifier of a header of a corresponding block|\n|digest|Digest32|true|none|Root hash (aka digest) merkelized list of key-value records|\n|fields|[KeyValueItem]\u00a6null|true|none|List of key-value records|"
    },
    {
      "heading": "KeyValueItem",
      "content": "=== \"json\"\n```json\n[\n  \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]\n```\nKey-value record represented as a pair of hex strings in an array."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[HexString]|false|none|Key-value record represented as a pair of hex strings in an array.|"
    },
    {
      "heading": "CandidateBlock",
      "content": "=== \"json\"\n```json\n{\n  \"version\": 2,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"adProofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsNumber\": 2,\n  \"transactions\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39..."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|version|integer(int8)|false|none|none|\n|extensionHash|Digest32|true|none|Base16-encoded 32 byte digest|\n|timestamp|Timestamp|false|none|Basic timestamp definition|\n|stateRoot|ADDigest|false|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|\n|nBits|integer(int64)|false|none|none|\n|adProofBytes|SerializedAdProof|false|none|Base16-encoded ad proofs|\n|parentId|ModifierId|true|none|Base16-encoded 32 byte modifier id|\n|transactionsNumber|integer(int32)|false|none|none|\n|transactions|Transactions|false|none|List of ErgoTransaction objects|\n|votes|Votes|false|none|Base16-encoded votes for a soft-fork and parameters|"
    },
    {
      "heading": "PassphraseMatch",
      "content": "=== \"json\"\n```json\n{\n  \"matched\": true\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|matched|boolean|true|none|true if passphrase matches wallet, false otherwise|"
    },
    {
      "heading": "WalletStatus",
      "content": "=== \"json\"\n```json\n{\n  \"isInitialized\": true,\n  \"isUnlocked\": true,\n  \"changeAddress\": \"3WzCFq7mkykKqi4Ykdk8BK814tkh6EsPmA42pQZxU2NRwSDgd6yB\",\n  \"walletHeight\": 0,\n  \"error\": \"string\"\n}\n```\nStatus of the node wallet"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|isInitialized|boolean|true|none|true if wallet is initialized, false otherwise|\n|isUnlocked|boolean|true|none|true if wallet is unlocked, false otherwise|\n|changeAddress|string|true|none|address to send change to. Empty when wallet is not initialized or locked. By default change address correponds to root key address, could be set via /wallet/updateChangeAddress method.|\n|walletHeight|integer|true|none|last scanned height for the wallet (and external scans)|\n|error|string|true|none|last wallet error caught|"
    },
    {
      "heading": "InitWallet",
      "content": "=== \"json\"\n```json\n{\n  \"pass\": \"string\",\n  \"mnemonicPass\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pass|string|true|none|Password to encrypt wallet file with|\n|mnemonicPass|string|false|none|Optional pass to password-protect mnemonic seed|"
    },
    {
      "heading": "InitWalletResult",
      "content": "=== \"json\"\n```json\n{\n  \"mnemonic\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|mnemonic|string|true|none|Mnemonic seed phrase|"
    },
    {
      "heading": "RestoreWallet",
      "content": "=== \"json\"\n```json\n{\n  \"pass\": \"string\",\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\",\n  \"usePre1627KeyDerivation\": true\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pass|string|true|none|Password to encrypt wallet file with|\n|mnemonic|string|true|none|Mnemonic seed|\n|mnemonicPass|string|false|none|Optional pass to password-protect mnemonic seed|\n|usePre1627KeyDerivation|boolean|true|none|use incorrect(previous) BIP32 key derivation (see https://github.com/ergoplatform/ergo/issues/1627 for details). It's recommended to set to 'true' if the original wallet was created by ergo node before v4.0.105.|"
    },
    {
      "heading": "CheckWallet",
      "content": "=== \"json\"\n```json\n{\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|mnemonic|string|true|none|Mnemonic seed (optional)|\n|mnemonicPass|string|false|none|Optional pass to password-protect mnemonic seed|"
    },
    {
      "heading": "UnlockWallet",
      "content": "=== \"json\"\n```json\n{\n  \"pass\": \"string\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|pass|string|true|none|Password to decrypt wallet file with|"
    },
    {
      "heading": "DeriveKey",
      "content": "=== \"json\"\n```json\n{\n  \"derivationPath\": \"m/1/2\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|derivationPath|string|true|none|Derivation path for a new secret to derive|"
    },
    {
      "heading": "DeriveKeyResult",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|ErgoAddress|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "DeriveNextKeyResult",
      "content": "=== \"json\"\n```json\n{\n  \"derivationPath\": \"m/1/2\",\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|derivationPath|string|true|none|Derivation path of the resulted secret|\n|address|ErgoAddress|true|none|Encoded Ergo Address|"
    },
    {
      "heading": "MerkleProof",
      "content": "=== \"json\"\n```json\n{\n  \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n  \"levels\": [\n    [\n      \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n      0\n    ]\n  ]\n}\n```\nMerkle proof for a leaf, which is an array of bytes (e.g. a transaction identifier)"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|leaf|string|true|none|Base16-encoded Merkle tree leaf bytes|\n|levels|[array]|true|none|none|\nanyOf\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|string|false|none|hash|\nor\n|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|\u00bb anonymous|integer|false|none|side of hash|"
    },
    {
      "heading": "ProofOfUpcomingTransactions",
      "content": "=== \"json\"\n```json\n{\n  \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n  \"txProofs\": [\n    {\n      \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n      \"levels\": [\n        [\n          \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n          0\n        ]\n      ]\n    }\n  ]\n}\n```\nProof that a block corresponding to given header without PoW contains some transactions"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|msgPreimage|string|true|none|Base16-encoded serialized header without Proof-of-Work|\n|txProofs|[MerkleProof]|true|none|Merkle proofs of transactions included into blocks (not necessarily all the block transactions)|"
    },
    {
      "heading": "WorkMessage",
      "content": "=== \"json\"\n```json\n{\n  \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"b\": 987654321,\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"proof\": {\n    \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n    \"txProofs\": [\n      {\n        \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n        \"levels\": [\n          [\n            \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n            0\n          ]\n        ]\n      }\n    ]\n  }\n}\n```\nBlock candidate related data for external miner to perform work"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|msg|string|true|none|Base16-encoded block header bytes without PoW solution|\n|b|integer|true|none|Work target value|\n|pk|string|true|none|Base16-encoded miner public key|\n|proof|ProofOfUpcomingTransactions|false|none|Proof that a block corresponding to given header without PoW contains some transactions|"
    },
    {
      "heading": "Peer",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"restApiUrl\": \"https://example.com\",\n  \"name\": \"mynode\",\n  \"lastSeen\": 1524143059077,\n  \"connectionType\": \"Incoming\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|true|none|none|\n|restApiUrl|string\u00a6null|false|none|none|\n|name|string\u00a6null|false|none|none|\n|lastSeen|Timestamp|false|none|Basic timestamp definition|\n|connectionType|string\u00a6null|false|none|none|"
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|connectionType|Incoming|\n|connectionType|Outgoing|"
    },
    {
      "heading": "PeersStatus",
      "content": "=== \"json\"\n```json\n{\n  \"lastIncomingMessage\": 1524143059077,\n  \"currentNetworkTime\": 1524143059077\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|lastIncomingMessage|Timestamp|true|none|Basic timestamp definition|\n|currentNetworkTime|Timestamp|true|none|Basic timestamp definition|"
    },
    {
      "heading": "PeerMode",
      "content": "=== \"json\"\n```json\n{\n  \"state\": \"utxo\",\n  \"verifyingTransactions\": true,\n  \"fullBlocksSuffix\": 2880\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|state|string|true|none|none|\n|verifyingTransactions|boolean|true|none|none|\n|fullBlocksSuffix|integer|true|none|none|"
    },
    {
      "heading": "SyncInfo",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"mode\": {\n    \"state\": \"utxo\",\n    \"verifyingTransactions\": true,\n    \"fullBlocksSuffix\": 2880\n  },\n  \"version\": \"4.0.16\",\n  \"status\": \"Older\",\n  \"height\": 65780\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|true|none|none|\n|mode|PeerMode|true|none|Peer operating mode parameters|\n|version|string|true|none|none|\n|status|string|true|none|none|\n|height|integer|true|none|none|"
    },
    {
      "heading": "RequestedInfo",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"version\": \"4.0.26\",\n  \"checks\": 4\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|false|none|none|\n|version|string|false|none|none|\n|checks|integer|true|none|How many times we checked for modifier delivery status|"
    },
    {
      "heading": "RequestedInfoByModifierId",
      "content": "=== \"json\"\n```json\n{\n  \"property1\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"checks\": 4\n  },\n  \"property2\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"checks\": 4\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|additionalProperties|RequestedInfo|false|none|none|"
    },
    {
      "heading": "ConnectedPeer",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"version\": \"4.0.26\",\n  \"lastMessage\": 1524143059077\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|string|true|none|none|\n|version|string|false|none|none|\n|lastMessage|Timestamp|false|none|Basic timestamp definition|"
    },
    {
      "heading": "ConnectedPeerByModifierId",
      "content": "=== \"json\"\n```json\n{\n  \"property1\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"lastMessage\": 1524143059077\n  },\n  \"property2\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"lastMessage\": 1524143059077\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|additionalProperties|ConnectedPeer|false|none|none|"
    },
    {
      "heading": "TrackInfo",
      "content": "=== \"json\"\n```json\n{\n  \"invalidModifierApproxSize\": 65780,\n  \"requested\": {\n    \"property1\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      }\n    },\n    \"property2\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      }\n    }\n  },\n  \"received\": {\n    \"property1\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      }\n    },\n    \"property2\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      }\n    }\n  }\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|invalidModifierApproxSize|integer|true|none|none|\n|requested|object|true|none|Currently requested modifiers|\n|\u00bb additionalProperties|RequestedInfoByModifierId|false|none|none|\n|received|object|true|none|Received modifiers|\n|\u00bb additionalProperties|ConnectedPeerByModifierId|false|none|none|"
    },
    {
      "heading": "BlacklistedPeers",
      "content": "=== \"json\"\n```json\n{\n  \"addresses\": [\n    \"string\"\n  ]\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|addresses|[string]|true|none|none|"
    },
    {
      "heading": "NodeInfo",
      "content": "=== \"json\"\n```json\n{\n  \"name\": \"my-node-1\",\n  \"appVersion\": \"0.0.1\",\n  \"fullHeight\": 667,\n  \"headersHeight\": 667,\n  \"maxPeerHeight\": 706162,\n  \"bestFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"previousFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bestHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"dab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateType\": \"digest\",\n  \"stateVersion\": \"fab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"isMining\": true,\n  \"peersCount\": 327,\n  \"unconfirmedCount\": 327,\n  \"difficulty\": 667,\n  \"currentTime\": 1524143059077,\n  \"launchTime\": 1524143059077,\n  \"headersScore\": 0,\n  \"fullBlocksScore\": 0,\n  \"genesisBlockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"parameters\": {\n    \"height\": 667,\n    \"storageFeeFactor\": 100000,\n    \"minValuePerByte\": 360,\n    \"maxBlockSize\": 1048576,\n    \"maxBlockCost\": 104876,\n    \"blockVersion\": 2,\n    \"tokenAccessCost\": 100,\n    \"inputCost\": 100,\n    \"dataInputCost\": 100,\n    \"outputCost\": 100\n  },\n  \"eip27Supported\": true,\n  \"restApiUrl\": \"https://example.com\"\n}\n```\nData container for /info API request output. Contains information about node's state and configuration. Contains data about best block, best header, state, etc. Best block is the block with the maximum height."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|name|string|true|none|Node's (peer) self-chosen name from config|\n|appVersion|string|true|none|Node's application version|\n|fullHeight|integer(int32)\u00a6null|true|none|Height of the best block known to the node. Can be 'null' if state is empty (no full block is applied since node launch)|\n|headersHeight|integer(int32)\u00a6null|true|none|The height of the best header (i.e. the one with the maximum height). Can be 'null' if state is empty (no header applied since node launch)|\n|maxPeerHeight|integer(int32)\u00a6null|true|none|Maximum block height of connected peers. Can be 'null' if state is empty (no peer connected since node launch)|\n|bestFullHeaderId|ModifierId\u00a6null|true|none|Best full-block id (header id of such block). Can be 'null' if no full block is applied since node launch.|\n|previousFullHeaderId|ModifierId\u00a6null|true|none|Header id of the parent block of the best full-block (i.e. previous block in the blockchain). Can be 'null' if no full block is applied since node launch|\n|bestHeaderId|ModifierId\u00a6null|true|none|Best header ID (hex representation). Can be 'null' if no header applied since node launch.|\n|stateRoot|string\u00a6null|true|none|Current UTXO set digest. Can be 'null' if state is empty (no full block is applied since node launch)|\n|stateType|string|true|none|Whether the node is storing UTXO set or only its digest. Equals digest if only digest is stored, utxo if full UTXO set is stored.|\n|stateVersion|string\u00a6null|true|none|Id of a block where UTXO set digest is taken from. Can be 'null' if no full block is applied since node launch.|\n|isMining|boolean|true|none|Whether the node is mining (i.e. generating blocks).|\n|peersCount|integer(int32)|true|none|Number of peers this node is connected with.|\n|unconfirmedCount|integer(int32)|true|none|Number of unconfirmed transactions in the mempool.|\n|difficulty|integer\u00a6null|true|none|Difficulty on current bestFullHeaderId. Can be 'null' if no full block is a..."
    },
    {
      "heading": "Enumerated Values",
      "content": "|Property|Value|\n|---|---|\n|stateType|digest|\n|stateType|utxo|"
    },
    {
      "heading": "Parameters",
      "content": "=== \"json\"\n```json\n{\n  \"height\": 667,\n  \"storageFeeFactor\": 100000,\n  \"minValuePerByte\": 360,\n  \"maxBlockSize\": 1048576,\n  \"maxBlockCost\": 104876,\n  \"blockVersion\": 2,\n  \"tokenAccessCost\": 100,\n  \"inputCost\": 100,\n  \"dataInputCost\": 100,\n  \"outputCost\": 100\n}\n```\nSystem parameters which could be readjusted via collective miners decision."
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|height|integer(int32)|true|none|Height when current parameters were considered(not actual height). Can be '0' if state is empty|\n|storageFeeFactor|integer(int32)|true|none|Storage fee coefficient (per byte per storage period ~4 years)|\n|minValuePerByte|integer(int32)|true|none|Minimum value per byte of an output|\n|maxBlockSize|integer(int32)|true|none|Maximum block size (in bytes)|\n|maxBlockCost|integer(int32)|true|none|Maximum cumulative computational cost of input scripts in block transactions|\n|blockVersion|Version|true|none|Ergo blockchain protocol version|\n|tokenAccessCost|integer(int32)|true|none|Validation cost of a single token|\n|inputCost|integer(int32)|true|none|Validation cost per one transaction input|\n|dataInputCost|integer(int32)|true|none|Validation cost per one data input|\n|outputCost|integer(int32)|true|none|Validation cost per one transaction output|"
    },
    {
      "heading": "Version",
      "content": "=== \"json\"\n```json\n2\n```\nErgo blockchain protocol version"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|integer(int8)|false|none|Ergo blockchain protocol version|"
    },
    {
      "heading": "TransactionBoxId",
      "content": "=== \"json\"\n```json\n\"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded transaction box id bytes. Should be 32 bytes long"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded transaction box id bytes. Should be 32 bytes long|"
    },
    {
      "heading": "TransactionId",
      "content": "=== \"json\"\n```json\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded transaction id bytes"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded transaction id bytes|"
    },
    {
      "heading": "ErgoTree",
      "content": "=== \"json\"\n```json\n\"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\"\n```\nBase16-encoded ergo tree bytes"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded ergo tree bytes|"
    },
    {
      "heading": "ErgoTreeObject",
      "content": "=== \"json\"\n```json\n{\n  \"tree\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\n```"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tree|string|false|none|serialized Ergo tree|"
    },
    {
      "heading": "Transactions",
      "content": "=== \"json\"\n```json\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]\n```\nList of ErgoTransaction objects"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[ErgoTransaction]|false|none|List of ErgoTransaction objects|"
    },
    {
      "heading": "FeeHistogramBin",
      "content": "=== \"json\"\n```json\n{\n  \"nTxns\": 0,\n  \"totalFee\": 0\n}\n```\nFee histogram bin"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|nTxns|integer(int32)|false|none|none|\n|totalFee|integer(int64)|false|none|none|"
    },
    {
      "heading": "FeeHistogram",
      "content": "=== \"json\"\n```json\n[\n  {\n    \"nTxns\": 0,\n    \"totalFee\": 0\n  }\n]\n```\nFee histogram for transactions in mempool"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|[FeeHistogramBin]|false|none|Fee histogram for transactions in mempool|"
    },
    {
      "heading": "Asset",
      "content": "=== \"json\"\n```json\n{\n  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"amount\": 1000\n}\n```\nToken detail in the transaction"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|tokenId|Digest32|true|none|Base16-encoded 32 byte digest|\n|amount|integer(int64)|true|none|Amount of the token|"
    },
    {
      "heading": "Registers",
      "content": "=== \"json\"\n```json\n{\n  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n}\n```\nErgo box registers"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|additionalProperties|SValue|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "SValue",
      "content": "=== \"json\"\n```json\n\"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n```\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base-16 encoded serialized Sigma-state value|"
    },
    {
      "heading": "Votes",
      "content": "=== \"json\"\n```json\n\"000000\"\n```\nBase16-encoded votes for a soft-fork and parameters"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded votes for a soft-fork and parameters|"
    },
    {
      "heading": "ModifierId",
      "content": "=== \"json\"\n```json\n\"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded 32 byte modifier id"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded 32 byte modifier id|"
    },
    {
      "heading": "Digest32",
      "content": "=== \"json\"\n```json\n\"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded 32 byte digest"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded 32 byte digest|"
    },
    {
      "heading": "HexString",
      "content": "=== \"json\"\n```json\n\"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded bytes"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded bytes|"
    },
    {
      "heading": "ADDigest",
      "content": "=== \"json\"\n```json\n\"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded 33 byte digest - digest with extra byte with tree height"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded 33 byte digest - digest with extra byte with tree height|"
    },
    {
      "heading": "SerializedAdProof",
      "content": "=== \"json\"\n```json\n\"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded ad proofs"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded ad proofs|"
    },
    {
      "heading": "SpendingProofBytes",
      "content": "=== \"json\"\n```json\n\"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded spending proofs"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded spending proofs|"
    },
    {
      "heading": "BlockSignature",
      "content": "=== \"json\"\n```json\n\"5ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n```\nBase16-encoded block signature"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|string(base16)|false|none|Base16-encoded block signature|"
    },
    {
      "heading": "Timestamp",
      "content": "=== \"json\"\n```json\n1524143059077\n```\nBasic timestamp definition"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|anonymous|integer(int64)|false|none|Basic timestamp definition|"
    },
    {
      "heading": "EmissionInfo",
      "content": "=== \"json\"\n```json\n{\n  \"minerReward\": 0,\n  \"totalCoinsIssued\": 0,\n  \"totalRemainCoins\": 0,\n  \"reemitted\": 0\n}\n```\nEmission info for height"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|minerReward|integer(int64)|false|none|none|\n|totalCoinsIssued|integer(int64)|false|none|none|\n|totalRemainCoins|integer(int64)|false|none|none|\n|reemitted|integer(int64)|false|none|none|"
    },
    {
      "heading": "EmissionScripts",
      "content": "=== \"json\"\n```json\n{\n  \"emission\": \"string\",\n  \"reemission\": \"string\",\n  \"pay2Reemission\": \"string\"\n}\n```\nEmission related scripts"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|emission|string|false|none|none|\n|reemission|string|false|none|none|\n|pay2Reemission|string|false|none|none|"
    },
    {
      "heading": "BalancesSnapshot",
      "content": "=== \"json\"\n```json\n{\n  \"height\": 0,\n  \"balance\": 0,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ]\n}\n```\nAmount of Ergo tokens and assets"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|height|integer(int32)|true|none|none|\n|balance|integer(int64)|true|none|none|\n|assets|[Asset]|false|none|[Token detail in the transaction]|"
    },
    {
      "heading": "AddressValidity",
      "content": "=== \"json\"\n```json\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"isValid\": true,\n  \"error\": \"string\"\n}\n```\nValidity status of Ergo address"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|address|ErgoAddress|true|none|Encoded Ergo Address|\n|isValid|boolean|true|none|none|\n|error|string|false|none|none|"
    },
    {
      "heading": "ApiError",
      "content": "=== \"json\"\n```json\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\n```\nError response from API"
    },
    {
      "heading": "Properties",
      "content": "|Name|Type|Required|Restrictions|Description|\n|---|---|---|---|---|\n|error|integer|true|none|Error code|\n|reason|string|true|none|Error message explaining the reason of the error|\n|detail|string\u00a6null|true|none|Detailed error description|"
    }
  ],
  "qa_pairs": []
}