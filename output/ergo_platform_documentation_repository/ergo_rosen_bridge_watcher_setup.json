{
  "title": "Ergo Rosen Bridge Watcher Setup",
  "source_url": "docs/eco/rosen/watcher.md",
  "summary": "---\ntags:\n  - Rosen Bridge\n  - Watcher\n  - Setup\n  - Guide\n  - FAQ\n  - Troubleshooting\n  - Cross-chain\n  - Oracle\n---\n\n# Ergo Rosen Bridge Watcher Setup\n\nWatchers are integral to Rosen Bridge, serving as cross-chain oracles. They observe and report deposit events on their network to Ergo, contributing to the network's security and expansion. ## Watcher Setup Guides\n\n\n\n//// details | Tutorials\n     {type: info, open: true}\n/// details | Pre-requisites\n     {type: danger, open: true}\nSee the [pre-requisites page](rosen-preq.md) for information on setting up a local node, as well as minimal hardware and software requirements. (Docker)\n///\nThere is a [General Watchers app Tutorials Playlist](https://youtube.com/playlist?list=PLyQeADPK2PWgztdc9lCvAyqjknPaN9woQ&si=SNYxoZMv2iID610o), and more tailored guides for each platform available:\n\n/// details | Windows\n     {type: info, open: false}\n- Follow along as QX guides you through a [Windows Watcher installation](https://www.youtube.com/watch?time_continue=2&v=bQ2sviHtOQA&embeds_referring_euri=https%3A%2F%2Fwww.therefour.org%2F&embeds_referring_origin=https%3A%2F%2Fwww.therefour.org&source_ve_path=Mjg2NjY&feature=emb_logo)\n- [Rosen Bridge Watcher \u2014 Windows Setup Guide](https://medium.com/@goatspark/rosen-bridge-watcher-windows-setup-guide-4040815e0a74)\n///\n/// details | Mac\n     {type: info, open: false}\n- [Rosen Watcher with Mac (ErgoTutorials)](https://ergotutorials.com/video/rosen-bridge)\n///\n/// details | Linux\n     {type: info, open: false}\nmgpai walks through a Watcher instance in [Linux and Cloud](https://www.youtube.com/watch?time_continue=1&v=1dpfLWdWMLs&embeds_referring_euri=https%3A%2F%2Fwww.therefour.org%2F&embeds_referring_origin=https%3A%2F%2Fwww.therefour.org&source_ve_path=MjM4NTE&feature=emb_title)\n///\n\n    \n\n\nBelow you'll find some frequently asked questions as well as common issues and troubleshooting tips. ////\n\n\n\n\n\n## Watcher FAQs\n\n### Operational\n\n/// details | Role and Rewards\n     {type: question, open: false}\nWatchers are essential for accurate reporting and receive 70% of transaction fees as rewards for successful and accurate reporting.",
  "keywords": [
    "rosen",
    "bridge",
    "watcher",
    "setup",
    "guide",
    "troubleshooting",
    "cross",
    "chain",
    "oracle",
    "ergo",
    "deposit",
    "event",
    "network",
    "security",
    "expansion",
    "////",
    "detail",
    "tutorials",
    "type",
    "info",
    "requisites",
    "danger",
    "page](rosen",
    "information",
    "node",
    "hardware",
    "software",
    "requirement",
    "docker",
    "general",
    "watchers",
    "playlist](https://youtube.com",
    "playlist?list",
    "plyqeadpk2pwgztdc9lcvayqjknpan9woq&si",
    "snyxozmv2iid610o",
    "platform",
    "windows",
    "installation](https://www.youtube.com",
    "watch?time_continue=2&v",
    "bq2svihtoqa&embeds_referring_euri",
    "https%3a%2f%2fwww.therefour.org%2f&embeds_referring_origin",
    "https%3a%2f%2fwww.therefour.org&source_ve_path",
    "mjg2njy&feature",
    "window",
    "guide-4040815e0a74",
    "ergotutorials)](https://ergotutorials.com",
    "video",
    "linux",
    "mgpai",
    "instance",
    "cloud](https://www.youtube.com",
    "watch?time_continue=1&v=1dpflwdwmls&embeds_referring_euri",
    "mjm4nte&feature",
    "below",
    "question",
    "issue",
    "role",
    "reward",
    "reporting",
    "transaction",
    "guard",
    "emission",
    "audit",
    "configure",
    "progress",
    "collateral",
    "permit",
    "enjoy",
    "limit",
    "number",
    "repo",
    "capacity",
    "repos",
    "minimum",
    "consideration",
    "abuse",
    "folder",
    "watcher_port",
    "permits",
    "requirements",
    "amount",
    "report",
    "acquisition",
    "process",
    "part",
    "effort",
    "consensus",
    "intervention",
    "action",
    "settlement",
    "refund",
    "stake",
    "penalty",
    "consequence",
    "collusion",
    "fraud",
    "dashboard",
    "time",
    "activity",
    "minute",
    "operation",
    "logic",
    "commitment",
    "trigger",
    "stuff",
    "submission",
    "server",
    "secure",
    "shell",
    "connection",
    "port",
    "service",
    "example",
    "machine",
    "command",
    "client",
    "program",
    "3030:127.0.0.1:3030",
    "specifie",
    "address",
    "context",
    "replace",
    "user",
    "username",
    "hostname",
    "considerations",
    "warning",
    "installation",
    "patch",
    "password",
    "login",
    "authentication",
    "container",
    "isolation",
    "sign",
    "wallet",
    "owner",
    "control",
    "monitoring",
    "alerting",
    "uptime",
    "robot",
    "pingdom",
    "healthchecks.io",
    "error",
    "keyword",
    "alert",
    "team",
    "telegram",
    "discord",
    "self",
    "config",
    "file",
    "environment",
    "variables",
    "variable",
    "docker-compose.yml",
    ".env",
    "management",
    "directory",
    "content",
    "current_network",
    "bitcoin",
    "database_url",
    "file:/app",
    "data",
    "database",
    "logger_level",
    "yaml",
    "image",
    "rapidfort",
    "postgresql:16.0.0",
    "container_name",
    "watcher_btc",
    "rest",
    "definition",
    "compose",
    "scanner",
    "sync",
    "block",
    "case",
    "volume",
    "height",
    "bash",
    "local.yaml",
    "health",
    "broken",
    "default",
    "parameter",
    "following",
    "healthcheck",
    "criticalcommitmentcount",
    "warncommitmentcount",
    "db-1",
    "dependency",
    "view",
    "extension",
    "blockheight",
    "resort",
    "sser",
    "rebuilding",
    "system",
    "prune",
    "lock",
    "unlock",
    "value",
    "release",
    "update",
    "pull",
    "boxvalue(1100000",
    "size",
    "section",
    "indent",
    "minboxvalue",
    "unhandeledpromiserejection",
    "promise",
    "reason",
    "object",
    "lifecycle",
    "script",
    "start",
    "ogmios",
    "fork",
    "work",
    "amd64",
    "host",
    "incompatiblility",
    "chip",
    "rasberry",
    "mini",
    "asahi",
    "pr](https://github.com",
    "issues/6",
    "checking",
    "docker-compose.yaml",
    "configuration",
    "dumping",
    "watcher_postgre",
    "---edit",
    "step",
    "clearing",
    "volumes",
    "initial_height",
    "clean",
    "slate",
    "scratch",
    "containerid1",
    "containerid2",
    "containerid3"
  ],
  "sections": [
    {
      "heading": "Ergo Rosen Bridge Watcher Setup",
      "content": "Watchers are integral to Rosen Bridge, serving as cross-chain oracles. They observe and report deposit events on their network to Ergo, contributing to the network's security and expansion."
    },
    {
      "heading": "Watcher Setup Guides",
      "content": "//// details | Tutorials\n     {type: info, open: true}\n/// details | Pre-requisites\n     {type: danger, open: true}\nSee the pre-requisites page for information on setting up a local node, as well as minimal hardware and software requirements. (Docker)\n///\nThere is a General Watchers app Tutorials Playlist, and more tailored guides for each platform available:\n/// details | Windows\n     {type: info, open: false}\n- Follow along as QX guides you through a Windows Watcher installation\n- Rosen Bridge Watcher \u2014 Windows Setup Guide\n///\n/// details | Mac\n     {type: info, open: false}\n- Rosen Watcher with Mac (ErgoTutorials)\n///\n/// details | Linux\n     {type: info, open: false}\nmgpai walks through a Watcher instance in Linux and Cloud\n///\nBelow you'll find some frequently asked questions as well as common issues and troubleshooting tips.\n////"
    },
    {
      "heading": "Operational",
      "content": "/// details | Role and Rewards\n     {type: question, open: false}\nWatchers are essential for accurate reporting and receive 70% of transaction fees as rewards for successful and accurate reporting. (while 30% goes to the guard set). 25% of the emission is also reserved for 'Event-Based Emission (Rewards)'\n///\n/// details | Who can become a Watcher?\n     {type: question, open: false}\nAnyone. You can actively contribute to the expansion and security audit of the Rosen Bridge by becoming a Watcher. Watchers receive rewards for accurate reporting.\nConfigure and run the Watcher app for your desired network (In progress, so stay tuned!).\nTop it off with enough RSN and ERG.\nPut in collateral and receive reporting permits.\nEnjoy reporting and getting rewards.\n///\n/// details | Is there a limit on the number of watchers?\n     {type: question, open: false}\n77 is the one repo's capacity and cannot be changed, but we'll open other repos. So technically, we can have any number of repos that each has 77 watchers. However, in long run I assume one or two repos is sufficient for each network.\nA minimum of 60%+1 of the total number of watchers is required to trigger an event, adjustable by the guard set.\n///\n/// details | Can I run multiple watchers?\n     {type: question, open: false}\nYes, but it incurs financial considerations to prevent abuse. Each instance needs a unique folder and WATCHER_PORT.\n///"
    },
    {
      "heading": "Collateral, Permits and Reporting",
      "content": "/// details | Collateral Requirements\n     {type: question, open: false}\nEach instance requires 800 ERG and 30,000 RSN as collateral. This collateral is fully redeemable and the amount is adjustable.\n///\n/// details | How do I redeem my collateral?\n     {type: question, open: false}\nYou can redeem it after redeeming your last permit token, but if you have unsettled reports, you must wait until those permits are returned.\n///\n/// details | Permit Acquisition\n     {type: question, open: false}\nTo report, watchers must acquire permits, costing an additional 3,000 RSN. Multiple permits are necessary for reporting concurrent events, and permits can be seized if reports are found fraudulent.\n///\n/// details | Reporting Process\n     {type: question, open: false}\n- Watchers report deposit events as part of a collective effort.\n- A consensus among watchers on an event triggers a final report and guard intervention.\n- Guards take necessary actions based on these reports.\n- Watchers involved in successful cross-chain settlements are rewarded.\n///\n/// details | What if my report is successful?\n     {type: question, open: false}\nYou'll receive rewards and your staked amount will be returned.\n///\n/// details | What if my report is incorrect and uncorroborated?\n     {type: question, open: false}\nYou'll get a refund of your stake without any additional penalties.\n///\n/// details | What are the consequences of collusion and fraud in reporting?\n     {type: question, open: false}\nColluding watchers will lose the amount they staked.\n///\n/// details | Are permits spent or staked for reporting?\n     {type: question, open: false}\nPermits are staked, not spent, and can be managed through your dashboard.\n///\n/// details | Can I adjust my permits?\n     {type: question, open: false}\nYes, you can increase or decrease your permits at any time and redeem them when leaving.\n///\n/// details | How many permits are needed for concurrent reporting?\n     {type: question, open: false}\nThe number depend..."
    },
    {
      "heading": "Operational",
      "content": "/// details | Do I need to do anything after setup?\n     {type: question, open: false}\nYou don't need to manually watch and approve transactions, the software will handle everything automatically, you just need to ensure the watcher keeps running.\nObserve an event and wait a bit.\nCreate a commitment using report permits.\nAggregate all participating watchers commitment (into something called event trigger).\nWait for guards stuff, especially target chain tx and reward tx submission.\nGet rewards.\n///\n/// details | Interacting with a headless server\n     {type: info, open: false}\nTo interact with a headless server, you can use SSH (Secure Shell) to establish a secure connection. You can also forward ports to access specific services on the server. In the example below, we are using SSH to forward the local port 3030 to port 3030 on the server. This allows us to access a service running on port 3030 of the server as if it was running on our local machine.\nbash\nssh -L 3030:127.0.0.1:3030 user@watcher-server\nIn this command:\nssh is the command to start the SSH client program.\n-L 3030:127.0.0.1:3030 specifies that the local port 3030 should be forwarded to port 3030 on the server. 127.0.0.1 is the loopback IP address, which refers to the server itself in this context.\nuser@watcher-server specifies the username and the server to connect to. Replace user with your actual username and watcher-server with the actual hostname or IP address of your server.\n///\n/// details | Security Considerations\n{type: warning, open: false}\nKeep your watcher machine and Docker installation updated with the latest security patches.\nDo not reuse your watcher's RPC password anywhere else.\nSecure your machine's SSH login with a strong password and/or public key authentication.\nConsider running the watcher in a dedicated VM or container for isolation.\nRegularly monitor your watcher's logs and web UI for any signs of issues.\nKeep your collateral wallet secure, as the wallet owner has control over uns..."
    },
    {
      "heading": "UI Errors",
      "content": "/// details | scanner is out of sync\n     {type: danger, open: false}\nYour scanner is out of sync. You need to wait until it scan all blocks. The service runs every 3 minutes or so. Depending on when it calls and blocks produced it may drop a block sync here and there but catches up in most cases.\nAlternatively you can delete docker volumes and restart your watcher with newer initial height\nThen it doesn't need to scan that much blocks to be synced\nbash\ndocker compose down --volumes\nThen update the local.yaml initial height\nThen rerun the watcher\n///\n/// details | Permit Health Broken\n     {type: danger, open: false}\nBy default, the permit health warning parameter is set to 100. This is adjustable locally by adding the following into your local.yaml and adjusting as neccessary\nyaml\nhealthCheck:\n  permit:\n     warnCommitmentCount: 1 # amount of permits left before giving a warning\n     criticalCommitmentCount: 0 # amount of permits left it is critical\nAdjust the numbers as you wish.\nwarnCommitmentCount will change the warning to yellow when the available Permits reduce to the number.\ncriticalCommitmentCount will change to red when the available Permits reduce to this number.\n///\n/// details | watcher-db-1 is unhealthy\n     {type: danger, open: false}\ndependency failed to start: container watcher-db-1 is unhealthy\nYour .env file might be missing? turn on view file extensions like in the video, are you sure it's .env and not .env.txt?\nupdate your local.yaml with the current ergo blockheight\nAs a last resort, some ssers are reporting that this issue can be fixed by pruning existing images and rebuilding\ndocker system prune -a\nAs long as you don't have other docker images to worry about.\n///\n/// details | Lock, Unlock 500 Error\n     {type: danger, open: false}\nIf you're receiving a 500 Error while trying to lock or unlock your ERG and/or RSN, it could possibly be from having an insufficient box value on chain. This is fixed in the latest release, please update if you hav..."
    },
    {
      "heading": "Working with docker",
      "content": "/// details | Checking logs\n     {type: info, open: false}\nbash\ndocker compose logs\n///\n/// details | Updating your watcher\n     {type: info, open: false}\nbash\ndocker-compose pull\ndocker-compose down\ndocker-compose up -d\n///\n/// details | Restarting your watcher\n     {type: info, open: false}\nYou can restart your watcher instance simply by running the following command from within the same folder the docker-compose.yaml is stored.\nbash\ndocker compose up -d\n///\n/// details | no configuration files provided: not found\n     {type: danger, open: false}\nCheck you're in the correct directory. You should be executing docker compose commands from within the operation/watcher folder\n///\n/// details | Dumping databases\n     {type: info, open: false}\n```bash\ndocker compose down\ndocker volume remove watcher_postgres-data"
    },
    {
      "heading": "---edit block height in YAML after this step",
      "content": "docker compose up -d\n```\n///\n/// details | Clearing Volumes\n     {type: info, open: false}\nYou may wish to clear Docker volumes for a number of reasons, e.g. changing Initial_Height to sync. To do so run the following Docker command from the Watcher directory\nbash\ndocker compose down --volumes\nRe-initiate the Watcher with\nbash\ndocker compose up -d\n///\n/// details | Clean Slate\n     {type: info, open: false}\nIf you want to remove everything and start from scratch\nbash\ndocker ps -a\ndocker compose down\ndocker rm CONTAINERID1 CONTAINERID2 CONTAINERID3\nthen delete the folder and start fresh\n///"
    }
  ],
  "qa_pairs": []
}