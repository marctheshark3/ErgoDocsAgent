{
  "title": "Predefined Functions - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/scs/ergotree/functions/",
  "summary": "This page is a WIP. Please see ErgoTree.pdf for full details.",
  "keywords": [
    "page",
    "ergotree.pdf",
    "detail"
  ],
  "sections": [
    {
      "heading": "ErgoTree Functions#",
      "content": "This page is a WIP. Please see ErgoTree.pdf for full details.\nCode\nMnemonic\nDescription\nDescription\n\n\n\n\n115\nConstantPlaceholder\nInt    => T\nCreate special ErgoTree node which can be replaced by constant with given id.\n\n\n116\nSubstConstants\nColl[Byte], Coll[Int], Coll[T]    => Coll[Byte]\n...\n\n\n122\nLongToByteArray\nLong    => Coll[Byte]\nConverts Long value to big-endian bytes representation.\n\n\n123\nByteArrayToBigInt\nColl[Byte]    => BigInt\nConvert big-endian bytes representation (Coll[Byte]) to BigInt value.\n\n\n124\nByteArrayToLong\nColl[Byte]    => Long\nConvert big-endian bytes representation (Coll[Byte]) to Long value.\n\n\n125\nDowncast\n(T    => R)\nCast this numeric value to a smaller type (e.g. Long to Int). Throws exception if overflow.\n\n\n126\nUpcast\n(T    => R)\nCast this numeric value to a bigger type (e.g. Int to Long)\n\n\n140\nSelectField\n(T, Byte    => R)\nSelect tuple field by its 1-based index. E.g. input._1 is transformed to SelectField(input, 1\n\n\n143\nLT\nT, T    => Boolean\nReturns true is the left operand is less then the right operand, false otherwise.\n\n\n144\nLE\nT, T    => Boolean\nReturns true is the left operand is less then or equal to the right operand, false otherwise.\n\n\n145\nGT\nT, T    => Boolean\nReturns true is the left operand is greater then the right operand, false otherwise.\n\n\n146\nGE\nT, T    => Boolean\nReturns true is the left operand is greater then or equal to the right operand, false otherwise.\n\n\n147\nEQ\nT, T    => Boolean\nCompare equality of left and right arguments\n\n\n148\nNEQ\nT, T    => Boolean\nCompare inequality of left and right arguments\n\n\n149\nIf\nBoolean, T, T    => T\nCompute condition, if true then compute trueBranch else compute falseBranch\n\n\n150\nAND\nColl[Boolean]    => Boolean\nReturns true if \\emph{all the elements in collection are true.\n\n\n151\nOR\nColl[Boolean]    => Boolean\nReturns true if \\emph{any the elements in collection are true.\n\n\n152\nAtLeast\nInt, Coll[SigmaProp]    => SigmaProp\n...\n\n\n153\nMinus\nT, T    => T\nReturns a result of subtracting second..."
    }
  ],
  "qa_pairs": []
}