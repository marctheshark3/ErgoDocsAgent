{
  "title": "Diffie - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/scs/sigma/diffie/",
  "summary": "The Diffie-Hellman (DH) protocol is a cornerstone of cryptography, allowing two parties to generate a shared secret over a public communication channel. This shared secret can then be used to encrypt future communications. Importantly, Diffie-Hellman does not involve exchanging the secret itself\u00e2\u0080\u0094instead, the two parties collaboratively generate it, ensuring that the secret remains secure, even if an observer intercepts their communication. This principle makes Diffie-Hellman invaluable in settings where multi-signature schemes, ring signatures, and other privacy-preserving cryptographic protocols are required, such as in Ergo's mixer or stealth address applications. In the context of Ergo, Diffie-Hellman tuples (DHTs) are used to prove knowledge of a shared secret without revealing it.",
  "keywords": [
    "diffie",
    "hellman",
    "protocol",
    "cornerstone",
    "cryptography",
    "party",
    "secret",
    "communication",
    "channel",
    "itself\u00e2\u0080\u0094instead",
    "observer",
    "principle",
    "invaluable",
    "setting",
    "scheme",
    "ring",
    "signature",
    "privacy",
    "ergo",
    "mixer",
    "address",
    "application",
    "context",
    "tuple",
    "dhts",
    "knowledge",
    "group",
    "element",
    "goal",
    "prover",
    "value",
    "\u00e2\u0086\u0090r",
    "\\quad",
    "verifier",
    "challenge",
    "response",
    "proof",
    "\\cdot",
    "\\text{and",
    "process",
    "environment",
    "version",
    "fiat",
    "shamir",
    "transformation",
    "verifier\u00e2\u0080\u0099s",
    "hash",
    "function",
    "message",
    "self",
    "ergoscript",
    "provedhtuple(g",
    "user",
    "ergo\u00e2\u0080\u0099s",
    "zerojoin",
    "security",
    "decision",
    "assumption",
    "information",
    "ergomixer",
    "stealth",
    "exchange",
    "transaction",
    "payment",
    "time",
    "recipient\u00e2\u0080\u0099s",
    "identity",
    "fund",
    "detail",
    "addresses",
    "page",
    "generation",
    "chain",
    "commitment",
    "provedhtuple",
    "developer",
    "statement",
    "part",
    "sigma",
    "framework",
    "contract",
    "operator",
    "condition",
    "below",
    "example",
    "script",
    "role",
    "operation",
    "tool"
  ],
  "sections": [
    {
      "heading": "Diffie-Hellman (DH) Protocol in Ergo#",
      "content": "The Diffie-Hellman (DH) protocol is a cornerstone of cryptography, allowing two parties to generate a shared secret over a public communication channel. This shared secret can then be used to encrypt future communications. Importantly, Diffie-Hellman does not involve exchanging the secret itself\u00e2\u0080\u0094instead, the two parties collaboratively generate it, ensuring that the secret remains secure, even if an observer intercepts their communication.\nThis principle makes Diffie-Hellman invaluable in settings where multi-signature schemes, ring signatures, and other privacy-preserving cryptographic protocols are required, such as in Ergo's mixer or stealth address applications."
    },
    {
      "heading": "Diffie-Hellman Tuple#",
      "content": "In the context of Ergo, Diffie-Hellman tuples (DHTs) are used to prove knowledge of a shared secret without revealing it. The tuple consists of public group elements g, h, u, v, and the goal is to prove knowledge of a secret x such that:\n\\[ u = g^x \\quad \\text{and} \\quad v = h^x \\]\nThe protocol works as follows:"
    },
    {
      "heading": "Interactive Protocol#",
      "content": "The prover selects a random value r \u00e2\u0086\u0090R Zq and computes two temporary values t0 and t1:\n   [\n   t_0 = g^r, \\quad t_1 = h^r\n   ]\n   The prover sends (t0, t1) to the verifier.\n\n\nThe verifier selects a random challenge c \u00e2\u0086\u0090R Zq and sends it to the prover.\n\n\nThe prover computes the response z = r + cx and sends it to the verifier.\n\n\nThe verifier accepts the proof if:\n   [\n   g^z = t_0 \\cdot u^c \\quad \\text{and} \\quad h^z = t_1 \\cdot v^c\n   ]\nThis process allows the prover to demonstrate knowledge of x without actually revealing x."
    },
    {
      "heading": "Fiat-Shamir Transformation (Non-Interactive Variant)#",
      "content": "In blockchain environments like Ergo, interactive protocols are often impractical. Instead, a non-interactive version of the Diffie-Hellman protocol is used, employing the Fiat-Shamir transformation. This transformation replaces the verifier\u00e2\u0080\u0099s challenge c with a cryptographic hash function H:\n\\[ c = H(t_0 \\parallel t_1 \\parallel m) \\]\nHere, m is the message to be signed or validated. This makes the protocol non-interactive, as the prover can generate the challenge independently, creating a self-contained proof.\nIn ErgoScript, this transformation is implemented as proveDHTuple(g, h, u, v), allowing users to generate non-interactive proofs of Diffie-Hellman tuples."
    },
    {
      "heading": "Mixers#",
      "content": "Diffie-Hellman tuples are essential for maintaining privacy in Ergo\u00e2\u0080\u0099s ZeroJoin mixer, a non-custodial, non-interactive token mixer. The security of ZeroJoin is based on the Decision Diffie-Hellman (DDH) assumption, a well-established cryptographic assumption that ensures no information about the secret can be gleaned from the public values exchanged.\nZeroJoin utilizes ring signatures and Diffie-Hellman tuples to restore fungibility to digital notes, ensuring that coins become indistinguishable from one another after mixing.\nErgo's mixers avoid the need for trusted setups or intermediaries, ensuring minimal trust assumptions."
    },
    {
      "heading": "Comparison with Other Platforms:#",
      "content": "Bitcoin\nEthereum\nErgo\n\n\n\n\nNo on-chain mixing\nTrusted setup-based or inefficient mixers\nEfficient, minimal trust assumptions, using ring signatures and DHTs\nFor more information, see ErgoMixer."
    },
    {
      "heading": "Stealth Addresses#",
      "content": "Stealth addresses leverage non-interactive Diffie-Hellman key exchanges to provide privacy in financial transactions. Each payment generates a new one-time-use address, ensuring that the recipient\u00e2\u0080\u0099s identity remains private while still enabling them to securely receive funds.\nStealth addresses prevent anyone except the recipient from linking transactions to their public address, significantly enhancing privacy.\nDiffie-Hellman key exchanges are at the core of this functionality, ensuring that only the intended recipient can derive the private key needed to spend the funds.\nFor more details, refer to the Stealth Addresses page."
    },
    {
      "heading": "Fiat-Shamir Transformation#",
      "content": "The Fiat-Shamir transformation is crucial for turning interactive protocols like Diffie-Hellman into non-interactive ones suitable for blockchain environments. In Ergo, the Fiat-Shamir transformation ensures that proof generation remains non-interactive and compact, making it efficient for on-chain use.\nThe transformation replaces the interactive challenge c with a hash of the prover's commitment and the message being signed:\n\\[ c = H(t_0 \\parallel t_1 \\parallel m) \\]\nThis allows the prover to generate the challenge on their own, without needing an external verifier. This transformation is implemented in ErgoScript via functions like proveDHTuple, which allows developers to create non-interactive proofs for Diffie-Hellman tuples, among other cryptographic statements."
    },
    {
      "heading": "Integration in Ergo's Sigma Protocols#",
      "content": "In Ergo, Diffie-Hellman tuples are a critical part of the overall Sigma protocol framework. By allowing composable cryptographic proofs, Sigma protocols enable developers to create contracts that require privacy-preserving proofs, such as:\nRing signatures: Used in mixers and privacy-focused contracts, where participants can prove they are part of a group without revealing which member they are.\nThreshold signatures: Multi-signature setups that require a subset of participants to agree to spend funds.\nThese proofs can be combined using logical operators such as AND, OR, and k-out-of-n, enabling complex and flexible cryptographic conditions for smart contracts."
    },
    {
      "heading": "Example: Proving Knowledge of a Diffie-Hellman Tuple in ErgoScript#",
      "content": "Below is an example of how the proveDHTuple function can be used in an ErgoScript contract to prove knowledge of a shared secret x:\n{\n  val g = decodePoint(\"028D84...\")\n  val h = decodePoint(\"02F937...\")\n  val u = decodePoint(\"03C89B...\")\n  val v = decodePoint(\"02B1DA...\")\n\n  proveDHTuple(g, h, u, v)\n}\nThis script proves knowledge of x such that u = g^x and v = h^x, enabling privacy-preserving contracts that can securely verify knowledge of shared secrets without revealing them."
    },
    {
      "heading": "Resources#",
      "content": "Diffie-Hellman tuples support in sigma-rust\nFirst transaction protected by Diffie-Hellman\nDecision Diffie-Hellman (DDH) Assumption"
    },
    {
      "heading": "Conclusion#",
      "content": "The Diffie-Hellman protocol plays a vital role in enabling privacy-preserving applications on Ergo, from stealth addresses to mixers like ZeroJoin. By leveraging Diffie-Hellman tuples and their non-interactive proofs through the Fiat-Shamir transformation, Ergo enables secure and efficient cryptographic operations. These tools, integrated with Sigma protocols, empower developers to create powerful decentralized applications that prioritize both security and privacy.\nFor additional details, explore:\nErgoMixer\nStealth Addresses"
    }
  ],
  "qa_pairs": []
}