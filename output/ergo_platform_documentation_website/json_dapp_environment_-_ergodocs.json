{
  "title": "JSON dApp Environment - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/stack/jde/",
  "summary": "Ergo enables sophisticated dApps via smart contracts written in ErgoScript. Interacting with such smart contracts requires a developer to write code in a language such as Scala (using the AppKit framework) or Rust (using HDF or sigma-rust) The JSON dApp Environment (JDE) described on this page is another programming tool you can use to interact with Ergo dApps. The differentiating feature of JDE is that its programming language is JSON. This JDE is designed with the following goals in mind: Enable tech-savvy users and developers to interact with existing (and future)",
  "keywords": [
    "ergo",
    "dapps",
    "contract",
    "ergoscript",
    "developer",
    "code",
    "language",
    "scala",
    "appkit",
    "framework",
    "rust",
    "sigma",
    "json",
    "dapp",
    "environment",
    "page",
    "programming",
    "tool",
    "feature",
    "goal",
    "mind",
    "tech",
    "user",
    "future",
    "chain",
    "logic",
    "sandbox",
    "mode",
    "script",
    "execution",
    "server",
    "program",
    "service",
    "example",
    "kiosk",
    "reserve",
    "coin",
    "rate",
    "builder",
    "result",
    "rule",
    "java",
    "turing",
    "case",
    "purchasing",
    "step",
    "task",
    "following",
    "release",
    "assembly",
    "command",
    "output",
    "documentation",
    "detail"
  ],
  "sections": [
    {
      "heading": "JSON dApp Environment (JDE)#",
      "content": "Ergo enables sophisticated dApps via smart contracts written in ErgoScript.\nInteracting with such smart contracts requires a developer to write code in a language such as Scala (using the AppKit framework) or Rust (using HDF or sigma-rust)\nThe JSON dApp Environment (JDE) described on this page is another programming tool you can use to interact with Ergo dApps. The differentiating feature of JDE is that its programming language is JSON."
    },
    {
      "heading": "Goals#",
      "content": "This JDE is designed with the following goals in mind:\nEnable tech-savvy users and developers to interact with existing (and future) Ergo dApps such as Sigma USD by programming the off-chain logic user-friendly. \n\n\nProvide a \"sandbox\" mode, where users can send arbitrary scripts for execution such that the server does not have to worry about malicious programs. This enables the JDE service to be hosted remotely. An example is Kiosk-Web, where you can post arbitrary scripts (such as this, which gets the reserve coin rate) in \"Tx Builder\" and obtain results.\nGoal #2 rules out many programming languages such as Java/Scala and Rust. This rules out all the so-called \"Turing-complete\" languages."
    },
    {
      "heading": "Capabilities#",
      "content": "Let us take the use-case of purchasing, say, 10 Sigma-USD reserve coins as an example, which involves the following steps:\nFind the current oracle pool box and obtain the rate from register R4.\nFind the current bank box and obtain the relevant parameters (tokens in circulation and base reserves).\nUse the formulae to obtain the delta in base reserves. \nCompute the details of the new bank box to be created (nano-Ergs, tokens, registers)\nCompute the details of the new receipt box to be created (nano-Ergs, tokens, registers)\nMake a transaction creation request to the Ergo node with the above details.\nAll the above tasks can be programmed in JDE, as done in this script.\nIn general, JDE allows us to do the following:\nFind some boxes by address and/or box Id\nExtract values from those boxes (nanoErgs, registers and tokens), and define variables using those.\nDefine constant values\nPerform computation using the constants and variables. JDE supports the if-then-else construct for control flow. However, it does not support loops. \nDefine outputs using the values computed\nMake a transaction creation request to the Ergo node"
    },
    {
      "heading": "How to use JDE#",
      "content": "A compiled JAR is available on the release page. You can also generate the JAR yourself using the sbt assembly command.\nThe following are the steps in using JDE.\nUnderstand the scripting language by looking at the sample scripts and the documentation.\nEnsure you have a fully synced Ergo node running.\nWrite your script or edit the existing script for the task at hand.\nInvoke JDE via CLI to generate a transaction creation request (aka unsigned transaction) and some returned values.\nDepending on your use case, you will be using the output of Step 4 differently.\nEnd users will use it to send a transaction on the Ergo blockchain\nWallet authors will append some of their inputs/outputs before sending the transaction.\ndApp authors will use the returned values for further computation.\nJDE also includes a web-service mode for the last two use-cases.\nPlease see the documentation for details."
    },
    {
      "heading": "Important Notes#",
      "content": "JDE is experimental. Please use with caution at your own risk. Always inspect the created transaction before sending it. \nIf you discover a bug, please make an issue and a PR. \nIf you find some feature missing, please make an issue."
    }
  ],
  "qa_pairs": []
}