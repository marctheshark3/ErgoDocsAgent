{
  "title": "Bitcoin Watcher - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/eco/rosen/bitcoin-watcher/",
  "summary": "To participate as a watcher in the Rosen Bridge, you need to deploy a watcher app that observes one of the supported networks. Each supported network has its own set of watchers responsible for reporting users' actions on that specific network. This section is adapted from the deploy-docker.md section on the Rosen Bridge documentation. Clone the Operation repository and navigate to the operation/watcher directory: Create your environment file .env based on the env.template file in the watcher directory: To view hidden .env files later, use ls -a.",
  "keywords": [
    "watcher",
    "rosen",
    "bridge",
    "network",
    "user",
    "action",
    "section",
    "documentation",
    "operation",
    "repository",
    "directory",
    "environment",
    "file",
    ".env",
    "variable",
    "space",
    "sign",
    "permission",
    "config",
    "macos",
    "logs",
    "type",
    "info",
    "instance",
    "danger",
    "docker",
    "command",
    "folder",
    "database",
    "volume",
    "scratch",
    "raspberry",
    "image",
    "architecture",
    "arm64v8",
    "local.yaml",
    "instruction",
    "local",
    "change",
    "container",
    "target",
    "ergo",
    "cardano",
    "bitcoin",
    "unlock",
    "hash",
    "blake2b",
    "algorithm",
    "line",
    "information",
    "source",
    "connection",
    "performance",
    "decentralization",
    "node",
    "disk",
    "install",
    "core",
    "configure",
    "locate",
    "bitcoin.conf",
    "datum",
    "text",
    "editor",
    "username",
    "password",
    "auth",
    "generator",
    "copy",
    "edit",
    "server",
    "access",
    "rpcallowip",
    "range",
    "bitcoind",
    "txindex=1",
    "setting",
    "sync",
    "dbcache",
    "example",
    "cache",
    "value",
    "memory",
    "june",
    "blockchain",
    "size",
    "mind",
    "storage",
    "service",
    "snapshot",
    "process",
    "requirement",
    "transaction",
    "indexing",
    "progress",
    "verificationprogress",
    "field",
    "output",
    "resource",
    "machine",
    "block",
    "rpc.url",
    "address",
    "port",
    "debugging",
    "zeromq",
    "broadcast",
    "feature",
    "esplora",
    "height",
    "observation",
    "confirmation",
    "validity",
    "threshold",
    "wallet",
    "mnemonic",
    "data",
    "localhost:3030",
    "dashboard",
    "asset",
    "health",
    "status",
    "button",
    "lock",
    "registration",
    "reporting",
    "permit",
    "amount",
    "responsibility",
    "event",
    "report",
    "payment",
    "collateral",
    "time",
    "form",
    "security",
    "measure",
    "sybil",
    "attack",
    "token",
    "number",
    "reward",
    "penalty",
    "troubleshooting",
    "faqs"
  ],
  "sections": [
    {
      "heading": "Bitcoin Rosen Bridge Watcher Setup#",
      "content": "To participate as a watcher in the Rosen Bridge, you need to deploy a watcher app that observes one of the supported networks. Each supported network has its own set of watchers responsible for reporting users' actions on that specific network."
    },
    {
      "heading": "Docker Setup#",
      "content": "This section is adapted from the deploy-docker.md section on the Rosen Bridge documentation.\nClone the Operation repository and navigate to the operation/watcher directory:\ngit clone https://github.com/rosen-bridge/operation.git\ncd operation/watcher/\nCreate your environment file .env based on the env.template file in the watcher directory:\ncp env.template .env\nTo view hidden .env files later, use ls -a."
    },
    {
      "heading": "Environment Variable Configurations#",
      "content": "Configure the required environment variables in the .env file (ensure no spaces after the '=' sign):\n# Required Environments\n\nPOSTGRES_PASSWORD=your_random_password\nPOSTGRES_USER=your_random_username\nPOSTGRES_DB=your_random_db_name\nPOSTGRES_PORT=5432\nSet the required permissions and create the local.yaml file in the config directory:\nsudo chown -R 3000:3000 logs\ntouch config/local.yaml\nFor MacOS users, set 707 permission for the logs directory:\nsudo chmod -R 707 logs\nWorking with Docker\n\nChecking logs\n{type: info, open: false}\nTo check logs, use:\ndocker compose logs\n\n\n\nUpdating your watcher\n{type: info, open: false}\nTo update your watcher, use:\ndocker compose pull\ndocker compose down\ndocker compose up -d\n\n\n\nRestarting your watcher\n{type: info, open: false}\nTo restart your watcher instance, run:\ndocker compose up -d\n\n\n\nno configuration files provided: not found\n{type: danger, open: false}\nEnsure you're in the correct directory. You should execute docker compose commands from within the operation/watcher folder.\n\n\nDumping databases\n{type: info, open: false}\nTo dump databases, use:\ndocker compose down\ndocker volume remove watcher_postgres-data\n\n\n#---edit block height in YAML after this step\ndocker compose up -d\n\n\n\nClearing Volumes\n{type: info, open: false}\nTo clear Docker volumes, use:\ndocker compose down --volumes\n\nRe-initiate the watcher with:\ndocker compose up -d\n\n\n\nClean Slate\n{type: info, open: false}\nTo remove everything and start from scratch:\ndocker ps -a\ndocker compose down\ndocker rm CONTAINERID1 CONTAINERID2 CONTAINERID3\n\nThen delete the folder and start fresh.\nNote for Raspberry Pi ARM Users\n{type: info, open: false}\nTo run the watcher on an ARM-based Raspberry Pi, use an ARM-based DB image. Update the docker-compose.yml as follows:\nChange the DB image according to your architecture (e.g., arm64v8):\nservices:\n  db:\n-   image: rapidfort/postgresql:16.0.0\n+   image: arm64v8/postgres:16.0\n\nUpdate the volume of the DB:\n    volumes:\n-     - postgres-data:/bitnami..."
    },
    {
      "heading": "Pull Docker Images and Run Service#",
      "content": "Pull the Docker image:\ndocker compose pull\nSet up your local.yaml using the instructions in the next section (Local Config). After saving the changes, run the container:\ndocker compose up -d"
    },
    {
      "heading": "Local Config#",
      "content": "To start your watcher, configure the local.yaml file."
    },
    {
      "heading": "Specify the Target Network#",
      "content": "Set the target network you're watching. Currently supported networks are ergo, cardano, and bitcoin:\nnetwork: bitcoin"
    },
    {
      "heading": "API Configuration#",
      "content": "api:\n  apiKeyHash: \"YOUR_API_KEY_HASH\"\nTo secure the action-based APIs (e.g., lock, unlock), set a unique and robust API key hash using the Blake2b algorithm. You can generate the hash using the rosen command line:\nnpx @rosen-bridge/cli blake2b-hash YOUR_API_KEY\nAlternatively, use Docker:\ndocker run -it --rm node:18.16 npx --yes @rosen-bridge/cli blake2b-hash YOUR_API_KEY"
    },
    {
      "heading": "Bitcoin Configuration#",
      "content": "Choose your information source for the Bitcoin network and specify its connection information.\nYou can use either rpc\nbitcoin:\n  type: rpc\n  rpc:\n    url: \"YOUR_RPC_URL\"\n    username: \"YOUR_RPC_USERNAME\"\n    password: \"YOUR_RPC_PASSWORD\"\nSetting Up a Bitcoin Node (RPC)\n{type: info, open: false}\nFor optimal watcher performance and decentralization, running your own fully synced Bitcoin node is recommended. However, this consumes significant disk space, so you can use a public node as detailed in the next section.\n\n\nInstall Bitcoin Core following the official instructions for your OS.\n\n\nConfigure Bitcoin Core:\n\n\nLocate the bitcoin.conf file in the Bitcoin data directory:\n\nLinux: ~/.bitcoin/\nmacOS: ~/Library/Application Support/Bitcoin/\nWindows: %APPDATA%\\Bitcoin\\\n\n\n\nOpen bitcoin.conf with a text editor or create it if it doesn't exist.\n\n\nGenerate an RPC username and password:\n\n\nVisit this RPC auth generator\n\nEnter a username and click \"Generate\"\n\nCopy the generated line starting with rpcauth=\n\n\nEdit bitcoin.conf to enable the RPC server and allow the watcher to connect:\n\n\nPaste the rpcauth line you copied\n\nAdd the following lines to enable the RPC server:\n     server=1\nrpcbind=0.0.0.0\nrpcallowip=0.0.0.0/0\ntxindex=1\nrest=1\n\n\nTo limit RPC access to only the watcher container, set rpcallowip to the Docker network range:\nrpcallowip=172.16.0.0/12\n\n\n\nSave the file\n\n\nIf bitcoind was already running, stop and restart it:\n\n\nbitcoin-cli stop\nbitcoind -daemon\n\n\nVerify the node is running and wait for it to sync:\n   bitcoin-cli getblockchaininfo\n\n   Look for \"initialblockdownload\": false to confirm the node is synced.\n\n\nRunning a Pruned Bitcoin Node\n{type: info, open: false}\nA pruned Bitcoin node is not compatible with the Rosen Bitcoin bridge watcher. The watcher requires the txindex=1 setting, which is not supported by pruned nodes. If you initially synced a pruned node, you'll need to restart the sync with a full node.\n\n\nIncreasing Bitcoin Node DbCache\n{type: info, open: false..."
    },
    {
      "heading": "Ergo Configuration#",
      "content": "Even if you are running a Bitcoin Watcher, you must configure the Ergo section\nCreate a new wallet and set the wallet mnemonic, you can also load this through an environmental variable so it's only stored in-memory.\nergo:\n  mnemonic: \"YOUR_WALLET_MNEMONIC\"\nSelect your primary data source:\nergo:\n  type: node\n  node:\n    url: https://example.node.com\n  explorer:\n    url: https://api.ergoplatform.com\nSet the initial height of your watcher:\ninitialHeight: LATEST_HEIGHT\nCustomize observation confirmation and validity threshold:\nobservation:\n  confirmation: 10\n  validThreshold: 720"
    },
    {
      "heading": "Example Configuration for Bitcoin Watcher#",
      "content": "network: bitcoin\napi:\n  apiKeyHash: \"YOUR_API_KEY_HASH\"\nergo:\n  type: explorer\n  initialHeight: LATEST_ERGO_HEIGHT\n  mnemonic: \"YOUR_WALLET_MNEMONIC\"\n  node:\n    url: https://example.node.com\nbitcoin:\n  type: rpc\n  rpc:\n    url: \"YOUR_BITCOIN_RPC_URL\"\n    username: \"YOUR_RPC_USERNAME\"\n    password: \"YOUR_RPC_PASSWORD\"\n  initial:\n    height: LATEST_BITCOIN_HEIGHT\nobservation:\n  confirmation: 2\n  validThreshold: 72"
    },
    {
      "heading": "Get Your Watcher Permit#",
      "content": "After setting up and running your watcher instance, access the watcher UI by visiting localhost:3030. From your dashboard, you can view network information, assets, and health status alongside action buttons. To activate your watcher, proceed to the 'LOCK' action, where you can utilize assets from the watcher wallet for registration and obtain reporting permits. Top up your wallet with the specified amounts of ERG and RSN to receive these permits.\nAs a watcher, your primary responsibility is to monitor your network and report actions related to the bridge. To report a bridge event, you must have report permits. Acquiring these permits involves two types of payments:\nCollateral: Provide one-time collateral in the form of ERG and RSN tokens to obtain initial report permits. This collateral serves as a security measure to mitigate Sybil attacks. When you return all your report permits, the collateral is refunded, and your watcher is unregistered.\n\n\nRSN for Permits: Lock RSN tokens to receive permit tokens. Use these tokens to create report permits for reporting events. The number of report permits determines how many concurrent reports you can create. In the event of a valid report, the permit is refunded along with your reward. If the report is invalid, the permit is seized as a penalty.\nFor tips, troubleshooting, FAQs, and other information, please refer to the main watcher documentation."
    }
  ],
  "qa_pairs": []
}