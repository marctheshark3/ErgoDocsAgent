{
  "title": "Audit - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/protocol/audit/",
  "summary": "Ergo has successfully passed a security audit of certain (most critical) parts of the code. The audit was performed by Jean-Philipee Aumasson (aka veorq, aumasson.jp/). The detailed report is below. Nothing critical is found. Comments on issues found: On wallet password, we'll provide a recommendation in subsequent versions of the protocol client.",
  "keywords": [
    "ergo",
    "security",
    "audit",
    "part",
    "code",
    "jean",
    "philipee",
    "aumasson",
    "aumasson.jp/",
    "report",
    "comment",
    "issue",
    "wallet",
    "password",
    "recommendation",
    "version",
    "protocol",
    "client",
    "enforcement",
    "place",
    "consultation",
    "parameter",
    "sense",
    "network",
    "mining",
    "node",
    "block",
    "fork",
    "participant",
    "need",
    "check",
    "people",
    "library",
    "side",
    "channel",
    "attack",
    "memory",
    "inspection",
    "malware",
    "virus",
    "machine",
    "assessment",
    "philippe",
    "dec/19",
    "component",
    "platform",
    "finding",
    "\u00e2\u0080\u008bthe",
    "ergoscript",
    "scripting",
    "language",
    "sigma",
    "statement",
    "proof",
    "knowledge",
    "tree",
    "threshold",
    "condition",
    "leave",
    "logarithm",
    "problem",
    "thank",
    "fiat",
    "shamir",
    "transform",
    "logic",
    "paper",
    "proving",
    "verification",
    "routine",
    "appendix",
    "\u00e2\u0080\u008bimplementation",
    "challenge",
    "encoding",
    "serialisation",
    "deserialisation",
    "input",
    "functionality",
    "compliance",
    "specification",
    "aspect",
    "repository",
    "sigmastate",
    "interpreter",
    "behaviour",
    "\u00e2\u0080\u008bwe",
    "sigserializer",
    "proverinterpreter",
    "trait",
    "object",
    "class",
    "review",
    "internal",
    "risk",
    "verifying",
    "attacker",
    "script",
    "software",
    "scala",
    "error",
    "user",
    "secret",
    "disk",
    "seed",
    "ergowalletactor",
    "storage",
    "jsonsecretstorage",
    "time",
    "initwallet",
    "command",
    "following",
    "generate",
    "settings.walletsettings.seedstrengthbits",
    "entropy",
    "default",
    "bip39",
    "mnemonic",
    "pbkdf2",
    "derivation",
    "nonce",
    "derive",
    "hmac",
    "sha256",
    "iteration",
    "salt",
    "datum",
    "process",
    "initialisation",
    "account",
    "passphrase",
    "absence",
    "length",
    "theory",
    "practice",
    "example",
    "character",
    "copy",
    "value",
    "execution",
    "limitation",
    "garbage",
    "address",
    "space",
    "crash",
    "dump",
    "mitigation",
    "\u00e2\u0080\u008bafter",
    "autolykos",
    "round",
    "change",
    "commit",
    "eb0f85a",
    "file",
    "operation",
    "headersprocessor",
    "modifiervalidator",
    "header",
    "validation",
    "point",
    "k<=32",
    "number",
    "element",
    "solution",
    "n<31",
    "log2",
    "function",
    "theassert"
  ],
  "sections": [
    {
      "heading": "Security Audit#",
      "content": "Ergo has successfully passed a security audit of certain (most critical) parts of the code. The audit was performed by Jean-Philipee Aumasson (aka veorq, aumasson.jp/).\nThe detailed report is below. Nothing critical is found. Comments on issues found:\nOn wallet password, we'll provide a recommendation in subsequent versions of the protocol client. Not sure hard enforcement on passwords will take place, but we'll do more consultations on this.\n\n\nChanging \"n\" and \"k\" parameters makes sense only when launching a new network. Changing these parameters in the mining node will make blocks produced invalid for other nodes. Changing these parameters in the protocol client means going on another fork (blocks coming from the honest protocol participants will be rejected). So no need for extra checks, as people launching new networks will set \"n\" and \"k\" properly.\n\n\nCurrently, the Ergo node (as well as other blockchain protocol clients and wallets we're aware of and the cryptographic libraries we're using) does not protect from side-channel attacks running locally (e.g. timing attacks or memory inspection by malware or viruses). So please protect the machines you're running wallets on!\nErgo security assessment by Jean-Philippe Aumasson on 07/Dec/19"
    },
    {
      "heading": "Summary#",
      "content": "Ergo solicited us to perform a security assessment of several components of their Ergo Platform:\nSigma protocol proofs creation and verification\nWallet's secure storage of secrets\nProof-of-Work validation\n\u00e2\u0080\u008bThis brief report summarises our assessment and describes our findings and mitigation recommendations."
    },
    {
      "heading": "Sigma protocol proofs#",
      "content": "\u00e2\u0080\u008bThe Ergo protocol relies on ErgoScript, a scripting language supporting sigma-statements, which can be proven and verified through non-interactive proofs of knowledge.\nThese proofs are statements described as a tree of AND, OR, and threshold conditions, whose leaves are proofs of knowledge of a discrete logarithm problem.\nThe proof of the sigma-statement is then made non-interactive thanks to the Fiat-Shamir transform.\nThis logic is specified in the ErgoScript paper, and the specific\nproving and verification routines described in Appendix A.\n\u00e2\u0080\u008bImplementation challenges are then to:\nDefine encoding of the proofs that are safe and efficient, and implement serialisation and deserialisation that always successfully processes valid input and gracefully fails to process invalid input.\n\n\nImplement the proving and verification functionalities correctly, in compliance with the specification, and most importantly, no invalid statement can successfully pass verification.\nWe reviewed these two aspects, based on the code in the repository sigmastate-interpreter, and the ErgoScript paper, carefully comparing the intended behaviour (in Appendix A) with the actual behaviour as implemented.\n\u00e2\u0080\u008bWe notably reviewed code from the SigSerializer, Interpreter, and ProverInterpreter traits and objects.\n\u00e2\u0080\u008bWe mainly sought bugs from the following classes:\n\u00e2\u0080\u008bUnsafe processing of malformed input\nUnsafe processing of unusually long or short input\nBehavior when large tree depth or recursion level\nUnsafe use Scala types and structures\nInappropriate variable types\nInteger overflows\nRace conditions\nLogic bugs\n\u00e2\u0080\u008bDespite the extensive review, we did not identify any security issue.\nThe protocol's logic and internals are relatively complex, and we believe the highest risk is in parsing and verifying proofs. To exploit such issues, however, an attacker would have to create a semantically correct script that somehow benefits them yet that passes verification when it does not ought to.\nRegarding s..."
    },
    {
      "heading": "Wallet#",
      "content": "Ergo's wallet functionality enables its users to store a secret on disk and recover it, initialising the wallet with a new seed when it's first used.\n\u00e2\u0080\u008bThis logic is mainly defined in ErgoWalletActor, and a key component regarding secrets' storage is JsonSecretStorage.\n\u00e2\u0080\u008bThe first time a wallet is created, the InitWallet command does the following:\nGenerate settings.walletSettings.seedStrengthBits random bits, as initial entropy. By default, 160 bits are generated.\n\n\nGenerate a BIP39 from the random bits generated, which can be seen as encoding the entropy bits. The standard BIP39 logic is used with an optional password.\n\n\nDerive a seed from the mnemonic using BIP39's PBKDF2-based derivation logic.\n\n\nEncrypt this seed to disk with AES-GCM, using a random nonce, and a key derives from the password using PBKDF2-HMAC-SHA256 with 128000 iterations, using a random salt.\nTo unlock a wallet already created, a user provides the password and the wallet attempts to decrypt the stored data.\n\u00e2\u0080\u008bA similar process as initialisation is performed to restore an existing account from a BIP39 passphrase, except that the wallet will derive the seed from the mnemonic instead of picking a random mnemonic.\n\u00e2\u0080\u008bThe two risks we identified here are:\nThe absence of checks on the password's length: since the password is sufficient to access the seed given the wallet's on-disk stored secret, the password should, in theory, have at least as much entropy as the mnemonic, and in practice, should be practically hard to crack. We thus recommend enforcing a minimal password length, for example of 16 characters.\n\n\nCopies of secret values (password, seed, and derive private keys) are likely to remain in memory after wallet software execution, an intrinsic limitation of garbage-collected languages such as Scala.\nAnother process or user sharing the same memory address space could potentially recover the secrets, and they could also appear in crash dumps. To the best of our knowledge, there is no effect..."
    },
    {
      "heading": "PoW validation#",
      "content": "\u00e2\u0080\u008bAfter previously reviewing the security of the Autolykos PoW, we performed another round of review focusing on its latest verification logic, and notably, the changes in the commit eb0f85a.\n\u00e2\u0080\u008bThe main relevant file is AutolykosPowScheme, and other important operations are for example implemented in\nHeadersProcessor and ModifierValidator.\n\u00e2\u0080\u008bWe checked that the implemented verification logic is consistent with that specified in the Autolykos specifications and that it is appropriately integrated into the block header validation logic.\n\u00e2\u0080\u008bWe believe the following points should be addressed:\nStricter validation of k and n: although the class enforces k<=32 (number of elements in the solution) and n<31 (log2 of the total number of elements), weak could still be created from the authorised parameters. The validate() function may therefore have additional validation that n and k are equal to the intended\nvalues.\n\n\nAssert that k and n are positive values, since currently negative ones (as Int's) would pass theassert` statements."
    }
  ],
  "qa_pairs": []
}