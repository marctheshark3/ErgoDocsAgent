{
  "title": "testnet.conf - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/node/testnet/testnetconf/",
  "summary": "This document describes the main sections and fields of the Ergo node configuration file for the Test Network. This configuration serves the need for non-breaking changes testing. ergo.networkType = \"testnet\" This setting defines the network type. For testing purposes, it's set to \"testnet\".",
  "keywords": [
    "document",
    "section",
    "field",
    "ergo",
    "node",
    "configuration",
    "file",
    "test",
    "network",
    "need",
    "change",
    "testing",
    "ergo.networktype",
    "testnet",
    "setting",
    "type",
    "purpose",
    "parameter",
    "ergo.chain",
    "blockchain",
    "vote",
    "ergo.wallet.secretstorage.secretdir",
    "directory",
    "wallet",
    "storage",
    "scorex.network",
    "rest",
    "transmission",
    "text",
    "http",
    "header",
    "transit"
  ],
  "sections": [
    {
      "heading": "Testnet Configuration#",
      "content": "This document describes the main sections and fields of the Ergo node configuration file for the Test Network. This configuration serves the need for non-breaking changes testing."
    },
    {
      "heading": "Network Type#",
      "content": "ergo.networkType = \"testnet\"\nThis setting defines the network type. For testing purposes, it's set to \"testnet\"."
    },
    {
      "heading": "Node Configuration#",
      "content": "ergo.node\nThis section contains parameters related to the node settings.\nheaderChainDiff defines the maximum allowed number of blocks difference between the current local chain and the network. If the difference exceeds this value, the node is considered unsynchronized.\ninternalMinersCount sets the number of internal miner threads. This helps reproduce real-world scenarios like having multiple GPU miners.\ninternalMinerPollingInterval is the polling interval for GPU miners.\nmaxTransactionCost sets the maximum cost for a transaction to be propagated across the network.\nadProofsSuffixLength determines the size of the suffix for dumping ADProofs during bootstrapping.\ncheckpoint is a mandatory checkpoint introduced due to some violations in the PaiNet."
    },
    {
      "heading": "Chain Configuration#",
      "content": "ergo.chain\nThis section includes parameters related to the blockchain.\nprotocolVersion sets the protocol version.\naddressPrefix is the prefix for network addresses. Reserved values include 0 (for mainnet) and 16 (for testnet).\ninitialDifficultyHex sets the initial difficulty for the network.\nepochLength defines the length of an epoch in difficulty recalculation. A value of 1 means difficulty is recalculated every block.\nblockInterval is the desired time interval between blocks.\nmonetary.minerRewardDelay sets the delay between when a block is mined and when the reward can be spent.\nvoting contains parameters related to the voting mechanism, such as the length of a voting epoch, the number of epochs for soft-fork voting, and activation epochs for a soft-fork after acceptance.\nreemission includes parameters related to the emission process. \ngenesisStateDigestHex is the Base16 representation of the genesis state roothash."
    },
    {
      "heading": "Voting Configuration#",
      "content": "ergo.voting\nThis section allows configuration of voting parameters."
    },
    {
      "heading": "Wallet Configuration#",
      "content": "ergo.wallet.secretStorage.secretDir\nSets the directory for the wallet's secret storage."
    },
    {
      "heading": "Network Configuration#",
      "content": "scorex.network\nThis section includes parameters related to the network settings.\nmagicBytes is a unique identifier for the network protocol. \nbindAddress sets the IP address and port number where the node will accept incoming connections. By default, it listens on all available network adapters.\nnodeName assigns a visible name to your node for other participants in the P2P network.\nknownPeers is a list of bootstrap nodes that your node will connect to upon initialization."
    },
    {
      "heading": "REST API Configuration#",
      "content": "scorex.restApi\nThis section allows the setting of the node's REST API parameters.\napiKeyHash is the hash of your API key. The API key protects the invocation of critical API methods.\nNote: Ensure to secure the transmission of the API key as it is transmitted as plain text in the HTTP header and can be intercepted during network transit!"
    }
  ],
  "qa_pairs": []
}