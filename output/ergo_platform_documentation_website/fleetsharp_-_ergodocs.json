{
  "title": "FleetSharp - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/stack/fleetsharp/",
  "summary": "FleetSharp is a C# library for building transactions on the Ergo blockchain, inspired by the excellent TypeScript fleet-sdk.",
  "keywords": [
    "fleetsharp",
    "library",
    "transaction",
    "ergo",
    "blockchain",
    "typescript",
    "fleet"
  ],
  "sections": [
    {
      "heading": "FleetSharp#",
      "content": "FleetSharp is a C# library for building transactions on the Ergo blockchain, inspired by the excellent TypeScript fleet-sdk."
    },
    {
      "heading": "Example that sends a simple ERG only transaction from the node's wallet#",
      "content": "var unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder> { new OutputBuilder(1000000000L, ErgoAddress.fromBase58(\"9iJyQKGYN4agM8UyJKjj8UoxWRa89dfDr2ptXYKEd7fJxLsYcuF\")) })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);"
    },
    {
      "heading": "Example that sends a transaction with some tokens from the node's wallet#",
      "content": "var unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder>\n    { \n        new OutputBuilder(1000000000L, ErgoAddress.fromBase58(\"9iJyQKGYN4agM8UyJKjj8UoxWRa89dfDr2ptXYKEd7fJxLsYcuF\"))\n            .AddToken(new TokenAmount<long>\n            {\n                tokenId = \"03faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04\",\n                amount = 10000L\n            })\n     })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);"
    },
    {
      "heading": "Example minting tokens#",
      "content": "var unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder>\n    { \n        new OutputBuilder(OutputBuilder.SAFE_MIN_BOX_VALUE, ErgoAddress.fromBase58(\"9iJyQKGYN4agM8UyJKjj8UoxWRa89dfDr2ptXYKEd7fJxLsYcuF\"))\n            .mintToken(new NewToken<long>\n            {\n                amount = 100,\n                name = \"FleetSharp test mint token #1\",\n                decimals = 0,\n                description = \"This is a test token minted with FleetSharp\"\n            })\n    })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);"
    },
    {
      "heading": "Interacting with a contract by ensuring input selection and setting registers (this is purely a fictional example to demonstrate what is possible)#",
      "content": "using static FleetSharp.Sigma.ConstantSerializer;\nusing static FleetSharp.Sigma.ISigmaCollection;\nusing static FleetSharp.Sigma.IPrimitiveSigmaType;\n\nvar unspentWalletBoxes = await node.GetAllUnspentBoxesInWallet(false);\nvar currentHeight = await node.GetCurrentHeight();\n\nvar spendBox = await node.GetBox(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nvar tx = new TransactionBuilder(currentHeight)\n    .from(unspentWalletBoxes)\n    .to(new List<OutputBuilder>\n    { \n        new OutputBuilder(OutputBuilder.SAFE_MIN_BOX_VALUE, ErgoAddress.fromErgoTree(spendBox.ergoTree, Network.Mainnet))\n            .SetAdditionalRegisters(new NonMandatoryRegisters\n            {\n                R4 = SConstant(SInt(47851)),/*integer*/\n                R5 = SConstant(SColl(SigmaTypeCode.Byte, FleetSharp.Tools.HexToBytes(\"e218ee38a9fa71a770968f2746d624f8\")))/*hex string as Coll[Byte]*/\n            })\n    })\n    .sendChangeTo(ErgoAddress.fromBase58(\"9gzGJworU5a4yrwLndgLoJa8N4MPMpn7p9mj8TShUTJ7wYhabKn\"))\n    .payMinFee()\n    .build().ToPlainObject();\n\nvar signedTx = await node.SignTransaction(tx);\nvar transactionId = await node.SubmitSignedTransaction(signedTx);"
    },
    {
      "heading": "Reading registers from a box#",
      "content": "using static FleetSharp.Sigma.ConstantSerializer;\nusing static FleetSharp.Sigma.ISigmaCollection;\nusing static FleetSharp.Sigma.IPrimitiveSigmaType;\n\nvar box = await node.GetBox(\"07b1276dd8207767c320a76a0a7ba9c76feb1f414c58cb9335810341a02236dc\");\n\nbyte[] borrower = SParse(box.additionalRegisters.R4);\nlong amount = SParse(box.additionalRegisters.R5);\nlong repayment = SParse(box.additionalRegisters.R6);\nint maturityLength = SParse(box.additionalRegisters.R7);"
    }
  ],
  "qa_pairs": []
}