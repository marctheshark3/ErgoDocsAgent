{
  "title": "Testing - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/data-model/structures/merkle/merkle-batch-testing/",
  "summary": "Testing Merkle Batch Proofs is crucial to ensure the correctness of their implementation in the Ergo blockchain. This section provides examples of how to write tests for Merkle Batch Proofs using both Rust (sigma-rust) and Scala (scrypto). These tests cover the creation, verification, serialization, and deserialization of batch Merkle proofs. In Rust, the sigma-rust library provides the necessary tools to create and test Merkle Batch Proofs. Below is a series of tests written using the Rust testing framework.",
  "keywords": [
    "test",
    "merkle",
    "batch",
    "proofs",
    "correctness",
    "implementation",
    "ergo",
    "blockchain",
    "section",
    "example",
    "rust",
    "sigma",
    "scala",
    "scrypto",
    "creation",
    "verification",
    "serialization",
    "deserialization",
    "proof",
    "library",
    "tool",
    "below",
    "series",
    "testing",
    "framework",
    "case",
    "scalatest",
    "tree",
    "generation",
    "functionality",
    "developer",
    "confidence",
    "application"
  ],
  "sections": [
    {
      "heading": "Testing Merkle Batch Proofs#",
      "content": "Testing Merkle Batch Proofs is crucial to ensure the correctness of their implementation in the Ergo blockchain. This section provides examples of how to write tests for Merkle Batch Proofs using both Rust (sigma-rust) and Scala (scrypto). These tests cover the creation, verification, serialization, and deserialization of batch Merkle proofs."
    },
    {
      "heading": "Rust (sigma-rust) Testing#",
      "content": "In Rust, the sigma-rust library provides the necessary tools to create and test Merkle Batch Proofs. Below is a series of tests written using the Rust testing framework.\n#[cfg(test)]\nmod tests {\n    use sigma_merkle_tree::merkletree::MerkleTree;\n    use sigma_merkle_tree::MerkleNode;\n    use sigma_merkle_tree::batchmerkleproof::BatchMerkleProof;\n    use sigma_ser::ScorexSerializable;\n    use blake2::Blake2b256;\n\n    #[test]\n    fn test_merkle_tree_creation() {\n        let data_1 = [1u8; 32];\n        let data_2 = [2u8; 32];\n        let data_3 = [3u8; 32];\n\n        let node_1 = MerkleNode::from_bytes(data_1);\n        let node_2 = MerkleNode::from_bytes(data_2);\n        let node_3 = MerkleNode::from_bytes(data_3);\n\n        let tree = MerkleTree::new(vec![node_1, node_2, node_3]);\n        assert!(tree.root_hash().is_some(), \"Merkle tree root hash should be generated\");\n    }\n\n    #[test]\n    fn test_batch_merkle_proof_generation() {\n        let data_1 = [1u8; 32];\n        let data_2 = [2u8; 32];\n        let data_3 = [3u8; 32];\n\n        let node_1 = MerkleNode::from_bytes(data_1);\n        let node_2 = MerkleNode::from_bytes(data_2);\n        let node_3 = MerkleNode::from_bytes(data_3);\n\n        let tree = MerkleTree::new(vec![node_1, node_2, node_3]);\n        let proof = tree.proof_by_indices(&[0, 2]).unwrap();\n\n        assert_eq!(proof.indices.len(), 2, \"Batch proof should include two indices\");\n    }\n\n    #[test]\n    fn test_batch_merkle_proof_verification() {\n        let data_1 = [1u8; 32];\n        let data_2 = [2u8; 32];\n        let data_3 = [3u8; 32];\n\n        let node_1 = MerkleNode::from_bytes(data_1);\n        let node_2 = MerkleNode::from_bytes(data_2);\n        let node_3 = MerkleNode::from_bytes(data_3);\n\n        let tree = MerkleTree::new(vec![node_1, node_2, node_3]);\n        let proof = tree.proof_by_indices(&[0, 2]).unwrap();\n\n        assert!(proof.valid(tree.root_hash().as_ref()), \"Merkle proof should be valid\");\n    }\n\n    #[test]\n    fn test_batch_merkle_p..."
    },
    {
      "heading": "Code References#",
      "content": "MerkleTree: merkletree.rs\nBatchMerkleProof: batchmerkleproof.rs\nSerialization Methods: scorex_serializable.rs"
    },
    {
      "heading": "Scala (scrypto) Testing#",
      "content": "For Scala, the scrypto library is used to test Merkle Batch Proofs. Below are the test cases using ScalaTest, covering tree creation, proof generation, verification, and serialization.\nimport org.scalatest.flatspec.AnyFlatSpec\nimport org.scalatest.matchers.should.Matchers\nimport scorex.crypto.authds.merkle.{MerkleTree, BatchMerkleProof}\nimport scorex.crypto.authds.merkle.serialization.BatchMerkleProofSerializer\nimport scorex.crypto.hash.{Blake2b256, Digest32}\nimport scorex.utils.Random\n\nclass MerkleBatchProofSpec extends AnyFlatSpec with Matchers {\n  implicit val hf = Blake2b256\n\n  \"Merkle Tree\" should \"be created correctly\" in {\n    val leafData = Seq.fill(3)(Random.randomBytes(32)) // Generate random leaf data\n    val tree = MerkleTree(leafData.map(Digest32 @@ _)) // Create a Merkle Tree\n\n    tree.rootHash should not be null\n  }\n\n  \"Batch Merkle Proof\" should \"be generated correctly\" in {\n    val leafData = Seq.fill(3)(Random.randomBytes(32)) // Generate random leaf data\n    val tree = MerkleTree(leafData.map(Digest32 @@ _)) // Create a Merkle Tree\n\n    val proof = tree.proofByIndices(Seq(0, 2)).get // Generate batch proof for elements at index 0 and 2\n    proof.indices.length shouldEqual 2\n  }\n\n  it should \"verify correctly\" in {\n    val leafData = Seq.fill(3)(Random.randomBytes(32)) // Generate random leaf data\n    val tree = MerkleTree(leafData.map(Digest32 @@ _)) // Create a Merkle Tree\n\n    val proof = tree.proofByIndices(Seq(0, 2)).get // Generate batch proof for elements at index 0 and 2\n    proof.valid(tree.rootHash) shouldBe true // Verify the proof against the tree's root hash\n  }\n\n  it should \"serialize and deserialize correctly\" in {\n    val leafData = Seq.fill(3)(Random.randomBytes(32)) // Generate random leaf data\n    val tree = MerkleTree(leafData.map(Digest32 @@ _)) // Create a Merkle Tree\n\n    val proof = tree.proofByIndices(Seq(0, 2)).get // Generate batch proof for elements at index 0 and 2\n    val serializer = new BatchMerkleProofSerializer[Dig..."
    },
    {
      "heading": "Code References#",
      "content": "MerkleTree: MerkleTree.scala\nBatchMerkleProof: BatchMerkleProof.scala\nBatchMerkleProofSerializer: BatchMerkleProofSerializer.scala"
    },
    {
      "heading": "Explanation:#",
      "content": "Merkle Tree Creation: The test generates random leaf data and creates a MerkleTree. This ensures that the tree is correctly constructed and the root hash is generated.\nBatch Merkle Proof Generation: The test creates a batch proof for selected elements (indices 0 and 2) of the Merkle Tree.\nProof Verification: The test verifies the validity of the generated batch proof against the Merkle root, ensuring the proof correctly represents the inclusion of those elements in the tree.\nSerialization and Deserialization: The test checks the ability to serialize a batch proof, then deserialize it back to its original form, confirming the integrity of the proof after these operations.\nThese tests collectively ensure that the core functionality of Merkle Batch Proofs in scrypto operates correctly, providing developers with confidence in using this library for cryptographic proofs in their applications."
    }
  ],
  "qa_pairs": []
}