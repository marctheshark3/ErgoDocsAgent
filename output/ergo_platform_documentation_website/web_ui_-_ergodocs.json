{
  "title": "Web UI - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/stack/mosaik/tutorial5/",
  "summary": "Welcome back to the Ergo Mosaik tutorial series! In the previous parts of this series, we already implemented a full-fledged Mosaik app for sending ERG that is working \nsmoothly when launched in a Mosaik executor like the Ergo Wallet app or the Mosaik desktop debugger. But there are people out there without Mosaik executing wallet apps, \nor people using the app but not being aware that they can use Mosaik dApps within their wallet app, or people preferring to have a clear separation\u00e2\u0080\u00a6 long story short, \nwe need to keep care of web browsers, as they are the go-to app for most users to visit an URL or host name. This tutorial will show you how to handle two use cases: Let\u00e2\u0080\u0099s focus on 1) first. Let\u00e2\u0080\u0099s go back to our tutorial app and start up the Spring Boot process.",
  "keywords": [
    "ergo",
    "mosaik",
    "series",
    "part",
    "executor",
    "wallet",
    "desktop",
    "debugger",
    "people",
    "dapps",
    "separation\u00e2\u0080",
    "story",
    "care",
    "browser",
    "user",
    "host",
    "name",
    "tutorial",
    "case",
    "let\u00e2\u0080\u0099s",
    "spring",
    "boot",
    "process",
    "http://localhost:8080/",
    "browser\u00e2\u0080",
    "json",
    "output",
    "trick",
    "html",
    "content",
    "hint",
    "open",
    "annotation",
    "getmainpage",
    "page",
    "directory",
    "\u00e2\u0080\u009cstatic\u00e2\u0080\u009d",
    "resource",
    "file",
    "\u00e2\u0080\u009cnobrowser.html\u00e2\u0080\u009d",
    "link",
    "\u00e2\u0080\u009dmosaik\u00e2\u0080\u009d",
    "addition",
    "mosaikappcontroller.kt",
    "message",
    "localhost:8080",
    "version",
    "example",
    "https://github.com/mrstahlfelge/mosaik-tutorial-series/tree/2dc2af35eae0592b7f9a1f252353be0585ddd57f",
    "platform",
    "application",
    "operating",
    "system",
    "architecture",
    "plugin",
    "website",
    "configuration",
    "site",
    "specifie",
    "change",
    "step",
    "word",
    "element",
    "placement",
    "view",
    "hierarchy",
    "button",
    "icon",
    "positioning",
    "color",
    "code",
    "side",
    "effort",
    "development",
    "repository",
    "https://github.com/mrstahlfelge/mosaik-kt-js",
    "release",
    "working",
    "readme",
    "infos",
    "hosting",
    "provider",
    "presence",
    "latter",
    "nobrowser.hml",
    "restart",
    "\u00e2\u0080\u009cclick",
    "me\u00e2\u0080\u009d",
    "title",
    "label",
    "screen",
    "navigatetoapp",
    "action",
    "entry",
    "route",
    "sendfund",
    "http://localhost:8080/#send",
    "browser\u00e2\u0080\u0099s",
    "history",
    "functionality",
    "send",
    "fund",
    "feature",
    "address",
    "chooser",
    "ergopay",
    "p2pk",
    "channel",
    "that\u00e2\u0080\u0099s",
    "endpoint",
    "data",
    "holder",
    "service",
    "controller",
    "executor\u00e2\u0080\u0099s",
    "simplicity",
    "boilerplate",
    "following",
    "connect",
    "usersessioncontroller",
    "usersessionservice",
    "project",
    "https://github.com/mrstahlfelge/mosaik-tutorial-series/tree/fba56d65e8c8a01821ecb1c56037bc5dfa8a652a/src/main/kotlin/com/example/ergomosaik/mosaikapp",
    "mosaikconfig.json",
    "connection",
    "won\u00e2\u0080\u0099t",
    "work",
    "device",
    "network",
    "you\u00e2\u0080\u0099ve",
    "framework",
    "developer",
    "shortcoming",
    "feedback",
    "discord",
    "support",
    "coding"
  ],
  "sections": [
    {
      "heading": "Part 5: The Web#",
      "content": "Welcome back to the Ergo Mosaik tutorial series! In the previous parts of this series, we already implemented a full-fledged Mosaik app for sending ERG that is working \nsmoothly when launched in a Mosaik executor like the Ergo Wallet app or the Mosaik desktop debugger. But there are people out there without Mosaik executing wallet apps, \nor people using the app but not being aware that they can use Mosaik dApps within their wallet app, or people preferring to have a clear separation\u00e2\u0080\u00a6 long story short, \nwe need to keep care of web browsers, as they are the go-to app for most users to visit an URL or host name.\nThis tutorial will show you how to handle two use cases:\nYou only want your Mosaik app to be used from within wallet apps. But you want web browsers visiting your app URL to show a nice site explaining the users to open the app URL from within a wallet app\nYou want your Mosaik app to run within a web browser\nLet\u00e2\u0080\u0099s focus on 1) first."
    },
    {
      "heading": "Show an informational page in web browsers visiting your Mosaik app#",
      "content": "Let\u00e2\u0080\u0099s go back to our tutorial app and start up the Spring Boot process. We know that our Mosaik app is living on http://localhost:8080/ now, \nand opening it in the desktop debugger works as great as expected. However, when we open up the app in a web browser\u00e2\u0080\u00a6we only get to see the json output that is our \nserialized app. Let\u00e2\u0080\u0099s do this better!\nThere is no way in getting web browsers understanding what a Mosaik app is, so we use a simple trick to achieve what we want: We move the Mosaik app away from the URL, \nand instead serve HTML content we want the user to see there. But we leave a hint for Mosaik executors where to find the actual Mosaik app.\nMoving the Mosaik app is easy. Let\u00e2\u0080\u0099s open MosaikAppController and change the annotation for getMainPage:\n@GetMapping(\"/firstapp\")\nfun getMainPage(): MosaikApp {...}\nWe also need to change the annotation for userEnteredName:\n@PostMapping(\"/firstapp/enteredName\")\nfun userEnteredName(@RequestBody values: Map<String, Any?>) = \u00e2\u0080\u00a6\nNow we need to define new content for the main page.\nCreate a new directory \u00e2\u0080\u009cstatic\u00e2\u0080\u009d in the src/main/resources directory and create a file \u00e2\u0080\u009cnobrowser.html\u00e2\u0080\u009d with the following content:\n<html>\n<head>\n   <link rel=\"mosaik\" href=\"firstapp\">\n</head>\n<body>\nPlease navigate to this page with a Mosaik executor application.\n</body>\n</html>\nThis is the content to be served. The important part for Mosaik executors is the link <rel=\u00e2\u0080\u009dMosaik\u00e2\u0080\u009d \u00e2\u0080\u00a6> tag, while all other content is for web browsers to show.\nWe tell Spring to serve this file for the main page with the following addition to MosaikAppController.kt.\n@GetMapping(\"/\")\nfun browserHintPage(): ModelAndView {\n   return ModelAndView(\"nobrowser.html\")\n}\nAnd that\u00e2\u0080\u0099s it! After restarting Spring, web browsers show a hint message when visiting localhost:8080, while Mosaik executors automatically load the linked Mosaik app.\nOf course, you don\u00e2\u0080\u0099t need to show an ugly hint message, but can instead serve your main web page here.\nYou can find this vers..."
    },
    {
      "heading": "Run your Mosaik app in web browsers#",
      "content": "Mosaik apps are platform agnostic and can be executed in wallet applications on different operating systems and architectures. There is also a Mosaik executor \navailable to run your apps from within a web browser. It is not a browser plugin, but instead an interactive website consisting only of a single html page, a \nsingle Js file and a configuration file that you host on your web site. The configuration file specifies where the web executor loads your Mosaik app from, so \nyou can reuse your Mosaik apps for the wallet apps here - in most cases without a change.\nBefore we do the necessary steps to run our apps with the web executor, some words on what to expect and what it is meant for:\nSince Mosaik is platform agnostic and meant to be used for wallet plugins, the Mosaik UI defines certain elements and its placements in a view hierarchy. There \nis no absolute way to define how elements look like, so it is expected that buttons or icons do not look the same when run with another executor. Hence, Mosaik \nwill never support pixel-pefect element positioning or coloring elements in all available colors. If you need this, Mosaik web is not for you, you need to \ndevelop your own web UI.\nHowever, Mosaik web is designed to behave the same as Mosaik executed in wallet applications. Your apps will behave the same without a code change on your side, and\nyou can publish your app as a web app with practically no effort regarding web development.\nNow let\u00e2\u0080\u0099s start using the web executor. You can find it on its Git repository https://github.com/MrStahlfelge/mosaik-kt-js \nunder releases as a zip file. In most cases, it is not needed that you build it yourself - this is only needed if you need the latest working version, or if you want to \ncustomize the colors. See the README on the repository for infos on this.\nDownload the latest zip file. It contains the three files mentioned above. You can host these files on any static web hosting provider so that it integrates well into \nyour e..."
    },
    {
      "heading": "Add ErgoPay connect wallet support#",
      "content": "Connecting a wallet with ErgoPay needs establishing a channel back from the wallet app to the Mosaik web executor, that\u00e2\u0080\u0099s why you need to add two new API endpoints \nand a data holder service to your Spring controllers and configure these two endpoints in web executor\u00e2\u0080\u0099s mosaikconfig.json.\nFor simplicity, the actual code is not shown here as it is some boilerplate. If you read through it, it is pretty easy to understand that it handles the following: \nEndpoint A is called continuously by the web executor\u00e2\u0080\u0099s connect wallet screen to check if the user already connected. Endpoint B is an ErgoPay endpoint connected \nfrom the wallet app when the user connects. It saves the user\u00e2\u0080\u0099s wallet address in a temporary map for endpoint A to pick up.\nThe two endpoints are implemented in UserSessionController and the temporary wallet address map is implemented in UserSessionService. Feel free to copy them as is \nin your own project. You can find them here:\nhttps://github.com/MrStahlfelge/mosaik-tutorial-series/tree/fba56d65e8c8a01821ecb1c56037bc5dfa8a652a/src/main/kotlin/com/example/ergomosaik/mosaikapp\nFor the web executor to know where to connect to, the mosaikconfig.json file needs to be edited as follows:\n{\n \"starturl\": \"firstapp\",\n \"chooseWalletErgoPay\": {\n   \"getAddressForSessionUrl\": \"http://127.0.0.1:8080/getUserAddress/#RID#\",\n   \"ergoPaySetAddressUrl\": \"ergopay://127.0.0.1:8080/setAddress/#RID#/#P2PK_ADDRESS#\"\n },\n \"routes\": {\n   \"send\": \"http://127.0.0.1:8080/sendfunds\"\n }\n}\nPlease note: Since we have a local address (127.0.0.1) here, the connection won\u00e2\u0080\u0099t work when using a mobile device to read the QR code. \nIt works when using a local network IP."
    },
    {
      "heading": "Conclusion#",
      "content": "In the five parts of this tutorial series, you\u00e2\u0080\u0099ve learned what Mosaik is about and how to write Mosaik apps that run as wallet application \nplugins and on the web. Mosaik is still a framework being worked on. To proceed, we need you, the developers, to jump on. What is not working \nwell yet, where do the existing view elements have shortcomings? Give us feedback by DM or on the Ergo discord in #dev-support\nHappy coding!"
    }
  ],
  "qa_pairs": []
}