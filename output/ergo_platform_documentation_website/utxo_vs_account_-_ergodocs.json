{
  "title": "UTxO vs Account - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/protocol/eutxo/accountveutxo/",
  "summary": "Ergo, similar to Bitcoin, employs the Unspent Transaction Outputs (UTXO) model instead of the Account model used in platforms like Ethereum. This documentation aims to provide a comprehensive understanding of the UTXO model, also known as the Box model, and highlight the advantages it brings. In the Account model, a balance is represented as a simple numerical value that increases or decreases with transactions. This parallels real-world transactions where your bank balance changes when money is added or deducted. Transactions to and from an account directly affect the blockchain balance.",
  "keywords": [
    "ergo",
    "bitcoin",
    "unspent",
    "transaction",
    "outputs",
    "utxo",
    "model",
    "account",
    "platform",
    "ethereum",
    "documentation",
    "understanding",
    "advantage",
    "balance",
    "value",
    "decrease",
    "world",
    "bank",
    "change",
    "money",
    "hand",
    "approach",
    "individual",
    "collection",
    "output",
    "portion",
    "bread",
    "dough",
    "address",
    "example",
    "dave",
    "unit",
    "charlie",
    "alice",
    "identity",
    "history",
    "blockchain",
    "benefit",
    "immutability",
    "security",
    "simplicity",
    "developer",
    "friendliness",
    "support",
    "chain",
    "protocols",
    "scalability",
    "optimization",
    "concurrent",
    "nature",
    "expressive",
    "power",
    "turing",
    "completeness",
    "limitation",
    "challenge",
    "protocol",
    "choice",
    "application"
  ],
  "sections": [
    {
      "heading": "UTXO vs Account: Understanding Ergo's Transaction Model#",
      "content": "Ergo, similar to Bitcoin, employs the Unspent Transaction Outputs (UTXO) model instead of the Account model used in platforms like Ethereum. This documentation aims to provide a comprehensive understanding of the UTXO model, also known as the Box model, and highlight the advantages it brings."
    },
    {
      "heading": "Account Balance and UTXO#",
      "content": "In the Account model, a balance is represented as a simple numerical value that increases or decreases with transactions. This parallels real-world transactions where your bank balance changes when money is added or deducted. Transactions to and from an account directly affect the blockchain balance.\nOn the other hand, the UTXO model, introduced by Bitcoin, takes a different approach. It considers an individual's balance as a collection of unspent outputs, analogous to having multiple portions of bread dough. The total balance is the sum of these portions, or UTXOs. These UTXOs can be split or merged before being transferred to another address. Let's illustrate this with an example:\nAlice has 100 units (100 ERG). She sends 75 units to Bob and keeps 25 units for herself.\nCharlie has 250 units. He transfers 150 units to Bob and retains 100 units.\nBob splits 20 units from the 150 units received from Charlie and merges them with the 75 units received from Alice. He then sends a total of 205 units to Dave, keeping 20 units for himself.\nDave now owns 205 units previously owned by Charlie, Alice, and Bob. In the UTXO model, these units can be split and merged, but they retain their original identity, unlike bread dough. The transaction history of these units can be traced back to when they were initially created."
    },
    {
      "heading": "Advantages of the eUTxO Model over Account-Based Blockchains#",
      "content": "The UTXO (Unspent Transaction Output) model used in Ergo offers several advantages over account-based blockchains like Ethereum. Let's compare the UTXO model to the account model to highlight these benefits:\nImmutability and Security:\n\nErgo's eUTxO model: Each UTXO is immutable and cannot be modified during a transaction. This enhances security and simplifies transaction verification.\nAccount Model: Account balances can be modified during a transaction, which introduces potential vulnerabilities and requires careful state management.\n\n\n\nSimplicity and Developer-Friendliness:\n\nErgo's eUTxO model: ErgoScript contracts in the UTXO model use a declarative programming paradigm. This simplifies development and reduces the likelihood of mistakes.\nAccount Model: The account model uses an imperative programming paradigm, which can be more challenging for developers and increase the risk of errors.\n\n\n\nSupport for Off-Chain Protocols:\n\nErgo's eUTxO model: Ergo's UTXO model provides better support for off-chain protocols like sidechains and the Lightning Network. Off-chain transaction creation reduces on-chain operations, improving scalability and network efficiency.\nAccount Model: Account-based blockchains have limited support for off-chain protocols, making it more challenging to scale and utilize layer-2 solutions effectively.\n\n\n\nScalability and Optimization:\n\nErgo's eUTxO model: The UTXO model allows for efficient off-chain transaction creation and verification. On-chain operations primarily focus on validation checks, reducing computational load and enhancing scalability.\nAccount Model: In account-based blockchains, most operations occur on-chain, leading to increased computational requirements and potentially limiting scalability.\n\n\n\nConcurrent and Distributed Nature:\n\nErgo's eUTxO model: Ergo's UTXO model aligns well with the concurrent and distributed nature of blockchains. The immutable transaction graph simplifies system design, reduces complexities, and enables light..."
    }
  ],
  "qa_pairs": []
}