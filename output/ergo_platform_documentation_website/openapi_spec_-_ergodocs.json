{
  "title": "OpenAPI Spec - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/node/swagger/openapi/",
  "summary": "Getting Started! API docs for Ergo Node. Scroll down for code samples, example requests and responses Base URLs: Code samples DEFAULT /utxo/getSnapshotsInfo Error  Code samples GET /blocks Get an array of header ids (hex encoded) for the given range of blockchain block heights. Returns a page of the whole list starting from offset and containing limit items.",
  "keywords": [
    "ergo",
    "node",
    "code",
    "sample",
    "example",
    "request",
    "response",
    "base",
    "default",
    "error",
    "/block",
    "array",
    "header",
    "range",
    "block",
    "height",
    "return",
    "page",
    "list",
    "limit",
    "item",
    "status",
    "post",
    "body",
    "parameter",
    "chainslice",
    "info",
    "/blocks",
    "headerids",
    "/blocks/{headerid}/transaction",
    "transaction",
    "signature",
    "merkle",
    "proof",
    "lastheaders/{count",
    "modifier",
    "popowheaderbyid/{headerid",
    "construct",
    "popow",
    "popowheaderbyheight/{height",
    "/nipopow",
    "proof/{minchainlength}/{suffixlength",
    "superchain",
    "length",
    "proof/{minchainlength}/{suffixlength}/{headerid",
    "suffix",
    "information",
    "/transaction",
    "pool",
    "network",
    "/transactions",
    "byte",
    "checks",
    "check",
    "input",
    "utxo",
    "identifier",
    "form",
    "head",
    "bytransactionid/{txid",
    "ergotree",
    "output",
    "utxostate",
    "poolhistogram",
    "histogram",
    "waittime",
    "n_trans",
    "sum(fee",
    "mempool",
    "bins\"+1",
    "element",
    "wait",
    "time",
    "imaxtime",
    "i+1)maxtime",
    "correspond",
    "maxtime",
    "getfee",
    "size",
    "minute",
    "byergotree",
    "bytokenid/{tokenid",
    "tokenid",
    "byregister",
    "register",
    "peer",
    "address",
    "message",
    "timestamp",
    "sync",
    "version",
    "track",
    "count",
    "detail",
    "/utils",
    "seed",
    "address/{address",
    "validity",
    "addresstoraw/{address",
    "convert",
    "representation",
    "curve",
    "point",
    "rawtoaddress/{pubkeyhex",
    "generate",
    "pubkey",
    "secp256k1",
    "ergotreetoaddress/{ergotreehex",
    "seed/{length",
    "bytes",
    "hash",
    "blake2b",
    "/wallet",
    "wallet",
    "restore",
    "phrase",
    "unlock",
    "lock",
    "fromheight",
    "updatechangeaddress",
    "update",
    "change",
    "derivekey",
    "path",
    "derivenextkey",
    "derive",
    "balance",
    "amount",
    "token",
    "asset",
    "transactionbyid",
    "transactionsbyscanid/{scanid",
    "scan",
    "unspent",
    "minconfirmations",
    "summary",
    "unconfirmed",
    "method",
    "sequence",
    "type",
    "payment",
    "issuance",
    "kind",
    "field",
    "equality",
    "ergs",
    "case",
    "sign",
    "secret",
    "dlog",
    "diffie",
    "hellman",
    "tuple",
    "datum",
    "data",
    "getprivatekey",
    "corresponding",
    "generatecommitment",
    "commitment",
    "extracthint",
    "/mining",
    "candidate",
    "candidatewithtxs",
    "rewardaddress",
    "read",
    "miner",
    "reward",
    "rewardpublickey",
    "solution",
    "submit",
    "/utxo",
    "batch",
    "byid/{boxid",
    "content",
    "base16",
    "encoding",
    "withpool",
    "byids",
    "byidbinary/{boxid",
    "snapshot",
    "genesis",
    "/script",
    "p2saddress",
    "sigma",
    "source",
    "p2shaddress",
    "addresstotree/{address",
    "script",
    "constant",
    "executewithcontext",
    "execute",
    "context",
    "deregister",
    "stop",
    "tracking",
    "listall",
    "unspentboxes/{scanid",
    "spentboxes/{scanid",
    "/scan",
    "p2srule",
    "create",
    "addbox",
    "database",
    "number",
    "/node",
    "shutdown",
    "shuts",
    "/emission",
    "at/{blockheight",
    "emission",
    "print",
    "indexedheight",
    "indexer",
    "/blockchain",
    "byid/{txid",
    "byindex/{txindex",
    "index",
    "byaddress",
    "retrieve",
    "byindex/{boxindex",
    "allof",
    "byid/{tokenid",
    "spending",
    "unsigned",
    "ergotransaction",
    "operation",
    "state",
    "encoded",
    "exponent",
    "generator",
    "group",
    "holds",
    "ergoaddress",
    "hold",
    "anyof",
    "format",
    "ergolikecontext",
    "algebraic",
    "proposition",
    "expression",
    "result",
    "reducetocrypto",
    "randomness",
    "step",
    "schnorr",
    "protocol",
    "prover",
    "hint",
    "trait",
    "none",
    "value",
    "oneof",
    "generation",
    "burn",
    "issue",
    "object",
    "component",
    "link",
    "section",
    "transformation",
    "extension",
    "vote",
    "work",
    "record",
    "pair",
    "string",
    "mining",
    "leaf",
    "container",
    "configuration",
    "system",
    "decision",
    "blockchain",
    "tree",
    "base-16",
    "fork",
    "digest",
    "definition"
  ],
  "sections": [
    {
      "heading": "Ergo Node API v5.0.15#",
      "content": "Getting Started!\nAPI docs for Ergo Node. Scroll down for code samples, example requests and responses\nBase URLs:\nhttp://213.239.193.208:9053"
    },
    {
      "heading": "Authentication#",
      "content": "API Key (ApiKeyAuth)\nParameter Name: api_key, in: header."
    },
    {
      "heading": "getSnapshotsInfo#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X DEFAULT /utxo/getSnapshotsInfo\n\n\n\nDEFAULT /utxo/getSnapshotsInfo HTTP/1.1\n\n\n\nfetch('/utxo/getSnapshotsInfo',\n{\n  method: 'DEFAULT'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nresult = RestClient.default '/utxo/getSnapshotsInfo',\n  params: {\n  }\n\np JSON.parse(result)\n\n\n\nimport requests\n\nr = requests.default('/utxo/getSnapshotsInfo')\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('DEFAULT','/utxo/getSnapshotsInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/getSnapshotsInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"DEFAULT\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"DEFAULT\", \"/utxo/getSnapshotsInfo\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\nDEFAULT /utxo/getSnapshotsInfo\nError"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\nThis operation does not require authentication"
    },
    {
      "heading": "getHeaderIds#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/blocks\", data)\n    req.Header = headers\n\n    client := &h..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nlimit\nquery\ninteger(int32)\nfalse\nThe number of items in list to return\n\n\noffset\nquery\ninteger(int32)\nfalse\nThe first block height to include in the list\nExample responses\n200 Response\njson\n\n\n[\n  \"8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\"\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of header ids\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of header ids\nName\nType\nRequired\nRestrictions\nDescription\nThis operation does not require authentication"
    },
    {
      "heading": "sendMinedBlock#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blocks \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blocks HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"blockTransactions\": {\n    \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactions\": [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e5..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nFullBlock\ntrue\nnone\nExample responses\ndefault Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBlock is valid\nNone\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getFullBlockAt#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/at/{blockHeight} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/at/{blockHeight} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/at/{blockHeight}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/at/{blockHeight}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/at/{blockHeight}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/at/{blockHeight}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/at/{blockHeight}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuf..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nblockHeight\npath\ninteger(int32)\ntrue\nHeight of a block to retrieve header ids\nExample responses\n200 Response\njson\n\n\n[\n  \"8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\"\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of header ids\nInline\n\n\n404\nNot Found\nBlocks at this height doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of header ids\nName\nType\nRequired\nRestrictions\nDescription\nThis operation does not require authentication"
    },
    {
      "heading": "getChainSlice#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/chainSlice \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/chainSlice HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/chainSlice',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/chainSlice',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/chainSlice', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/chainSlice', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/chainSlice\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http...."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nfromHeight\nquery\ninteger(int32)\nfalse\nMin header height (start of the range)\n\n\ntoHeight\nquery\ninteger(int32)\nfalse\nMax header height of the range (last header height then omitted)\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of headers\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of headers\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[BlockHeader]\nfalse\nnone\nArray of headers\n\n\n\u00c2\u00bb id\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb timestamp\nTimestamp(int64)\ntrue\nnone\nBasic timestamp definition\n\n\n\u00c2\u00bb version\nVersion(int8)\ntrue\nnone\nErgo blockchain protocol version\n\n\n\u00c2\u00bb adProofsRoot\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb stateRoot\nADDigest(base16)\ntrue\nnone\nBase16-encoded 33 byte digest - digest with extra byte with tree height\n\n\n\u00c2\u00bb transactionsRoot\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb nBits\ninteger(int64)\ntrue\nnone\nProof-of-work target (difficulty encoded)\n\n\n\u00c2\u00bb extensionHash\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb powSolutions\nPowSolutions\ntrue\nnone\nAn object containing all components of pow solution\n\n\n\u00c2\u00bb\u00c2\u00bb pk\nstring\ntrue\nnone\nBase16-encoded public key\n\n\n\u00c2\u00bb\u00c2\u00bb w\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb n\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb d\nnumber\ntrue\nnone\nnone\n\n\n\u00c2\u00bb height\ninteger(int32)\ntrue\nnone\nHeight of the block (genesis block height == 1)\n\n\n\u00c2\u00bb difficulty\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb parentId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb votes\nVotes(base16)\ntrue\nnone\nBase16-encoded votes for a soft-fork and parameters\n\n\n\u00c2\u00bb size\ninteger(int32)\nfalse\nnone\nSize of the header in bytes\n\n\n\u00c2\u00bb extensionId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb transactionsId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb adProofsId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\nThis operation does not require authentication"
    },
    {
      "heading": "getFullBlockById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/{headerId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/{headerId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/{headerId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http...."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nheaderId\npath\nstring\ntrue\nID of the header the wanted block\nExample responses\n200 Response\njson\n\n\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"blockTransactions\": {\n    \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactions\": [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBlock object representing the full block data\nFullBlock\n\n\n404\nNot Found\nBlock with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getFullBlockByIds#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blocks/headerIds \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blocks/headerIds HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '[\n  \"string\"\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blocks/headerIds',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blocks/headerIds',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blocks/headerIds', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blocks/headerIds', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/headerIds\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.cl..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\narray[string]\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"height\": 667,\n      \"difficulty\": \"9575989248\",\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"votes\": \"000000\",\n      \"size\": 0,\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    },\n    \"blockTransactions\": {\n      \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactions\": [\n        {\n          \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"inputs\": [\n            {\n              \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"spendingProof\": {\n                \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nFull blocks corresponding to ids provided\nInline\n\n\n404\nNot Found\nNo block exist for every id provided\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[FullBlock]\nfalse\nnone\n[Block with header and transactions]\n\n\n\u00c2\u00bb header\nBlockHeader\ntrue\nnone\nHeader of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.\n\n\n\u00c2\u00bb\u00c2\u00bb id\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb timestamp\nTimestamp(int64)\ntrue\nnone\nBasic timestamp definition\n\n\n\u00c2\u00bb\u00c2\u00bb version\nVersion(int8)\ntrue\nnone\nErgo blockchain protocol version\n\n\n\u00c2\u00bb\u00c2\u00bb adProofsRoot\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb stateRoot\nADDigest(base16)\ntrue\nnone\nBase16-encoded 33 byte digest - digest with extra byte with tree height\n\n\n\u00c2\u00bb\u00c2\u00bb transactionsRoot\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb nBits\ninteger(int64)\ntrue\nnone\nProof-of-work target (difficulty encoded)\n\n\n\u00c2\u00bb\u00c2\u00bb extensionHash\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb powSolutions\nPowSolutions\ntrue\nnone\nAn object containing all components of pow solution\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb pk\nstring\ntrue\nnone\nBase16-encoded public key\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb w\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb n\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb d\nnumber\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb height\ninteger(int32)\ntrue\nnone\nHeight of the block (genesis block height == 1)\n\n\n\u00c2\u00bb\u00c2\u00bb difficulty\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb parentId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb votes\nVotes(base16)\ntrue\nnone\nBase16-encoded votes for a soft-fork and parameters\n\n\n\u00c2\u00bb\u00c2\u00bb size\ninteger(int32)\nfalse\nnone\nSize of the header in bytes\n\n\n\u00c2\u00bb\u00c2\u00bb extensionId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb transactionsId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb adProofsId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb blockTransactions\nBlockTransactions\ntrue\nnone\nSection of a block which contains tra..."
    },
    {
      "heading": "getBlockHeaderById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/{headerId}/header \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/{headerId}/header HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}/header',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}/header',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}/header', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}/header', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/{headerId}/header\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nheaderId\npath\nstring\ntrue\nID of a wanted block header\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powSolutions\": {\n    \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n    \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n    \"n\": \"0000000000000000\",\n    \"d\": 987654321\n  },\n  \"height\": 667,\n  \"difficulty\": \"9575989248\",\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"size\": 0,\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBlock header object\nBlockHeader\n\n\n404\nNot Found\nBlock with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getBlockTransactionsById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/{headerId}/transactions \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/{headerId}/transactions HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}/transactions',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}/transactions',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}/transactions', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}/transactions', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/{headerId}/transactions\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"ap..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nheaderId\npath\nstring\ntrue\nID of a wanted block transactions\nExample responses\n200 Response\njson\n\n\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactions\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n  ],\n  \"size\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBlock transaction object\nBlockTransactions\n\n\n404\nNot Found\nBlock with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getProofForTx#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/{headerId}/proofFor/{txId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/{headerId}/proofFor/{txId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/{headerId}/proofFor/{txId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/{headerId}/proofFor/{txId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/{headerId}/proofFor/{txId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/{headerId}/proofFor/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/{headerId}/proofFor/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nheaderId\npath\nstring\ntrue\nID of a wanted block transactions\n\n\ntxId\npath\nstring\ntrue\nID of a wanted transaction\nExample responses\n200 Response\njson\n\n\n{\n  \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n  \"levels\": [\n    [\n      \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n      0\n    ]\n  ]\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nMerkle proof object\nMerkleProof\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getLastHeaders#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/lastHeaders/{count} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/lastHeaders/{count} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/lastHeaders/{count}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/lastHeaders/{count}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/lastHeaders/{count}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/lastHeaders/{count}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/lastHeaders/{count}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ncount\npath\nnumber\ntrue\na number of block headers to return\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of block headers\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[BlockHeader]\nfalse\nnone\n[Header of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.]\n\n\n\u00c2\u00bb id\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb timestamp\nTimestamp(int64)\ntrue\nnone\nBasic timestamp definition\n\n\n\u00c2\u00bb version\nVersion(int8)\ntrue\nnone\nErgo blockchain protocol version\n\n\n\u00c2\u00bb adProofsRoot\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb stateRoot\nADDigest(base16)\ntrue\nnone\nBase16-encoded 33 byte digest - digest with extra byte with tree height\n\n\n\u00c2\u00bb transactionsRoot\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb nBits\ninteger(int64)\ntrue\nnone\nProof-of-work target (difficulty encoded)\n\n\n\u00c2\u00bb extensionHash\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb powSolutions\nPowSolutions\ntrue\nnone\nAn object containing all components of pow solution\n\n\n\u00c2\u00bb\u00c2\u00bb pk\nstring\ntrue\nnone\nBase16-encoded public key\n\n\n\u00c2\u00bb\u00c2\u00bb w\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb n\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb d\nnumber\ntrue\nnone\nnone\n\n\n\u00c2\u00bb height\ninteger(int32)\ntrue\nnone\nHeight of the block (genesis block height == 1)\n\n\n\u00c2\u00bb difficulty\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb parentId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb votes\nVotes(base16)\ntrue\nnone\nBase16-encoded votes for a soft-fork and parameters\n\n\n\u00c2\u00bb size\ninteger(int32)\nfalse\nnone\nSize of the header in bytes\n\n\n\u00c2\u00bb extensionId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb transactionsId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb adProofsId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\nThis operation does not require authentication"
    },
    {
      "heading": "getModifierById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blocks/modifier/{modifierId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blocks/modifier/{modifierId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blocks/modifier/{modifierId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blocks/modifier/{modifierId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blocks/modifier/{modifierId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blocks/modifier/{modifierId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blocks/modifier/{modifierId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nmodifierId\npath\nstring\ntrue\nID of a wanted modifier\nExample responses\n404 Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nPersistent modifier object\nNone\n\n\n404\nNot Found\nModifier with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowHeaderById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /nipopow/popowHeaderById/{headerId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /nipopow/popowHeaderById/{headerId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/popowHeaderById/{headerId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/popowHeaderById/{headerId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/popowHeaderById/{headerId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/popowHeaderById/{headerId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/nipopow/popowHeaderById/{headerId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n  ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nheaderId\npath\nstring\ntrue\nID of wanted header\nExample responses\n200 Response\njson\n\n\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"interlinks\": [\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  ]\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nPoPow header object\nPopowHeader\n\n\n404\nNot Found\nHeader of extension of a corresponding block are not available\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowHeaderByHeight#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /nipopow/popowHeaderByHeight/{height} \\\n  -H 'Accept: application/json'\n\n\n\nGET /nipopow/popowHeaderByHeight/{height} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/popowHeaderByHeight/{height}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/popowHeaderByHeight/{height}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/popowHeaderByHeight/{height}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/popowHeaderByHeight/{height}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/nipopow/popowHeaderByHeight/{height}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[strin..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nheight\npath\ninteger(int32)\ntrue\nHeight of a wanted header\nExample responses\n200 Response\njson\n\n\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"interlinks\": [\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  ]\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nPoPow header object\nPopowHeader\n\n\n404\nNot Found\nHeader of extension of a corresponding block are not available\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowProof#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /nipopow/proof/{minChainLength}/{suffixLength} \\\n  -H 'Accept: application/json'\n\n\n\nGET /nipopow/proof/{minChainLength}/{suffixLength} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/proof/{minChainLength}/{suffixLength}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/proof/{minChainLength}/{suffixLength}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/proof/{minChainLength}/{suffixLength}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/proof/{minChainLength}/{suffixLength}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/nipopow/proof/{minChainLength}/{suffixLength}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"byte..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nminChainLength\npath\nnumber\ntrue\nMinimal superchain length\n\n\nsuffixLength\npath\nnumber\ntrue\nSuffix length\nExample responses\n200 Response\njson\n\n\n{\n  \"m\": 0,\n  \"k\": 0,\n  \"prefix\": [\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n  ],\n  \"suffixHead\": {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transac..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNipopow proof object\nNipopowProof\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getPopowProofByHeaderId#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /nipopow/proof/{minChainLength}/{suffixLength}/{headerId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSy..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nminChainLength\npath\nnumber\ntrue\nMinimal superchain length\n\n\nsuffixLength\npath\nnumber\ntrue\nSuffix length\n\n\nheaderId\npath\nstring\ntrue\nID of wanted header\nExample responses\n200 Response\njson\n\n\n{\n  \"m\": 0,\n  \"k\": 0,\n  \"prefix\": [\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n  ],\n  \"suffixHead\": {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e6..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNipopow proof object\nNipopowProof\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getNodeInfo#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /info \\\n  -H 'Accept: application/json'\n\n\n\nGET /info HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/info',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/info',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/info', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/info', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/info\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/info\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n   ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNode info object\nNodeInfo\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "sendTransaction#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequi..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nErgoTransaction\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nJSON with ID of the new transaction\nTransactionId\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "sendTransactionAsBytes#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions/bytes \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions/bytes HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/bytes',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nJSON with ID of the new transaction\nTransactionId\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "checkTransaction#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions/check \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions/check HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/check',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(b..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nErgoTransaction\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nJSON with ID of the new transaction\nTransactionId\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "checkTransactionAsBytes#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions/checkBytes \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions/checkBytes HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"02c9e71790399816b3e40b2207e9ade19a9b7fe0600186cfb8e2b115bfdb34b57f38cd3c9f2890d11720eb3bb993993f00ededf812a590d2993df094a7ca4f0213e4820e1ab831eed5dc5c72665396d3a01d2a12900f1c3ab77700b284ae24fa8e8f7754f86f2282c795db6b0b17df1c29cc0552e59d01f7d777c638a813333277271c2f8b4d99d01ff0e6ee8695697bdd5b568089395620d7198c6093ce8bc59b928611b1b12452c05addaa42f4beff6a0a6fe90000000380d0dbc3f40210090402040005c801040205c8010500040004000e2003faf2cb329f2e90d6d23b58d91bbb6c046aa143261cc21f52fbe2824bfcbf04d807d601e4c6a70408d602b2a5730000d603e4c6a70601d604e4c6a7080ed605e4c6a70505d606e4c6a70705d60795720399c1a7c1720299c17202c1a7eb027201d1ededededededededed93c27202c2a793e4c672020408720193e4c6720205059572039d9c72057eb272047301000573029d9c72057eb2720473030005730494e4c672020601720393e4c672020705720693e4c67202080e720493e4c67202090ec5a79572039072079c720672059272079c72067205917207730595ef720393b1db630872027306d801d608b2db63087202730700ed938c7208017308938c7208027206c8df35000508cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba0405c8a8c105010105dc8b020e0266608cdea8baf0380008cd030c8f9c4dc08f3c006fa85a47c9156dedbede000a8b764c6e374fd097e873ba04c8df350000c0843d1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304c8df350000\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/checkBytes',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nr..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nJSON with ID of the new transaction\nTransactionId\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactions#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/unconfirmed \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/unconfirmed HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nlimit\nquery\ninteger(int32)\nfalse\nThe number of items in list to return\n\n\noffset\nquery\ninteger(int32)\nfalse\nThe number of items in list to skip\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray with Ergo transactions\nTransactions\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "checkUnconfirmedTransaction#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X HEAD /transactions/unconfirmed/{txId}\n\n\n\nHEAD /transactions/unconfirmed/{txId} HTTP/1.1\n\n\n\nfetch('/transactions/unconfirmed/{txId}',\n{\n  method: 'HEAD'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nresult = RestClient.head '/transactions/unconfirmed/{txId}',\n  params: {\n  }\n\np JSON.parse(result)\n\n\n\nimport requests\n\nr = requests.head('/transactions/unconfirmed/{txId}')\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('HEAD','/transactions/unconfirmed/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"HEAD\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"HEAD\", \"/transactions/unconfirmed/{txId}\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\nHEAD /transactions/unconfirmed/{txId}\nCheck if given transaction is unconfirmed in pool"
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntxId\npath\nstring\ntrue\nID of a transaction in question"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nTransaction is in pool\nNone\n\n\n404\nNot Found\nTransaction is not in pool\nNone\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/byTransactionId/{txId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/unconfirmed/byTransactionId/{txId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/byTransactionId/{txId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/byTransactionId/{txId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/byTransactionId/{txId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/byTransactionId/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/byTransactionId/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntxId\npath\nstring\ntrue\nID of a transaction in question\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nErgo transaction\nErgoTransaction\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionsByErgoTree#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions/unconfirmed/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions/unconfirmed/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/transactions/unconfirmed/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/transactions/unconfirmed/byErgoTree', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/transactions/unconfirmed/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/byErgoTree\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBuffered..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\n\n\nlimit\nquery\ninteger(int32)\nfalse\nThe number of items in list to return\n\n\noffset\nquery\ninteger(int32)\nfalse\nThe number of items in list to skip\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nErgo transaction\nTransactions\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getFeeHistogram#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/poolHistogram \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/poolHistogram HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/poolHistogram',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/poolHistogram',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/poolHistogram', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/poolHistogram', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/poolHistogram\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbins\nquery\ninteger(int32)\nfalse\nThe number of bins in histogram\n\n\nmaxtime\nquery\ninteger(int64)\nfalse\nMaximal wait time in milliseconds\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"nTxns\": 0,\n    \"totalFee\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray with fee histogram\nFeeHistogram\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getRecommendedFee#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/getFee?waitTime=1&txSize=100 \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/getFee?waitTime=1&txSize=100 HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/getFee?waitTime=1&txSize=100',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/getFee',\n  params: {\n  'waitTime' => 'integer(int32)',\n'txSize' => 'integer(int32)'\n}, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/getFee', params={\n  'waitTime': '1',  'txSize': '100'\n}, headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/getFee', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/getFee?waitTime=1&txSize=100\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nwaitTime\nquery\ninteger(int32)\ntrue\nMaximum transaction wait time in minutes\n\n\ntxSize\nquery\ninteger(int32)\ntrue\nTransaction size\nExample responses\n200 Response\njson\n\n\n0"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nRecommended fee for the transaction (in nanoErgs)\ninteger\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getExpectedWaitTime#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/waitTime?fee=1&txSize=100 \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/waitTime?fee=1&txSize=100 HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/waitTime?fee=1&txSize=100',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/waitTime',\n  params: {\n  'fee' => 'integer(int32)',\n'txSize' => 'integer(int32)'\n}, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/waitTime', params={\n  'fee': '1',  'txSize': '100'\n}, headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/waitTime', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/waitTime?fee=1&txSize=100\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nfee\nquery\ninteger(int32)\ntrue\nTransaction fee (in nanoErgs)\n\n\ntxSize\nquery\ninteger(int32)\ntrue\nTransaction size\nExample responses\n200 Response\njson\n\n\n0"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nExpected wait time in milliseconds\ninteger\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionInputBoxById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/inputs/byBoxId/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/unconfirmed/inputs/byBoxId/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/inputs/byBoxId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/inputs/byBoxId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/inputs/byBoxId/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/inputs/byBoxId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/inputs/byBoxId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nID of an input box in question\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nUnspent Ergo Box that is to be used as Input in unconfirmed tx\nErgoTransactionOutput\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/outputs/byBoxId/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/unconfirmed/outputs/byBoxId/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byBoxId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/outputs/byBoxId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/outputs/byBoxId/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/outputs/byBoxId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/outputs/byBoxId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nID of an output box in question\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nUnspent Ergo Box that is to be created by unconfirmed tx\nErgoTransactionOutput\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByErgoTree#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions/unconfirmed/outputs/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions/unconfirmed/outputs/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/transactions/unconfirmed/outputs/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/transactions/unconfirmed/outputs/byErgoTree', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/transactions/unconfirmed/outputs/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/outputs/byErgoTree\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"PO..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\n\n\nlimit\nquery\ninteger(int32)\nfalse\nThe number of items in list to return\n\n\noffset\nquery\ninteger(int32)\nfalse\nThe number of items in list to skip\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nUnconfirmed transaction output boxes that correspond to given ErgoTree hex\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoTransactionOutput]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByTokenId#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /transactions/unconfirmed/outputs/byTokenId/{tokenId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /transactions/unconfirmed/outputs/byTokenId/{tokenId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byTokenId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/transactions/unconfirmed/outputs/byTokenId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/transactions/unconfirmed/outputs/byTokenId/{tokenId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/transactions/unconfirmed/outputs/byTokenId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/outputs/byTokenId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.to..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntokenId\npath\nstring\ntrue\nID of a token in question\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nUnspent Ergo Boxes that are to be created by unconfirmed tx and contain given token\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoTransactionOutput]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nThis operation does not require authentication"
    },
    {
      "heading": "getUnconfirmedTransactionOutputBoxesByRegisters#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /transactions/unconfirmed/outputs/byRegisters \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /transactions/unconfirmed/outputs/byRegisters HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/transactions/unconfirmed/outputs/byRegisters',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/transactions/unconfirmed/outputs/byRegisters',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/transactions/unconfirmed/outputs/byRegisters', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/transactions/unconfirmed/outputs/byRegisters', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/transactions/unconfirmed/outputs/byRegisters\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.s..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nRegisters\ntrue\nnone\n\n\nlimit\nquery\ninteger(int32)\nfalse\nThe number of items in list to return\n\n\noffset\nquery\ninteger(int32)\nfalse\nThe number of items in list to skip\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nUnconfirmed transaction output boxes that contain given registers\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoTransactionOutput]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nThis operation does not require authentication"
    },
    {
      "heading": "getAllPeers#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /peers/all \\\n  -H 'Accept: application/json'\n\n\n\nGET /peers/all HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/all',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/all',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/all', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/all', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/all\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/peers/all\", data)\n    req.Header = h..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of peer objects\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[Peer]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb address\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb restApiUrl\nstring\u00c2\u00a6null\nfalse\nnone\nnone\n\n\n\u00c2\u00bb name\nstring\u00c2\u00a6null\nfalse\nnone\nnone\n\n\n\u00c2\u00bb lastSeen\nTimestamp(int64)\nfalse\nnone\nBasic timestamp definition\n\n\n\u00c2\u00bb connectionType\nstring\u00c2\u00a6null\nfalse\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nconnectionType\nIncoming\n\n\nconnectionType\nOutgoing\nThis operation does not require authentication"
    },
    {
      "heading": "getConnectedPeers#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /peers/connected \\\n  -H 'Accept: application/json'\n\n\n\nGET /peers/connected HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/connected',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/connected',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/connected', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/connected', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/connected\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GE..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of peer objects\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[Peer]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb address\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb restApiUrl\nstring\u00c2\u00a6null\nfalse\nnone\nnone\n\n\n\u00c2\u00bb name\nstring\u00c2\u00a6null\nfalse\nnone\nnone\n\n\n\u00c2\u00bb lastSeen\nTimestamp(int64)\nfalse\nnone\nBasic timestamp definition\n\n\n\u00c2\u00bb connectionType\nstring\u00c2\u00a6null\nfalse\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nconnectionType\nIncoming\n\n\nconnectionType\nOutgoing\nThis operation does not require authentication"
    },
    {
      "heading": "connectToPeer#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /peers/connect \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /peers/connect HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"127.0.0.1:5673\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/peers/connect',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/peers/connect',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/peers/connect', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/peers/connect', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/connect\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\ndefault Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nAttempt to connect to the peer\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getBlacklistedPeers#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /peers/blacklisted \\\n  -H 'Accept: application/json'\n\n\n\nGET /peers/blacklisted HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/blacklisted',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/blacklisted',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/blacklisted', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/blacklisted', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/blacklisted\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http...."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nArray of the addresses\nBlacklistedPeers\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getPeersStatus#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /peers/status \\\n  -H 'Accept: application/json'\n\n\n\nGET /peers/status HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/status',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/status',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/status', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/status', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/status\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/peers/status\", ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNetwork status\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[PeersStatus]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb lastIncomingMessage\nTimestamp(int64)\ntrue\nnone\nBasic timestamp definition\n\n\n\u00c2\u00bb currentNetworkTime\nTimestamp(int64)\ntrue\nnone\nBasic timestamp definition\nThis operation does not require authentication"
    },
    {
      "heading": "getPeersSyncInfo#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /peers/syncInfo \\\n  -H 'Accept: application/json'\n\n\n\nGET /peers/syncInfo HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/syncInfo',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/syncInfo',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/syncInfo', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/syncInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/syncInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/p..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNetwork status\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[SyncInfo]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb address\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb mode\nPeerMode\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb state\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb verifyingTransactions\nboolean\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb fullBlocksSuffix\ninteger\ntrue\nnone\nnone\n\n\n\u00c2\u00bb version\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb status\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb height\ninteger\ntrue\nnone\nnone\nThis operation does not require authentication"
    },
    {
      "heading": "getPeersTrackInfo#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /peers/trackInfo \\\n  -H 'Accept: application/json'\n\n\n\nGET /peers/trackInfo HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/peers/trackInfo',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/peers/trackInfo',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/peers/trackInfo', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/peers/trackInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/peers/trackInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GE..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNetwork status\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[TrackInfo]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb invalidModifierApproxSize\ninteger\ntrue\nnone\nnone\n\n\n\u00c2\u00bb requested\nobject\ntrue\nnone\nCurrently requested modifiers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nRequestedInfoByModifierId\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nRequestedInfo\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb address\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb version\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb checks\ninteger\ntrue\nnone\nHow many times we checked for modifier delivery status\n\n\n\u00c2\u00bb received\nobject\ntrue\nnone\nReceived modifiers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nConnectedPeerByModifierId\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nConnectedPeer\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb address\nstring\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb version\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb lastMessage\nTimestamp(int64)\nfalse\nnone\nBasic timestamp definition\nThis operation does not require authentication"
    },
    {
      "heading": "getRandomSeed#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utils/seed \\\n  -H 'Accept: application/json'\n\n\n\nGET /utils/seed HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/seed',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/seed',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/seed', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/seed', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/seed\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/utils/seed\", data)\n    req.He..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBase16-encoded 32 byte seed\nstring\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "CheckAddressValidityWithGet#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utils/address/{address} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utils/address/{address} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/address/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/address/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/address/{address}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/address/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/address/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuf..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\naddress\npath\nErgoAddress\ntrue\naddress to check\nExample responses\n200 Response\njson\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"isValid\": true,\n  \"error\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nAddress validity with validation error\nAddressValidity\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "CheckAddressValidity#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /utils/address \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /utils/address HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utils/address',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utils/address',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utils/address', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utils/address', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/address\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\naddress to check\nExample responses\n200 Response\njson\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"isValid\": true,\n  \"error\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nAddress validity with validation error\nAddressValidity\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "AddressToRaw#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utils/addressToRaw/{address} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utils/addressToRaw/{address} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/addressToRaw/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/addressToRaw/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/addressToRaw/{address}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/addressToRaw/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/addressToRaw/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\naddress\npath\nErgoAddress\ntrue\naddress to extract public key from\nExample responses\n200 Response\njson\n\n\n\"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nhex-encoded public key (serialized secp256k1 element)\nstring\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "RawToAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utils/rawToAddress/{pubkeyHex} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utils/rawToAddress/{pubkeyHex} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/rawToAddress/{pubkeyHex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/rawToAddress/{pubkeyHex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/rawToAddress/{pubkeyHex}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/rawToAddress/{pubkeyHex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/rawToAddress/{pubkeyHex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"ap..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\npubkeyHex\npath\nstring\ntrue\npublic key to get address from\nExample responses\n200 Response\njson\n\n\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nPay-to-public-key (P2PK) address\nErgoAddress\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "ErgoTreeToAddressWithGet#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utils/ergoTreeToAddress/{ergoTreeHex} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utils/ergoTreeToAddress/{ergoTreeHex} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/ergoTreeToAddress/{ergoTreeHex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/ergoTreeToAddress/{ergoTreeHex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/ergoTreeToAddress/{ergoTreeHex}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/ergoTreeToAddress/{ergoTreeHex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/ergoTreeToAddress/{ergoTreeHex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := ma..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nergoTreeHex\npath\nstring\ntrue\nErgoTree to derive an address from\nExample responses\n200 Response\njson\n\n\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nErgo address\nErgoAddress\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "ErgoTreeToAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /utils/ergoTreeToAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /utils/ergoTreeToAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utils/ergoTreeToAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utils/ergoTreeToAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utils/ergoTreeToAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utils/ergoTreeToAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/ergoTreeToAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nSt..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nErgoTree hex to derive an address from\nExample responses\n200 Response\njson\n\n\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nErgo address\nErgoAddress\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getRandomSeedWithLength#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utils/seed/{length} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utils/seed/{length} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utils/seed/{length}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utils/seed/{length}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utils/seed/{length}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utils/seed/{length}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/seed/{length}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nlength\npath\nstring\ntrue\nseed length in bytes\nExample responses\n200 Response\njson\n\n\n\"\\\"83375fd213cfd7dfd984ce1901d62c302a1db53160b416674c8da1a393a6bbc316\\\"\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBase16-encoded N byte seed\nstring\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "hashBlake2b#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /utils/hash/blake2b \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /utils/hash/blake2b HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utils/hash/blake2b',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utils/hash/blake2b',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utils/hash/blake2b', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utils/hash/blake2b', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utils/hash/blake2b\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"\\\"6ed54addddaf10fe8fcda330bd443a57914fbce38a9fa27248b07e361cc76a41\\\"\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBase16-encoded 32 byte hash\nstring\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "walletInit#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/init \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/init HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"pass\": \"string\",\n  \"mnemonicPass\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/init',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/init',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/init', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/init', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/init\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nS..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nInitWallet\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"mnemonic\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nNew wallet with randomly generated seed created successfully\nInitWalletResult\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletRestore#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/restore \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/restore HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"pass\": \"string\",\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\",\n  \"usePre1627KeyDerivation\": true\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/restore',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/restore',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/restore', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/restore', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/restore\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new Buffe..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nRestoreWallet\ntrue\nnone\nExample responses\ndefault Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWallet restored successfully\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "checkSeed#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/check \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/check HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/check',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/check',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/check', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/check', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/check\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString i..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nCheckWallet\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"matched\": true\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWhether passphrase match wallet\nPassphraseMatch\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUnlock#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/unlock \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/unlock HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"pass\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/unlock',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/unlock',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/unlock', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/unlock', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/unlock\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer re..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nUnlockWallet\ntrue\nnone\nExample responses\ndefault Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWallet unlocked successfully\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletLock#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/lock \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/lock HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/lock',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/lock',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/lock', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/lock', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/lock\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"applicat..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWallet locked successfully\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletRescan#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/rescan \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/rescan HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"fromHeight\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/rescan',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/rescan',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/rescan', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/rescan', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/rescan\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer res..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nobject\nfalse\nnone\n\n\n\u00c2\u00bb fromHeight\nbody\ninteger(int32)\ntrue\nnone\nExample responses\ndefault Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWallet rescanned\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getWalletStatus#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/status \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/status HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/status',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/status',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/status', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/status', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/status\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []st..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWallet status\nWalletStatus\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUpdateChangeAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/updateChangeAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/updateChangeAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/updateChangeAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/updateChangeAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/updateChangeAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/updateChangeAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/updateChangeAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBu..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nErgoAddress\ntrue\nnone\nExample responses\ndefault Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nChange address updated successfully\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletDeriveKey#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/deriveKey \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/deriveKey HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"derivationPath\": \"m/1/2\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/deriveKey',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/deriveKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/deriveKey', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/deriveKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/deriveKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nStr..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nDeriveKey\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nResulted address\nDeriveKeyResult\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletDeriveNextKey#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/deriveNextKey \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/deriveNextKey HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/deriveNextKey',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/deriveNextKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/deriveNextKey', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/deriveNextKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/deriveNextKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    heade..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nResulted secret path and address\nDeriveNextKeyResult\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletBalances#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/balances \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/balances HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/balances',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/balances',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/balances', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/balances', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/balances\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nGet total amount of confirmed Ergo tokens and assets\nBalancesSnapshot\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactions#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/transactions \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/transactions HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transactions',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/transactions',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/transactions', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/transactions', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/transactions\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := m..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nminInclusionHeight\nquery\ninteger(int32)\nfalse\nMinimal tx inclusion height\n\n\nmaxInclusionHeight\nquery\ninteger(int32)\nfalse\nMaximal tx inclusion height\n\n\nminConfirmations\nquery\ninteger(int32)\nfalse\nMinimal confirmations number\n\n\nmaxConfirmations\nquery\ninteger(int32)\nfalse\nMaximal confirmations number\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"inclusionHeight\": 20998,\n    \"numConfirmations\": 20998,\n    \"scans\": [\n      1\n    ],\n    \"size\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nA list of all wallet-related transactions\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletTransaction]\nfalse\nnone\n[Transaction augmented with some useful information]\n\n\n\u00c2\u00bb id\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb inputs\n[ErgoTransactionInput]\ntrue\nnone\nTransaction inputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb spendingProof\nSpendingProof\ntrue\nnone\nSpending proof for transaction input\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb proofBytes\nSpendingProofBytes(base16)\ntrue\nnone\nBase16-encoded spending proofs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb extension\nobject\ntrue\nnone\nVariables to be put into context\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb dataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nTransaction data inputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb outputs\n[ErgoTransactionOutput]\ntrue\nnone\nTransaction outputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nHeight of a block the transaction was included in\n\n\n\u00c2\u00bb numConfirmations\ninteger(int32)\nt..."
    },
    {
      "heading": "walletGetTransaction#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/transactionById?id=string \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/transactionById?id=string HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transactionById?id=string',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/transactionById',\n  params: {\n  'id' => 'string'\n}, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/transactionById', params={\n  'id': 'string'\n}, headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/transactionById', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/transactionById?id=string\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nid\nquery\nstring\ntrue\nTransaction id\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"inclusionHeight\": 20998,\n    \"numConfirmations\": 20998,\n    \"scans\": [\n      1\n    ],\n    \"size\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nWallet-related transaction\nInline\n\n\n404\nNot Found\nTransaction with specified id not found in wallet\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletTransaction]\nfalse\nnone\n[Transaction augmented with some useful information]\n\n\n\u00c2\u00bb id\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb inputs\n[ErgoTransactionInput]\ntrue\nnone\nTransaction inputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb spendingProof\nSpendingProof\ntrue\nnone\nSpending proof for transaction input\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb proofBytes\nSpendingProofBytes(base16)\ntrue\nnone\nBase16-encoded spending proofs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb extension\nobject\ntrue\nnone\nVariables to be put into context\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb dataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nTransaction data inputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb outputs\n[ErgoTransactionOutput]\ntrue\nnone\nTransaction outputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nHeight of a block the transaction was included in\n\n\n\u00c2\u00bb numConfirmations\ninteger(int32)\nt..."
    },
    {
      "heading": "walletTransactionsByScanId#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/transactionsByScanId/{scanId} \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/transactionsByScanId/{scanId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transactionsByScanId/{scanId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/transactionsByScanId/{scanId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/transactionsByScanId/{scanId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/transactionsByScanId/{scanId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/transactionsByScanId/{scanId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.prin..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nscanId\npath\ninteger(int32)\ntrue\nidentifier of a scan\n\n\nminInclusionHeight\nquery\ninteger(int32)\nfalse\nMinimal tx inclusion height\n\n\nmaxInclusionHeight\nquery\ninteger(int32)\nfalse\nMaximal tx inclusion height\n\n\nminConfirmations\nquery\ninteger(int32)\nfalse\nMinimal confirmations number\n\n\nmaxConfirmations\nquery\ninteger(int32)\nfalse\nMaximal confirmations number\n\n\nincludeUnconfirmed\nquery\nboolean\nfalse\nInclude transactions from mempool\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n  ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nScan-related transactions\nInline\n\n\n404\nNot Found\nTransactions with related scan id not found in wallet\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletTransaction]\nfalse\nnone\n[Transaction augmented with some useful information]\n\n\n\u00c2\u00bb id\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb inputs\n[ErgoTransactionInput]\ntrue\nnone\nTransaction inputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb spendingProof\nSpendingProof\ntrue\nnone\nSpending proof for transaction input\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb proofBytes\nSpendingProofBytes(base16)\ntrue\nnone\nBase16-encoded spending proofs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb extension\nobject\ntrue\nnone\nVariables to be put into context\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb dataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nTransaction data inputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb outputs\n[ErgoTransactionOutput]\ntrue\nnone\nTransaction outputs\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nHeight of a block the transaction was included in\n\n\n\u00c2\u00bb numConfirmations\ninteger(int32)\nt..."
    },
    {
      "heading": "walletBoxes#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/boxes \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/boxes HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/boxes',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/boxes',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/boxes', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/boxes', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/boxes\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"a..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nminConfirmations\nquery\ninteger(int32)\nfalse\nMinimal number of confirmations, -1 means we consider unconfirmed\n\n\nmaxConfirmations\nquery\ninteger(int32)\nfalse\nMaximum number of confirmations, -1 means unlimited\n\n\nminInclusionHeight\nquery\ninteger(int32)\nfalse\nMinimal box inclusion height\n\n\nmaxInclusionHeight\nquery\ninteger(int32)\nfalse\nMaximum box inclusion height, -1 means unlimited\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nA list of all wallet-related boxes\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletBox]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb box\nErgoTransactionOutput\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb confirmationsNum\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nNumber of confirmations, if the box is included into the blockchain\n\n\n\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb creationTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb onchain\nboolean\ntrue\nnone\nA flag signalling whether the box is created on main chain\n\n\n\u00c2\u00bb spent\nboolean\ntrue\nnone\nA flag signalling whether the box was spent\n\n\n\u00c2\u00bb creationOutIndex\ninteger(int32)\ntrue\nnone\nAn index of a box in the creating transaction\n\n\n\u00c2\u00bb scans\n[integer]\ntrue\nnone\nScan identifiers the box relates to\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: a..."
    },
    {
      "heading": "walletBoxesCollect#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/boxes/collect \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/boxes/collect HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"targetAssets\": [\n    [\n      \"string\",\n      \"string\"\n    ]\n  ],\n  \"targetBalance\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/boxes/collect',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/boxes/collect',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/boxes/collect', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/boxes/collect', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/boxes/collect\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBuff..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nBoxesRequestHolder\ntrue\nThis API method recieves balance and assets, according to which, it's collecting result\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nA list of all collected boxes\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletBox]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb box\nErgoTransactionOutput\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb confirmationsNum\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nNumber of confirmations, if the box is included into the blockchain\n\n\n\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb creationTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb onchain\nboolean\ntrue\nnone\nA flag signalling whether the box is created on main chain\n\n\n\u00c2\u00bb spent\nboolean\ntrue\nnone\nA flag signalling whether the box was spent\n\n\n\u00c2\u00bb creationOutIndex\ninteger(int32)\ntrue\nnone\nAn index of a box in the creating transaction\n\n\n\u00c2\u00bb scans\n[integer]\ntrue\nnone\nScan identifiers the box relates to\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: a..."
    },
    {
      "heading": "walletUnspentBoxes#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/boxes/unspent \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/boxes/unspent HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/boxes/unspent',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/boxes/unspent',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/boxes/unspent', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/boxes/unspent', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/boxes/unspent\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    heade..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nminConfirmations\nquery\ninteger(int32)\nfalse\nMinimal number of confirmations, -1 means we consider unconfirmed\n\n\nmaxConfirmations\nquery\ninteger(int32)\nfalse\nMaximum number of confirmations, -1 means unlimited\n\n\nminInclusionHeight\nquery\ninteger(int32)\nfalse\nMinimal box inclusion height\n\n\nmaxInclusionHeight\nquery\ninteger(int32)\nfalse\nMaximum box inclusion height, -1 means unlimited\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nA list of unspent boxes\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletBox]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb box\nErgoTransactionOutput\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb confirmationsNum\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nNumber of confirmations, if the box is included into the blockchain\n\n\n\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb creationTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb onchain\nboolean\ntrue\nnone\nA flag signalling whether the box is created on main chain\n\n\n\u00c2\u00bb spent\nboolean\ntrue\nnone\nA flag signalling whether the box was spent\n\n\n\u00c2\u00bb creationOutIndex\ninteger(int32)\ntrue\nnone\nAn index of a box in the creating transaction\n\n\n\u00c2\u00bb scans\n[integer]\ntrue\nnone\nScan identifiers the box relates to\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: a..."
    },
    {
      "heading": "walletBalancesUnconfirmed#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/balances/withUnconfirmed \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/balances/withUnconfirmed HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/balances/withUnconfirmed',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/balances/withUnconfirmed',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/balances/withUnconfirmed', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/balances/withUnconfirmed', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/balances/withUnconfirmed\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackag..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nGet summary amount of confirmed plus unconfirmed Ergo tokens and assets\nBalancesSnapshot\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletAddresses#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /wallet/addresses \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /wallet/addresses HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/addresses',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/wallet/addresses',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/wallet/addresses', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/wallet/addresses', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/addresses\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nString with encoded wallet addresses\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoAddress]\nfalse\nnone\n[Encoded Ergo Address]\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactionGenerate#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/transaction/generate \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/transaction/generate HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transaction/generate',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/transaction/generate',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/transaction/generate', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/transact..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nRequestsHolder\ntrue\nThis API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \"assets\" and \"registers\" fields are not needed. For asset issuance request, \"registers\" field is not needed."
    },
    {
      "heading": "Detailed descriptions#",
      "content": "body: This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \"assets\" and \"registers\" fields are not needed. For asset issuance request, \"registers\" field is not needed.\nYou may specify boxes to spend by providing them in \"inputsRaw\". Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \"inputsRaw\" empty.\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62f..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nGenerated Ergo transaction\nErgoTransaction\n\n\n400\nBad Request\nBad transaction request\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletUnsignedTransactionGenerate#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/transaction/generateUnsigned \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/transaction/generateUnsigned HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transaction/generateUnsigned',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/transaction/generateUnsigned',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/transaction/generateUnsigned', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nRequestsHolder\ntrue\nThe same as /wallet/transaction/generate but generates unsigned transaction.\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extension\": {\n        \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ]\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nGenerated unsigned Ergo transaction\nUnsignedErgoTransaction\n\n\n400\nBad Request\nBad transaction request\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactionSign#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/transaction/sign \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/transaction/sign HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ],\n  \"hints\": {\n    \"secretHints\": [\n      {\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\": -51,\n              \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n            },\n            \"position\": \"0-1\",\n            \"type\": \"dlog\",\n            \"a\": \"02924d6274d1b..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nTransactionSigningRequest\ntrue\nWith this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported."
    },
    {
      "heading": "Detailed descriptions#",
      "content": "body: With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported.\nPlease note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \"inputsRaw\" and \"dataInputsRaw\" fields.\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nGenerated Ergo transaction\nErgoTransaction\n\n\n400\nBad Request\nBad transaction request\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletTransactionGenerateAndSend#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/transaction/send \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/transaction/send HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/transaction/send',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/transaction/send',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/transaction/send', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/transaction/send', array(\n  ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nRequestsHolder\ntrue\nSee description of /wallet/transaction/generate\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nIdentifier of an Ergo transaction generated\nTransactionId\n\n\n400\nBad Request\nBad transaction request\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletPaymentTransactionGenerateAndSend#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/payment/send \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/payment/send HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '[\n  {\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"value\": 1,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"registers\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    }\n  }\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/payment/send',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/payment/send',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/payment/send', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/payment/send', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\B..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nPaymentRequest\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nIdentifier of an Ergo transaction generated\nTransactionId\n\n\n400\nBad Request\nBad payment request\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "walletGetPrivateKey#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/getPrivateKey \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/getPrivateKey HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/wallet/getPrivateKey',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/wallet/getPrivateKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/wallet/getPrivateKey', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/wallet/getPrivateKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/wallet/getPrivateKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nErgoAddress\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nSuccessfully retrieved secret key\nDlogSecret\n\n\n404\nNot Found\nAddress not found in wallet database\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "generateCommitments#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/generateCommitments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/generateCommitments HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"secrets\": {\n    \"dlog\": [\n      \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n    ],\n    \"dht\": [\n      {\n        \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n        \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"u\": \"02a7955281885bf0f0ca4..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nGenerateCommitmentsRequest\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"secretHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ],\n  \"publicHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ]\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nTransaction-related hints\nTransactionHintsBag\n\n\n400\nBad Request\nError\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "extractHints#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /wallet/extractHints \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /wallet/extractHints HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  },\n  \"real\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b77..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nHintExtractionRequest\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"secretHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ],\n  \"publicHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ]\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nHints for the transaction\nTransactionHintsBag\n\n\n400\nBad Request\nError\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningRequestBlockCandidate#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /mining/candidate \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /mining/candidate HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/candidate',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/mining/candidate',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/mining/candidate', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/mining/candidate', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/mining/candidate\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nExternal candidate\nWorkMessage\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningRequestBlockCandidateWithMandatoryTransactions#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /mining/candidateWithTxs \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /mining/candidateWithTxs HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/candidateWithTxs',\n{\n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nTransactions\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"b\": 987654321,\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"proof\": {\n    \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n    \"txProofs\": [\n      {\n        \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n        \"levels\": [\n          [\n            \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n            0\n          ]\n        ]\n      }\n    ]\n  }\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nExternal candidate\nWorkMessage\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningReadMinerRewardAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /mining/rewardAddress \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /mining/rewardAddress HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/rewardAddress',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/mining/rewardAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/mining/rewardAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/mining/rewardAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/mining/rewardAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    heade..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nMiner Reward Script (in P2S format)\nRewardAddress\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningReadMinerRewardPubkey#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /mining/rewardPublicKey \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /mining/rewardPublicKey HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/rewardPublicKey',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/mining/rewardPublicKey',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/mining/rewardPublicKey', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/mining/rewardPublicKey', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/mining/rewardPublicKey\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main(..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nPublic key for miner rewards (as hex-encoded secp256k1 point)\nRewardPubKey\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "miningSubmitSolution#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /mining/solution \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /mining/solution HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n  \"n\": \"0000000000000000\",\n  \"d\": 987654321\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/mining/solution',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/mining/solution',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/mining/solution', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/mining/solution', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/mining/solution\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\nc..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nPowSolutions\ntrue\nnone\nExample responses\n400 Response\njson\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nSolution is valid\nNone\n\n\n400\nBad Request\nSolution is invalid\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getBoxesBinaryProof#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /utxo/getBoxesBinaryProof \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /utxo/getBoxesBinaryProof HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '[\n  \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/utxo/getBoxesBinaryProof',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/utxo/getBoxesBinaryProof',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/utxo/getBoxesBinaryProof', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utxo/getBoxesBinaryProof', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/getBoxesBinaryProof\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nTransactionBoxId\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nSerialized batch proof\nSerializedAdProof\n\n\n400\nBad Request\nProve error\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "getBoxById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utxo/byId/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utxo/byId/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/byId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/byId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/byId/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/byId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/byId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http...."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nID of a wanted box\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBox object\nErgoTransactionOutput\n\n\n404\nNot Found\nBox with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxByIdBinary#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utxo/byIdBinary/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utxo/byIdBinary/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/byIdBinary/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/byIdBinary/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/byIdBinary/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/byIdBinary/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/byIdBinary/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuf..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nID of a wanted box\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nJson containing box identifier and hex-encoded box bytes\nSerializedBox\n\n\n404\nNot Found\nBox with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxWithPoolById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utxo/withPool/byId/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utxo/withPool/byId/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/withPool/byId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/withPool/byId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/withPool/byId/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/withPool/byId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/withPool/byId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nID of a box to obtain\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBox object\nErgoTransactionOutput\n\n\n404\nNot Found\nBox with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxWithPoolByIds#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /utxo/withPool/byIds \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /utxo/withPool/byIds HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '[\n  \"string\"\n]';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/utxo/withPool/byIds',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/utxo/withPool/byIds',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/utxo/withPool/byIds', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/utxo/withPool/byIds', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/withPool/byIds\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.appen..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\narray[string]\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBox object\nInline\n\n\n404\nNot Found\nNo any box exists for every id provided\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoTransactionOutput]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxWithPoolByIdBinary#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utxo/withPool/byIdBinary/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /utxo/withPool/byIdBinary/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/withPool/byIdBinary/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/withPool/byIdBinary/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/withPool/byIdBinary/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/withPool/byIdBinary/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/withPool/byIdBinary/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\"..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nID of a wanted box\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nJson containing box identifier and hex-encoded box bytes\nSerializedBox\n\n\n404\nNot Found\nBox with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getSnapshotsInfo#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utxo/getSnapshotsInfo\n\n\n\nGET /utxo/getSnapshotsInfo HTTP/1.1\n\n\n\nfetch('/utxo/getSnapshotsInfo',\n{\n  method: 'GET'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nresult = RestClient.get '/utxo/getSnapshotsInfo',\n  params: {\n  }\n\np JSON.parse(result)\n\n\n\nimport requests\n\nr = requests.get('/utxo/getSnapshotsInfo')\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/getSnapshotsInfo', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/getSnapshotsInfo\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/utxo/getSnapshotsInfo\", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\nGET /utxo/getSnapshotsInfo\nGet information about locally stored UTXO snapshots"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nA list of saved snapshots\nNone\nThis operation does not require authentication"
    },
    {
      "heading": "genesisBoxes#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /utxo/genesis \\\n  -H 'Accept: application/json'\n\n\n\nGET /utxo/genesis HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/utxo/genesis',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/utxo/genesis',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/utxo/genesis', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/utxo/genesis', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/utxo/genesis\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest(\"GET\", \"/utxo/genesis\", ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nA list of all the genesis boxes\nInline\n\n\n404\nNot Found\nBox with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoTransactionOutput]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nThis operation does not require authentication"
    },
    {
      "heading": "scriptP2SAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /script/p2sAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /script/p2sAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"source\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/script/p2sAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/script/p2sAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/script/p2sAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/script/p2sAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/script/p2sAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nStr..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nSourceHolder\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nErgo address derived from source\nAddressHolder\n\n\n400\nBad Request\nBad source\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "scriptP2SHAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /script/p2shAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /script/p2shAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"source\": \"string\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/script/p2shAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/script/p2shAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/script/p2shAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/script/p2shAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/script/p2shAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nSourceHolder\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nP2SH address derived from source\nAddressHolder\n\n\n400\nBad Request\nBad source\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "addressToTree#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /script/addressToTree/{address} \\\n  -H 'Accept: application/json'\n\n\n\nGET /script/addressToTree/{address} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/script/addressToTree/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/script/addressToTree/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/script/addressToTree/{address}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/script/addressToTree/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/script/addressToTree/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"ap..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\naddress\npath\nErgoAddress\ntrue\naddress to get a script from\nExample responses\n200 Response\njson\n\n\n{\n  \"tree\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBase16-encoded ErgoTree (script)\nErgoTreeObject\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "addressToBytes#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /script/addressToBytes/{address} \\\n  -H 'Accept: application/json'\n\n\n\nGET /script/addressToBytes/{address} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/script/addressToBytes/{address}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/script/addressToBytes/{address}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/script/addressToBytes/{address}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/script/addressToBytes/{address}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/script/addressToBytes/{address}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []str..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\naddress\npath\nErgoAddress\ntrue\naddress to get a script from\nExample responses\n200 Response\njson\n\n\n{\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nBase16-encoded Sigma byte array constant which contains script bytes\nScriptBytes\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "executeWithContext#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /script/executeWithContext \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /script/executeWithContext HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"script\": \"string\",\n  \"namedConstants\": {},\n  \"context\": {\n    \"lastBlockUtxoRoot\": {\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"treeFlags\": 0,\n      \"keyLength\": 0,\n      \"valueLength\": 0\n    },\n    \"headers\": [\n      {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"height\": 667,\n        \"size\": 667,\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n    ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nExecuteScript\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"value\": {\n    \"op\": -45,\n    \"condition\": true\n  },\n  \"cost\": 10\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nResult of reduceToCrypto\nCryptoResult\n\n\n400\nBad Request\nCompiler error\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "registerScan#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /scan/register \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /scan/register HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"scanName\": \"Assets Tracker\",\n  \"walletInteraction\": \"off\",\n  \"removeOffchain\": true,\n  \"trackingRule\": {\n    \"predicate\": \"containsAsset\",\n    \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n  }\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/register',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/register',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/register', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/register', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/register\");\nHttpURLConnection con = (HttpURLConnection) obj.op..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nScanRequest\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"scanId\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nIdentifier of a scan generated\nScanId\n\n\n400\nBad Request\nBad request\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "deregisterScan#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /scan/deregister \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /scan/deregister HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"scanId\": 0\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/deregister',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/deregister',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/deregister', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/deregister', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/deregister\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nString..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nScanId\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"scanId\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nIdentifier of a scan removed\nScanId\n\n\n400\nBad Request\nNo scan found\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "listAllScans#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /scan/listAll \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /scan/listAll HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/listAll',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/scan/listAll',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/scan/listAll', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/scan/listAll', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/listAll\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"a..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nList of scans registered\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[Scan]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb scanName\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb scanId\ninteger\nfalse\nnone\nnone\n\n\n\u00c2\u00bb walletInteraction\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb removeOffchain\nboolean\nfalse\nnone\nnone\n\n\n\u00c2\u00bb trackingRule\nScanningPredicate\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb predicate\nstring\ntrue\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nwalletInteraction\noff\n\n\nwalletInteraction\nshared\n\n\nwalletInteraction\nforced\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "listUnspentScans#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /scan/unspentBoxes/{scanId} \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /scan/unspentBoxes/{scanId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/unspentBoxes/{scanId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/scan/unspentBoxes/{scanId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/scan/unspentBoxes/{scanId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/scan/unspentBoxes/{scanId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/unspentBoxes/{scanId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nscanId\npath\ninteger(int32)\ntrue\nidentifier of a scan\n\n\nminConfirmations\nquery\ninteger(int32)\nfalse\nMinimal number of confirmations, -1 means we consider unconfirmed\n\n\nmaxConfirmations\nquery\ninteger(int32)\nfalse\nMaximum number of confirmations, -1 means unlimited\n\n\nminInclusionHeight\nquery\ninteger(int32)\nfalse\nMinimal box inclusion height\n\n\nmaxInclusionHeight\nquery\ninteger(int32)\nfalse\nMaximum box inclusion height, -1 means unlimited\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nList of unspent boxes\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletBox]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb box\nErgoTransactionOutput\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb confirmationsNum\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nNumber of confirmations, if the box is included into the blockchain\n\n\n\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb creationTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb onchain\nboolean\ntrue\nnone\nA flag signalling whether the box is created on main chain\n\n\n\u00c2\u00bb spent\nboolean\ntrue\nnone\nA flag signalling whether the box was spent\n\n\n\u00c2\u00bb creationOutIndex\ninteger(int32)\ntrue\nnone\nAn index of a box in the creating transaction\n\n\n\u00c2\u00bb scans\n[integer]\ntrue\nnone\nScan identifiers the box relates to\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: a..."
    },
    {
      "heading": "listSpentScans#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /scan/spentBoxes/{scanId} \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nGET /scan/spentBoxes/{scanId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/spentBoxes/{scanId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.get '/scan/spentBoxes/{scanId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.get('/scan/spentBoxes/{scanId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/scan/spentBoxes/{scanId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/spentBoxes/{scanId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nscanId\npath\ninteger(int32)\ntrue\nidentifier of a scan\n\n\nminConfirmations\nquery\ninteger(int32)\nfalse\nMinimal number of confirmations, -1 means we consider unconfirmed\n\n\nmaxConfirmations\nquery\ninteger(int32)\nfalse\nMaximum number of confirmations, -1 means unlimited\n\n\nminInclusionHeight\nquery\ninteger(int32)\nfalse\nMinimal box inclusion height\n\n\nmaxInclusionHeight\nquery\ninteger(int32)\nfalse\nMaximum box inclusion height, -1 means unlimited\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"box\": {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    },\n    \"confirmationsNum\": 147,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"onchain\": true,\n    \"spent\": false,\n    \"creationOutIndex\": 2,\n    \"scans\": [\n      1\n    ]\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nList of spent boxes\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[WalletBox]\nfalse\nnone\nnone\n\n\n\u00c2\u00bb box\nErgoTransactionOutput\ntrue\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb confirmationsNum\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nNumber of confirmations, if the box is included into the blockchain\n\n\n\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb creationTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingTransaction\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb onchain\nboolean\ntrue\nnone\nA flag signalling whether the box is created on main chain\n\n\n\u00c2\u00bb spent\nboolean\ntrue\nnone\nA flag signalling whether the box was spent\n\n\n\u00c2\u00bb creationOutIndex\ninteger(int32)\ntrue\nnone\nAn index of a box in the creating transaction\n\n\n\u00c2\u00bb scans\n[integer]\ntrue\nnone\nScan identifiers the box relates to\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: a..."
    },
    {
      "heading": "scanStopTracking#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /scan/stopTracking \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /scan/stopTracking HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"scanId\": 0,\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/stopTracking',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/stopTracking',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/stopTracking', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/stopTracking', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/stopTracking\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nScanIdBoxId\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"scanId\": 0,\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nThe box is not tracked anymore\nScanIdBoxId\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "scriptP2SRule#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /scan/p2sRule \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /scan/p2sRule HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '4MQyML64GnzMxZgm';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/p2sRule',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/p2sRule',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/p2sRule', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/scan/p2sRule', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/scan/p2sRule\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"scanId\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nId of custom scan generated and registered\nScanId\n\n\n400\nBad Request\nBad source\nApiError\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "addBox#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /scan/addBox \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /scan/addBox HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '{\n  \"scanIds\": [\n    0\n  ],\n  \"box\": {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/scan/addBox',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/scan/addBox',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/scan/addBox', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\nt..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nScanIdsBox\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\""
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nIt the box is added successfully, then its id is returned\nTransactionId\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "nodeShutdown#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /node/shutdown \\\n  -H 'Accept: application/json' \\\n  -H 'api_key: API_KEY'\n\n\n\nPOST /node/shutdown HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json',\n  'api_key':'API_KEY'\n};\n\nfetch('/node/shutdown',\n{\n  method: 'POST',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'api_key' => 'API_KEY'\n}\n\nresult = RestClient.post '/node/shutdown',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json',\n  'api_key': 'API_KEY'\n}\n\nr = requests.post('/node/shutdown', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'api_key' => 'API_KEY',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/node/shutdown', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/node/shutdown\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nThe node will be shut down in 5 seconds\nNone\n\n\ndefault\nDefault\nError\nApiError\nTo perform this operation, you must be authenticated by means of one of the following methods:\nApiKeyAuth ( Scopes: api_key )"
    },
    {
      "heading": "emissionAt#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /emission/at/{blockHeight} \\\n  -H 'Accept: application/json'\n\n\n\nGET /emission/at/{blockHeight} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/emission/at/{blockHeight}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/emission/at/{blockHeight}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/emission/at/{blockHeight}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/emission/at/{blockHeight}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/emission/at/{blockHeight}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data :..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nblockHeight\npath\ninteger(int32)\ntrue\nHeight to get emission data for\nExample responses\n200 Response\njson\n\n\n{\n  \"minerReward\": 0,\n  \"totalCoinsIssued\": 0,\n  \"totalRemainCoins\": 0,\n  \"reemitted\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nEmission data\nEmissionInfo\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "emissionScripts#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /emission/scripts \\\n  -H 'Accept: application/json'\n\n\n\nGET /emission/scripts HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/emission/scripts',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/emission/scripts',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/emission/scripts', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/emission/scripts', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/emission/scripts\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequ..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nEmission-related scripts\nEmissionScripts\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getIndexedHeight#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/indexedHeight \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/indexedHeight HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/indexedHeight',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/indexedHeight',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/indexedHeight', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/indexedHeight', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/indexedHeight\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nheight of the indexer and full height\nInline"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb indexedHeight\ninteger\nfalse\nnone\nnumber of blocks indexed\n\n\n\u00c2\u00bb fullHeight\ninteger\nfalse\nnone\nnumber of all known blocks\nThis operation does not require authentication"
    },
    {
      "heading": "getTxById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/transaction/byId/{txId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/transaction/byId/{txId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/byId/{txId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/transaction/byId/{txId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/transaction/byId/{txId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/transaction/byId/{txId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/transaction/byId/{txId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n  ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntxId\npath\nstring\ntrue\nid of the wanted transaction\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"index\": 3,\n  \"globalIndex\": 3565445,\n  \"size\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\ntransaction with wanted id\nIndexedErgoTransaction\n\n\n404\nNot Found\nTransaction with this id doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getTxByIndex#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/transaction/byIndex/{txIndex} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/transaction/byIndex/{txIndex} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/byIndex/{txIndex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/transaction/byIndex/{txIndex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/transaction/byIndex/{txIndex}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/transaction/byIndex/{txIndex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/transaction/byIndex/{txIndex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main()..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntxIndex\npath\nnumber\ntrue\nindex of the wanted transaction\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"index\": 3,\n  \"globalIndex\": 3565445,\n  \"size\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\ntransaction with wanted index\nIndexedErgoTransaction\n\n\n404\nNot Found\nTransaction with this index doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getTxsByAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blockchain/transaction/byAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blockchain/transaction/byAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/byAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/transaction/byAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/transaction/byAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/transaction/byAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/transaction/byAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream(..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"items\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"inclusionHeight\": 20998,\n      \"numConfirmations\": 20998,\n      \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 15241..."
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\ntransactions associated with wanted address\nInline\n\n\n404\nNot Found\nNo transactions found for wanted address\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb items\n[IndexedErgoTransaction]\nfalse\nnone\nArray of transactions\n\n\n\u00c2\u00bb\u00c2\u00bb id\nTransactionId(base16)\ntrue\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb inputs\n[ErgoTransactionInput]\ntrue\nnone\nTransaction inputs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spendingProof\nSpendingProof\ntrue\nnone\nSpending proof for transaction input\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb proofBytes\nSpendingProofBytes(base16)\ntrue\nnone\nBase16-encoded spending proofs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb extension\nobject\ntrue\nnone\nVariables to be put into context\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb dataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nTransaction data inputs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb outputs\n[ErgoTransactionOutput]\ntrue\nnone\nTransaction outputs\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\n\n\n\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nHeight of a block the transaction was included in\n\n\n\u00c2\u00bb\u00c2\u00bb numConfirmation..."
    },
    {
      "heading": "getTxRange#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/transaction/range \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/transaction/range HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/transaction/range',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/transaction/range',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/transaction/range', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/transaction/range', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/transaction/range\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\nExample responses\n200 Response\njson\n\n\n[\n  \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\ntransactions ids in wanted range\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of transaction ids\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ModifierId]\nfalse\nnone\nArray of transaction ids\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/box/byId/{boxId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/box/byId/{boxId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byId/{boxId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/byId/{boxId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/byId/{boxId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/byId/{boxId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/byId/{boxId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n   ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxId\npath\nstring\ntrue\nid of the wanted box\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"globalIndex\": 83927\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nbox with wanted id\nIndexedErgoBox\n\n\n404\nNot Found\nNo box found with wanted id\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxByIndex#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/box/byIndex/{boxIndex} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/box/byIndex/{boxIndex} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byIndex/{boxIndex}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/byIndex/{boxIndex}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/byIndex/{boxIndex}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/byIndex/{boxIndex}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/byIndex/{boxIndex}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nboxIndex\npath\nnumber\ntrue\nindex of the wanted box\nExample responses\n200 Response\njson\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"globalIndex\": 83927\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nbox with wanted index\nIndexedErgoBox\n\n\n404\nNot Found\nBox with this index doesn't exist\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByTokenId#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/box/byTokenId/{tokenId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/box/byTokenId/{tokenId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byTokenId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/byTokenId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/byTokenId/{tokenId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/byTokenId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/byTokenId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n  ..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntokenId\npath\nModifierId\ntrue\nid of the token\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\nExample responses\n200 Response\njson\n\n\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nboxes associated with wanted token\nInline\n\n\n404\nNot Found\nNo boxes found for wanted token\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb items\n[allOf]\nfalse\nnone\nArray of boxes\nallOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nErgoTransactionOutput\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spentTransactionId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain\ncontinued\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb total\ninteger\nfalse\nnone\nTotal number of retreived boxes\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByTokenIdUnspent#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/box/unspent/byTokenId/{tokenId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/box/unspent/byTokenId/{tokenId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/unspent/byTokenId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/unspent/byTokenId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/unspent/byTokenId/{tokenId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/unspent/byTokenId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/unspent/byTokenId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntokenId\npath\nModifierId\ntrue\nid of the token\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\n\n\nsortDirection\nquery\nstring\nfalse\ndesc = new boxes first ; asc = old boxes first\n\n\nincludeUnconfirmed\nquery\nboolean\nfalse\nif true include unconfirmed transactions from mempool\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"globalIndex\": 83927\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nunspent boxes associated with wanted token\nInline\n\n\n404\nNot Found\nNo unspent boxes found for wanted token\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of boxes\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[allOf]\nfalse\nnone\nArray of boxes\nallOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nErgoTransactionOutput\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb\u00c2\u00bb spentTransactionId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByAddress#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blockchain/box/byAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blockchain/box/byAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/byAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/byAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/byAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/byAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new Strin..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nboxes associated with wanted address\nInline\n\n\n404\nNot Found\nNo boxes found for wanted address\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb items\n[allOf]\nfalse\nnone\nArray of boxes\nallOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nErgoTransactionOutput\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spentTransactionId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain\ncontinued\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb total\ninteger\nfalse\nnone\nTotal number of retreived boxes\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByAddressUnspent#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blockchain/box/unspent/byAddress \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blockchain/box/unspent/byAddress HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/unspent/byAddress',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/unspent/byAddress',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/unspent/byAddress', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/unspent/byAddress', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/unspent/byAddress\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream(..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\n\n\nsortDirection\nquery\nstring\nfalse\ndesc = new boxes first ; asc = old boxes first\n\n\nincludeUnconfirmed\nquery\nboolean\nfalse\nif true include unconfirmed transactions from mempool\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n[\n  {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0,\n    \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n    \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"spendingHeight\": 147,\n    \"inclusionHeight\": 147,\n    \"globalIndex\": 83927\n  }\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nunspent boxes associated with wanted address\nInline\n\n\n404\nNot Found\nNo unspent boxes found for wanted address\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of boxes\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[allOf]\nfalse\nnone\nArray of boxes\nallOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nErgoTransactionOutput\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb\u00c2\u00bb spentTransactionId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxRange#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/box/range \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/box/range HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/range',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/box/range',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/box/range', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/box/range', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/range\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []string{\"application/json\"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\nExample responses\n200 Response\njson\n\n\n[\n  \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nbox ids in wanted range\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nArray of box ids\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ModifierId]\nfalse\nnone\nArray of box ids\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByErgoTree#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blockchain/box/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blockchain/box/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/byErgoTree', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/byErgoTree\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInput..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nboxes with wanted ergotree\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb items\n[allOf]\nfalse\nnone\nArray of boxes\nallOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nErgoTransactionOutput\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spentTransactionId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain\ncontinued\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb total\ninteger\nfalse\nnone\nTotal number of retreived boxes\nThis operation does not require authentication"
    },
    {
      "heading": "getBoxesByErgoTreeUnspent#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blockchain/box/unspent/byErgoTree \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blockchain/box/unspent/byErgoTree HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/box/unspent/byErgoTree',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/box/unspent/byErgoTree',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/box/unspent/byErgoTree', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/box/unspent/byErgoTree', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/box/unspent/byErgoTree\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = ne..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\noffset\nquery\ninteger(int32)\nfalse\namount of elements to skip from the start\n\n\nlimit\nquery\ninteger(int32)\nfalse\namount of elements to retrieve\n\n\nsortDirection\nquery\nstring\nfalse\ndesc = new boxes first ; asc = old boxes first\n\n\nincludeUnconfirmed\nquery\nboolean\nfalse\nif true include unconfirmed transactions from mempool\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"items\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0,\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingHeight\": 147,\n      \"inclusionHeight\": 147,\n      \"globalIndex\": 83927\n    }\n  ],\n  \"total\": 0\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nunspent boxes with wanted ergotree\nInline\n\n\n404\nNot Found\nNo unspent box found with wanted ergotree\nApiError\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb items\n[allOf]\nfalse\nnone\nArray of boxes\nallOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nErgoTransactionOutput\nfalse\nnone\nnone\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb boxId\nTransactionBoxId(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb value\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb ergoTree\nErgoTree(base16)\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb creationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb assets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nDigest32(base16)\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\ntrue\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb additionalProperties\nSValue(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb transactionId\nTransactionId(base16)\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb index\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb\u00c2\u00bb anonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spentTransactionId\nModifierId(base16)\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain\ncontinued\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb total\ninteger\nfalse\nnone\nTotal number of retreived boxes\nThis operation does not require authentication"
    },
    {
      "heading": "getTokenById#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X GET /blockchain/token/byId/{tokenId} \\\n  -H 'Accept: application/json'\n\n\n\nGET /blockchain/token/byId/{tokenId} HTTP/1.1\n\nAccept: application/json\n\n\n\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/token/byId/{tokenId}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/blockchain/token/byId/{tokenId}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/blockchain/token/byId/{tokenId}', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/blockchain/token/byId/{tokenId}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/token/byId/{tokenId}\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n\n\npackage main\n\nimport (\n       \"bytes\"\n       \"net/http\"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        \"Accept\": []str..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\ntokenId\npath\nstring\ntrue\nid of the wanted token\nExample responses\n200 Response\njson\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"boxId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"emissionAmount\": 3500000,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"decimals\": 8\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\ntoken with wanted id\nIndexedToken\n\n\n404\nNot Found\nNo token found with wanted id\nApiError\n\n\ndefault\nDefault\nError\nApiError\nThis operation does not require authentication"
    },
    {
      "heading": "getAddressBalanceTotal#",
      "content": "Code samples\nshellhttpjavascriptrubypythonphpjavago\n\n\n## You can also use wget\ncurl -X POST /blockchain/balance \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n\n\nPOST /blockchain/balance HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n\n\nconst inputBody = '\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/blockchain/balance',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n\n\nrequire 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/blockchain/balance',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n\n\nimport requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/blockchain/balance', headers = headers)\n\nprint(r.json())\n\n\n\n<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/blockchain/balance', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n\n\nURL obj = new URL(\"/blockchain/balance\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine..."
    },
    {
      "heading": "Parameters",
      "content": "Name\nIn\nType\nRequired\nDescription\n\n\n\n\nbody\nbody\nstring\ntrue\nnone\nExample responses\n200 Response\njson\n\n\n{\n  \"confirmed\": {\n    \"nanoErgs\": 0,\n    \"tokens\": [\n      {\n        \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 0,\n        \"decimals\": 0,\n        \"name\": \"string\"\n      }\n    ]\n  },\n  \"unconfirmed\": {\n    \"nanoErgs\": 0,\n    \"tokens\": [\n      {\n        \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 0,\n        \"decimals\": 0,\n        \"name\": \"string\"\n      }\n    ]\n  }\n}"
    },
    {
      "heading": "Responses",
      "content": "Status\nMeaning\nDescription\nSchema\n\n\n\n\n200\nOK\nbalance information\nInline\n\n\ndefault\nDefault\nError\nApiError"
    },
    {
      "heading": "Response Schema",
      "content": "Status Code 200\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb confirmed\nBalanceInfo\nfalse\nnone\nBalance information\n\n\n\u00c2\u00bb\u00c2\u00bb nanoErgs\ninteger(int64)\ntrue\nnone\nBalance of nanoERGs\n\n\n\u00c2\u00bb\u00c2\u00bb tokens\n[object]\ntrue\nnone\nBalance of tokens\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb tokenId\nModifierId(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb amount\ninteger(int64)\nfalse\nnone\nAmount of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb decimals\ninteger\nfalse\nnone\nNumber of decimals of the token\n\n\n\u00c2\u00bb\u00c2\u00bb\u00c2\u00bb name\nstring\nfalse\nnone\nName of the token, if any\n\n\n\u00c2\u00bb unconfirmed\nBalanceInfo\nfalse\nnone\nBalance information\nThis operation does not require authentication"
    },
    {
      "heading": "ErgoTransactionInput#",
      "content": "json\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingProof\": {\n    \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"extension\": {\n      \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n    }\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nboxId\nTransactionBoxId\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\nspendingProof\nSpendingProof\ntrue\nnone\nSpending proof for transaction input"
    },
    {
      "heading": "ErgoTransactionDataInput#",
      "content": "json\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nboxId\nTransactionBoxId\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long"
    },
    {
      "heading": "ErgoTransactionUnsignedInput#",
      "content": "json\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extension\": {\n    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nboxId\nTransactionBoxId\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\nextension\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb additionalProperties\nSValue\nfalse\nnone\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "SpendingProof#",
      "content": "json\n\n\n{\n  \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extension\": {\n    \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n  }\n}\nSpending proof for transaction input"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nproofBytes\nSpendingProofBytes\ntrue\nnone\nBase16-encoded spending proofs\n\n\nextension\nobject\ntrue\nnone\nVariables to be put into context\n\n\n\u00c2\u00bb additionalProperties\nSValue\nfalse\nnone\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "SerializedBox#",
      "content": "json\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nboxId\nTransactionBoxId\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\nbytes\nHexString\ntrue\nnone\nBase16-encoded bytes"
    },
    {
      "heading": "ScriptBytes#",
      "content": "json\n\n\n{\n  \"bytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nbytes\nHexString\ntrue\nnone\nBase16-encoded bytes"
    },
    {
      "heading": "SnapshotsInfo#",
      "content": "json\n\n\n{\n  \"availableManifests\": [\n    {}\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\navailableManifests\n[object]\ntrue\nnone\nMap of available manifests height -> manifestId"
    },
    {
      "heading": "ErgoTransactionOutput#",
      "content": "json\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nboxId\nTransactionBoxId\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long\n\n\nvalue\ninteger(int64)\ntrue\nnone\nAmount of Ergo token\n\n\nergoTree\nErgoTree\ntrue\nnone\nBase16-encoded ergo tree bytes\n\n\ncreationHeight\ninteger(int32)\ntrue\nnone\nHeight the output was created at\n\n\nassets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\nadditionalRegisters\nRegisters\ntrue\nnone\nErgo box registers\n\n\ntransactionId\nTransactionId\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\nindex\ninteger(int32)\nfalse\nnone\nIndex in the transaction outputs"
    },
    {
      "heading": "WalletBox#",
      "content": "json\n\n\n{\n  \"box\": {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  },\n  \"confirmationsNum\": 147,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"creationTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingTransaction\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"onchain\": true,\n  \"spent\": false,\n  \"creationOutIndex\": 2,\n  \"scans\": [\n    1\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nbox\nErgoTransactionOutput\ntrue\nnone\nnone\n\n\nconfirmationsNum\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nNumber of confirmations, if the box is included into the blockchain\n\n\naddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\ncreationTransaction\nModifierId\ntrue\nnone\nTransaction which created the box\n\n\nspendingTransaction\nModifierId\ntrue\nnone\nTransaction which created the box\n\n\nspendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\ninclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\nonchain\nboolean\ntrue\nnone\nA flag signalling whether the box is created on main chain\n\n\nspent\nboolean\ntrue\nnone\nA flag signalling whether the box was spent\n\n\ncreationOutIndex\ninteger(int32)\ntrue\nnone\nAn index of a box in the creating transaction\n\n\nscans\n[integer]\ntrue\nnone\nScan identifiers the box relates to"
    },
    {
      "heading": "BalanceInfo#",
      "content": "json\n\n\n{\n  \"nanoErgs\": 0,\n  \"tokens\": [\n    {\n      \"tokenId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 0,\n      \"decimals\": 0,\n      \"name\": \"string\"\n    }\n  ]\n}\nBalance information"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nnanoErgs\ninteger(int64)\ntrue\nnone\nBalance of nanoERGs\n\n\ntokens\n[object]\ntrue\nnone\nBalance of tokens\n\n\n\u00c2\u00bb tokenId\nModifierId\nfalse\nnone\nIdentifier of the token\n\n\n\u00c2\u00bb amount\ninteger(int64)\nfalse\nnone\nAmount of the token\n\n\n\u00c2\u00bb decimals\ninteger\nfalse\nnone\nNumber of decimals of the token\n\n\n\u00c2\u00bb name\nstring\nfalse\nnone\nName of the token, if any"
    },
    {
      "heading": "IndexedErgoBox#",
      "content": "json\n\n\n{\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"value\": 147,\n  \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n  \"creationHeight\": 9149,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"additionalRegisters\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  },\n  \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"index\": 0,\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"spentTransactionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"spendingHeight\": 147,\n  \"inclusionHeight\": 147,\n  \"globalIndex\": 83927\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nErgoTransactionOutput\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nBox indexed with extra information\n\n\n\u00c2\u00bb address\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\n\u00c2\u00bb spentTransactionId\nModifierId\ntrue\nnone\nTransaction which spent the box\n\n\n\u00c2\u00bb spendingHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height the box was spent at\n\n\n\u00c2\u00bb inclusionHeight\ninteger(int32)\ntrue\nnone\nThe height the transaction containing the box was included in a block at\n\n\n\u00c2\u00bb globalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the output in the blockchain"
    },
    {
      "heading": "IndexedToken#",
      "content": "json\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"boxId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"emissionAmount\": 3500000,\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"decimals\": 8\n}\nToken indexed with extra information"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nModifierId\ntrue\nnone\nId of the token\n\n\nboxId\nModifierId\ntrue\nnone\nId of the box that created the token\n\n\nemissionAmount\ninteger(int64)\ntrue\nnone\nThe total supply of the token\n\n\nname\nstring\ntrue\nnone\nThe name of the token\n\n\ndescription\nstring\ntrue\nnone\nThe description of the token\n\n\ndecimals\ninteger(int32)\ntrue\nnone\nThe number of decimals the token supports"
    },
    {
      "heading": "UnsignedErgoTransaction#",
      "content": "json\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extension\": {\n        \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ]\n}\nUnsigned Ergo transaction"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nTransactionId\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\ninputs\n[ErgoTransactionUnsignedInput]\ntrue\nnone\nUnsigned inputs of the transaction\n\n\ndataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nData inputs of the transaction\n\n\noutputs\n[ErgoTransactionOutput]\ntrue\nnone\nOutputs of the transaction"
    },
    {
      "heading": "ErgoTransaction#",
      "content": "json\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"size\": 0\n}\nErgoTransaction is an atomic operation which changes UTXO state."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nTransactionId\nfalse\nnone\nId of the transaction\n\n\ninputs\n[ErgoTransactionInput]\ntrue\nnone\nInputs, that will be spent by this transaction\n\n\ndataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nRead-only inputs, that are not going to be spent by transaction.\n\n\noutputs\n[ErgoTransactionOutput]\ntrue\nnone\nOutputs of the transaction, i.e. box candidates to be created by this transaction.\n\n\nsize\ninteger(int32)\nfalse\nnone\nSize of ErgoTransaction in bytes"
    },
    {
      "heading": "WalletTransaction#",
      "content": "json\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"scans\": [\n    1\n  ],\n  \"size\": 0\n}\nTransaction augmented with some useful information"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nTransactionId\nfalse\nnone\nBase16-encoded transaction id bytes\n\n\ninputs\n[ErgoTransactionInput]\ntrue\nnone\nTransaction inputs\n\n\ndataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nTransaction data inputs\n\n\noutputs\n[ErgoTransactionOutput]\ntrue\nnone\nTransaction outputs\n\n\ninclusionHeight\ninteger(int32)\ntrue\nnone\nHeight of a block the transaction was included in\n\n\nnumConfirmations\ninteger(int32)\ntrue\nnone\nNumber of transaction confirmations\n\n\nscans\n[integer]\ntrue\nnone\nScan identifiers the transaction relates to\n\n\nsize\ninteger(int32)\nfalse\nnone\nSize in bytes"
    },
    {
      "heading": "IndexedErgoTransaction#",
      "content": "json\n\n\n{\n  \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ],\n  \"inclusionHeight\": 20998,\n  \"numConfirmations\": 20998,\n  \"blockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"index\": 3,\n  \"globalIndex\": 3565445,\n  \"size\": 0\n}\nTransaction indexed with extra information"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nTransactionId\ntrue\nnone\nBase16-encoded transaction id bytes\n\n\ninputs\n[ErgoTransactionInput]\ntrue\nnone\nTransaction inputs\n\n\ndataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nTransaction data inputs\n\n\noutputs\n[ErgoTransactionOutput]\ntrue\nnone\nTransaction outputs\n\n\ninclusionHeight\ninteger(int32)\ntrue\nnone\nHeight of a block the transaction was included in\n\n\nnumConfirmations\ninteger(int32)\ntrue\nnone\nNumber of transaction confirmations\n\n\nblockId\nModifierId\ntrue\nnone\nId of the block the transaction was included in\n\n\ntimestamp\nTimestamp\ntrue\nnone\nBasic timestamp definition\n\n\nindex\ninteger(int32)\ntrue\nnone\nindex of the transaction in the block it was included in\n\n\nglobalIndex\ninteger(int64)\ntrue\nnone\nGlobal index of the transaction in the blockchain\n\n\nsize\ninteger(int32)\ntrue\nnone\nSize in bytes"
    },
    {
      "heading": "ErgoAddress#",
      "content": "json\n\n\n\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\nEncoded Ergo Address"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring\nfalse\nnone\nEncoded Ergo Address"
    },
    {
      "heading": "RewardAddress#",
      "content": "json\n\n\n{\n  \"rewardAddress\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nrewardAddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address"
    },
    {
      "heading": "RewardPubKey#",
      "content": "json\n\n\n{\n  \"rewardPubkey\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nrewardPubkey\nstring\ntrue\nnone\nnone"
    },
    {
      "heading": "DlogSecret#",
      "content": "json\n\n\n\"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\nHex-encoded big-endian 256-bits secret exponent"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring\nfalse\nnone\nHex-encoded big-endian 256-bits secret exponent"
    },
    {
      "heading": "DhtSecret#",
      "content": "json\n\n\n{\n  \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n  \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n  \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n  \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n  \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\nHex-encoded big-endian 256-bits secret exponent \"w\" along with generators \"g\", \"h\", and group elements \"u\", \"v\", such as g^w = u, h^w = v"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nsecret\nstring\ntrue\nnone\nHex-encoded big-endian 256-bits secret exponent\n\n\ng\nstring\ntrue\nnone\nHex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)\n\n\nh\nstring\ntrue\nnone\nHex-encoded \"h\" generator for the Diffie-Hellman tuple (secp256k1 curve point)\n\n\nu\nstring\ntrue\nnone\nHex-encoded \"u\" group element of the Diffie-Hellman tuple (secp256k1 curve point)\n\n\nv\nstring\ntrue\nnone\nHex-encoded \"v\" group element of the Diffie-Hellman tuple (secp256k1 curve point)"
    },
    {
      "heading": "TransactionSigningRequest#",
      "content": "json\n\n\n{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ],\n  \"hints\": {\n    \"secretHints\": [\n      {\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\": -51,\n              \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n            },\n            \"position\": \"0-1\",\n            \"type\": \"dlog\",\n            \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n            \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n          }\n        ]\n      }\n    ],\n    \"publicHints\": [\n      {\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\": -51,\n      ..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntx\nUnsignedErgoTransaction\ntrue\nnone\nUnsigned transaction to sign\n\n\ninputsRaw\n[string]\nfalse\nnone\nOptional list of inputs to be used in serialized form\n\n\ndataInputsRaw\n[string]\nfalse\nnone\nOptional list of inputs to be used in serialized form\n\n\nhints\nTransactionHintsBag\nfalse\nnone\nOptional list of hints used for signing\n\n\nsecrets\nobject\ntrue\nnone\nSecrets used for signing\n\n\n\u00c2\u00bb dlog\n[DlogSecret]\nfalse\nnone\nSequence of secret exponents (DLOG secrets)\n\n\n\u00c2\u00bb dht\n[DhtSecret]\nfalse\nnone\nSequence of secret Diffie-Hellman tuple exponents (DHT secrets)"
    },
    {
      "heading": "AddressHolder#",
      "content": "json\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}\nHolds encoded ErgoAddress"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address"
    },
    {
      "heading": "BoxesRequestHolder#",
      "content": "json\n\n\n{\n  \"targetAssets\": [\n    [\n      \"string\",\n      \"string\"\n    ]\n  ],\n  \"targetBalance\": 0\n}\nHolds request for wallet boxes"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntargetAssets\n[array]\ntrue\nnone\nTarget assets\nanyOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nstring\nfalse\nnone\nTokenId\nor\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\ninteger\nfalse\nnone\nLong\ncontinued\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntargetBalance\ninteger(int64)\ntrue\nnone\nTarget balance"
    },
    {
      "heading": "RequestsHolder#",
      "content": "json\n\n\n{\n  \"requests\": [\n    {\n      \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n      \"value\": 1,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"registers\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      }\n    }\n  ],\n  \"fee\": 1000000,\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}\nHolds many transaction requests and transaction fee"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nrequests\n[anyOf]\ntrue\nnone\nSequence of transaction requests\nanyOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nPaymentRequest\nfalse\nnone\nRequest for generation of payment transaction to a given address\nor\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nBurnTokensRequest\nfalse\nnone\nRequest for burning tokens in wallet\nor\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nAssetIssueRequest\nfalse\nnone\nRequest for generation of asset issue transaction\ncontinued\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nfee\ninteger(int64)\nfalse\nnone\nTransaction fee\n\n\ninputsRaw\n[string]\nfalse\nnone\nList of inputs to be used in serialized form\n\n\ndataInputsRaw\n[string]\nfalse\nnone\nList of data inputs to be used in serialized form"
    },
    {
      "heading": "SourceHolder#",
      "content": "json\n\n\n{\n  \"source\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nsource\nstring\ntrue\nnone\nSigma source to be compiled"
    },
    {
      "heading": "ErgoLikeTransaction#",
      "content": "json\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"inputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"spendingProof\": {\n        \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    }\n  ],\n  \"dataInputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"value\": 147,\n      \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n      \"creationHeight\": 9149,\n      \"assets\": [\n        {\n          \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"amount\": 1000\n        }\n      ],\n      \"additionalRegisters\": {\n        \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n      },\n      \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"index\": 0\n    }\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\ninputs\n[ErgoTransactionInput]\ntrue\nnone\nnone\n\n\ndataInputs\n[ErgoTransactionDataInput]\ntrue\nnone\nnone\n\n\noutputs\n[ErgoTransactionOutput]\ntrue\nnone\nnone"
    },
    {
      "heading": "SigmaHeader#",
      "content": "json\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": {\n    \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"treeFlags\": 0,\n    \"keyLength\": 0,\n    \"valueLength\": 0\n  },\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"height\": 667,\n  \"size\": 667,\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powSolutions\": {\n    \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n    \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n    \"n\": \"0000000000000000\",\n    \"d\": 987654321\n  },\n  \"votes\": \"000000\",\n  \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n  \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n  \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powDistance\": 123456789\n}\nBlock header format used for sigma ErgoLikeContext"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\ntimestamp\nTimestamp\ntrue\nnone\nBasic timestamp definition\n\n\nversion\nVersion\ntrue\nnone\nErgo blockchain protocol version\n\n\nadProofsRoot\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\nadProofsId\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\nstateRoot\nAvlTreeData\ntrue\nnone\nnone\n\n\ntransactionsRoot\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\ntransactionsId\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\nnBits\ninteger(int64)\ntrue\nnone\nnone\n\n\nextensionHash\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\nextensionRoot\nDigest32\nfalse\nnone\nBase16-encoded 32 byte digest\n\n\nextensionId\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\nheight\ninteger(int32)\ntrue\nnone\nnone\n\n\nsize\ninteger(int32)\nfalse\nnone\nnone\n\n\nparentId\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\npowSolutions\nPowSolutions\nfalse\nnone\nAn object containing all components of pow solution\n\n\nvotes\nVotes\ntrue\nnone\nBase16-encoded votes for a soft-fork and parameters\n\n\nminerPk\nstring\nfalse\nnone\nnone\n\n\npowOnetimePk\nstring\nfalse\nnone\nnone\n\n\npowNonce\nDigest32\nfalse\nnone\nBase16-encoded 32 byte digest\n\n\npowDistance\nnumber\nfalse\nnone\nsigma.BigInt"
    },
    {
      "heading": "PreHeader#",
      "content": "json\n\n\n{\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"nBits\": 19857408,\n  \"height\": 667,\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntimestamp\nTimestamp\ntrue\nnone\nBasic timestamp definition\n\n\nversion\nVersion\ntrue\nnone\nErgo blockchain protocol version\n\n\nnBits\ninteger(int64)\ntrue\nnone\nnone\n\n\nheight\ninteger(int32)\ntrue\nnone\nnone\n\n\nparentId\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\nvotes\nVotes\ntrue\nnone\nBase16-encoded votes for a soft-fork and parameters\n\n\nminerPk\nstring\nfalse\nnone\nnone"
    },
    {
      "heading": "AvlTreeData#",
      "content": "json\n\n\n{\n  \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"treeFlags\": 0,\n  \"keyLength\": 0,\n  \"valueLength\": 0\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ndigest\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\ntreeFlags\ninteger(int32)\nfalse\nnone\nnone\n\n\nkeyLength\ninteger(int32)\nfalse\nnone\nnone\n\n\nvalueLength\ninteger(int32)\u00c2\u00a6null\nfalse\nnone\nnone"
    },
    {
      "heading": "ErgoLikeContext#",
      "content": "json\n\n\n{\n  \"lastBlockUtxoRoot\": {\n    \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"treeFlags\": 0,\n    \"keyLength\": 0,\n    \"valueLength\": 0\n  },\n  \"headers\": [\n    {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": {\n        \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"treeFlags\": 0,\n        \"keyLength\": 0,\n        \"valueLength\": 0\n      },\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"height\": 667,\n      \"size\": 667,\n      \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powSolutions\": {\n        \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n        \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n        \"n\": \"0000000000000000\",\n        \"d\": 987654321\n      },\n      \"votes\": \"000000\",\n      \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n      \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n      \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"powDistance\": 123456789\n    }\n  ],\n  \"preHeader\": {\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"nBits\": 19857408,\n    \"heigh..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nlastBlockUtxoRoot\nAvlTreeData\ntrue\nnone\nstate root before current block application\n\n\nheaders\n[SigmaHeader]\ntrue\nnone\nfixed number of last block headers in descending order (first header is the newest one)\n\n\npreHeader\nPreHeader\ntrue\nnone\nfields of block header with the current spendingTransaction, that can be predicted by a miner before its formation\n\n\ndataBoxes\n[ErgoTransactionOutput]\ntrue\nnone\nboxes, that corresponds to id's of spendingTransaction.dataInputs\n\n\nboxesToSpend\n[ErgoTransactionOutput]\ntrue\nnone\nboxes, that corresponds to id's of spendingTransaction.inputs\n\n\nspendingTransaction\nErgoLikeTransaction\ntrue\nnone\ntransaction that contains self box\n\n\nselfIndex\ninteger(int64)\ntrue\nnone\nindex of the box in boxesToSpend that contains the script we're evaluating\n\n\nextension\nobject\ntrue\nnone\nprover-defined key-value pairs, that may be used inside a script\n\n\nvalidationSettings\nstring\ntrue\nnone\nvalidation parameters passed to Interpreter.verify to detect soft-fork conditions\n\n\ncostLimit\ninteger(int64)\ntrue\nnone\nhard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown\n\n\ninitCost\ninteger(int64)\ntrue\nnone\ninitial value of execution cost already accumulated before Interpreter.verify is called"
    },
    {
      "heading": "ExecuteScript#",
      "content": "json\n\n\n{\n  \"script\": \"string\",\n  \"namedConstants\": {},\n  \"context\": {\n    \"lastBlockUtxoRoot\": {\n      \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"treeFlags\": 0,\n      \"keyLength\": 0,\n      \"valueLength\": 0\n    },\n    \"headers\": [\n      {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": {\n          \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"treeFlags\": 0,\n          \"keyLength\": 0,\n          \"valueLength\": 0\n        },\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"height\": 667,\n        \"size\": 667,\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"votes\": \"000000\",\n        \"minerPk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"powOnetimePk\": \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"powNonce\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n     ..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nscript\nstring\ntrue\nnone\nSigma script to be executed\n\n\nnamedConstants\nobject\u00c2\u00a6null\ntrue\nnone\nEnvironment for compiler\n\n\ncontext\nErgoLikeContext\ntrue\nnone\nInterpreter context"
    },
    {
      "heading": "SigmaBoolean#",
      "content": "json\n\n\n{\n  \"op\": 0,\n  \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"condition\": true\n}\nAlgebraic data type of sigma proposition expressions"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nop\ninteger(int8)\ntrue\nnone\nSigma opCode\n\n\nh\nHexString\nfalse\nnone\nBase16-encoded bytes\n\n\ng\nHexString\nfalse\nnone\nBase16-encoded bytes\n\n\nu\nHexString\nfalse\nnone\nBase16-encoded bytes\n\n\nv\nHexString\nfalse\nnone\nBase16-encoded bytes\n\n\ncondition\nboolean\nfalse\nnone\nnone"
    },
    {
      "heading": "SigmaBooleanAndPredicate#",
      "content": "json\n\n\n{\n  \"args\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nSigmaBoolean\nfalse\nnone\nAlgebraic data type of sigma proposition expressions\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb args\n[SigmaBoolean]\nfalse\nnone\n[Algebraic data type of sigma proposition expressions]"
    },
    {
      "heading": "SigmaBooleanOrPredicate#",
      "content": "json\n\n\n{\n  \"args\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nSigmaBoolean\nfalse\nnone\nAlgebraic data type of sigma proposition expressions\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb args\n[SigmaBoolean]\nfalse\nnone\n[Algebraic data type of sigma proposition expressions]"
    },
    {
      "heading": "SigmaBooleanThresholdPredicate#",
      "content": "json\n\n\n{\n  \"args\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nSigmaBoolean\nfalse\nnone\nAlgebraic data type of sigma proposition expressions\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb args\n[SigmaBoolean]\nfalse\nnone\n[Algebraic data type of sigma proposition expressions]"
    },
    {
      "heading": "CryptoResult#",
      "content": "json\n\n\n{\n  \"value\": {\n    \"op\": -45,\n    \"condition\": true\n  },\n  \"cost\": 10\n}\nResult of executeWithContext request (reduceToCrypto)"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nvalue\nSigmaBoolean\ntrue\nnone\nvalue of SigmaProp type which represents a statement verifiable via sigma protocol\n\n\ncost\ninteger(int64)\ntrue\nnone\nEstimated cost of contract execution"
    },
    {
      "heading": "ScanningPredicate#",
      "content": "json\n\n\n{\n  \"predicate\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\npredicate\nstring\ntrue\nnone\nnone"
    },
    {
      "heading": "ContainsPredicate#",
      "content": "json\n\n\n{\n  \"predicate\": \"string\",\n  \"register\": \"string\",\n  \"bytes\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nScanningPredicate\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb register\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb bytes\nstring\nfalse\nnone\nnone"
    },
    {
      "heading": "EqualsPredicate#",
      "content": "json\n\n\n{\n  \"predicate\": \"string\",\n  \"register\": \"string\",\n  \"bytes\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nScanningPredicate\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb register\nstring\nfalse\nnone\nnone\n\n\n\u00c2\u00bb bytes\nstring\nfalse\nnone\nnone"
    },
    {
      "heading": "ContainsAssetPredicate#",
      "content": "json\n\n\n{\n  \"predicate\": \"string\",\n  \"assetId\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nScanningPredicate\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb assetId\nstring\nfalse\nnone\nnone"
    },
    {
      "heading": "AndPredicate#",
      "content": "json\n\n\n{\n  \"predicate\": \"string\",\n  \"args\": [\n    {\n      \"predicate\": \"string\"\n    }\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nScanningPredicate\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb args\n[ScanningPredicate]\nfalse\nnone\nnone"
    },
    {
      "heading": "OrPredicate#",
      "content": "json\n\n\n{\n  \"predicate\": \"string\",\n  \"args\": [\n    {\n      \"predicate\": \"string\"\n    }\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "allOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nScanningPredicate\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\nand\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nobject\nfalse\nnone\nnone\n\n\n\u00c2\u00bb args\n[ScanningPredicate]\nfalse\nnone\nnone"
    },
    {
      "heading": "ScanRequest#",
      "content": "json\n\n\n{\n  \"scanName\": \"Assets Tracker\",\n  \"walletInteraction\": \"off\",\n  \"removeOffchain\": true,\n  \"trackingRule\": {\n    \"predicate\": \"containsAsset\",\n    \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nscanName\nstring\nfalse\nnone\nnone\n\n\nremoveOffchain\nboolean\nfalse\nnone\nnone\n\n\nwalletInteraction\nstring\nfalse\nnone\nnone\n\n\ntrackingRule\nScanningPredicate\nfalse\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nwalletInteraction\noff\n\n\nwalletInteraction\nshared\n\n\nwalletInteraction\nforced"
    },
    {
      "heading": "Scan#",
      "content": "json\n\n\n{\n  \"scanId\": 2,\n  \"scanName\": \"Assets Tracker\",\n  \"walletInteraction\": \"off\",\n  \"removeOffchain\": true,\n  \"trackingRule\": {\n    \"predicate\": \"containsAsset\",\n    \"assetId\": \"02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\"\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nscanName\nstring\nfalse\nnone\nnone\n\n\nscanId\ninteger\nfalse\nnone\nnone\n\n\nwalletInteraction\nstring\nfalse\nnone\nnone\n\n\nremoveOffchain\nboolean\nfalse\nnone\nnone\n\n\ntrackingRule\nScanningPredicate\nfalse\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nwalletInteraction\noff\n\n\nwalletInteraction\nshared\n\n\nwalletInteraction\nforced"
    },
    {
      "heading": "ScanId#",
      "content": "json\n\n\n{\n  \"scanId\": 0\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nscanId\ninteger\nfalse\nnone\nnone"
    },
    {
      "heading": "ScanIdBoxId#",
      "content": "json\n\n\n{\n  \"scanId\": 0,\n  \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nscanId\ninteger\ntrue\nnone\nnone\n\n\nboxId\nTransactionBoxId\ntrue\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long"
    },
    {
      "heading": "ScanIdsBox#",
      "content": "json\n\n\n{\n  \"scanIds\": [\n    0\n  ],\n  \"box\": {\n    \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"value\": 147,\n    \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n    \"creationHeight\": 9149,\n    \"assets\": [\n      {\n        \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"amount\": 1000\n      }\n    ],\n    \"additionalRegisters\": {\n      \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n    },\n    \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"index\": 0\n  }\n}\nErgo box with associated scans (their respective identifiers)"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nscanIds\n[integer]\ntrue\nnone\nnone\n\n\nbox\nErgoTransactionOutput\ntrue\nnone\nnone"
    },
    {
      "heading": "DlogCommitment#",
      "content": "json\n\n\n{\n  \"r\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n  \"a\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}\nRandomness and commitment for the first step of the Schnorr protocol"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nr\nstring\ntrue\nnone\nHex-encoded big-endian 256-bits secret exponent\n\n\na\nstring\ntrue\nnone\nHex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)"
    },
    {
      "heading": "HintExtractionRequest#",
      "content": "json\n\n\n{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  },\n  \"real\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"condition\": true\n    }\n  ],\n  \"simulated\": [\n    {\n      \"op\": 0,\n      \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntx\nErgoTransaction\ntrue\nnone\nTransaction to extract prover hints from\n\n\nreal\n[SigmaBoolean]\ntrue\nnone\nReal signers of the transaction\n\n\nsimulated\n[SigmaBoolean]\ntrue\nnone\nSimulated signers of the transaction\n\n\ninputsRaw\n[string]\nfalse\nnone\nOptional list of inputs to be used in serialized form\n\n\ndataInputsRaw\n[string]\nfalse\nnone\nOptional list of inputs to be used in serialized form"
    },
    {
      "heading": "Commitment#",
      "content": "json\n\n\n{\n  \"hint\": \"cmtWithSecret\",\n  \"pubkey\": {\n    \"op\": 0,\n    \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"condition\": true\n  },\n  \"position\": \"string\",\n  \"type\": \"dlog\",\n  \"a\": \"string\",\n  \"b\": \"string\"\n}\nbasic trait for prover commitments"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nhint\nstring\ntrue\nnone\nnone\n\n\npubkey\nSigmaBoolean\ntrue\nnone\nAlgebraic data type of sigma proposition expressions\n\n\nposition\nstring\ntrue\nnone\nnone\n\n\ntype\nstring\nfalse\nnone\nnone\n\n\na\nstring\ntrue\nnone\na group element of the commitment\n\n\nb\nstring\nfalse\nnone\nb group element of the commitment (needed for DHT protocol only)"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nhint\ncmtWithSecret\n\n\nhint\ncmtReal\n\n\nhint\ncmtSimulated\n\n\ntype\ndlog\n\n\ntype\ndht"
    },
    {
      "heading": "CommitmentWithSecret#",
      "content": "json\n\n\n{\n  \"hint\": \"cmtWithSecret\",\n  \"pubkey\": {\n    \"op\": 0,\n    \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"condition\": true\n  },\n  \"position\": \"string\",\n  \"type\": \"dlog\",\n  \"a\": \"string\",\n  \"b\": \"string\"\n}\ncommitment to secret along with secret (!) randomness"
    },
    {
      "heading": "Properties#",
      "content": "None"
    },
    {
      "heading": "SecretProven#",
      "content": "json\n\n\n{\n  \"hint\": \"proofReal\",\n  \"challenge\": \"string\",\n  \"pubkey\": {\n    \"op\": 0,\n    \"h\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"g\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"u\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"v\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"condition\": true\n  },\n  \"proof\": \"string\",\n  \"position\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nhint\nstring\ntrue\nnone\nnone\n\n\nchallenge\nstring\ntrue\nnone\nnone\n\n\npubkey\nSigmaBoolean\ntrue\nnone\nAlgebraic data type of sigma proposition expressions\n\n\nproof\nstring\ntrue\nnone\nnone\n\n\nposition\nstring\ntrue\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nhint\nproofReal\n\n\nhint\nproofSimulated"
    },
    {
      "heading": "InputHints#",
      "content": "json\n\n\n{\n  \"01\": [\n    {\n      \"hint\": \"cmtWithSecret\",\n      \"pubkey\": {\n        \"op\": -51,\n        \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n      },\n      \"position\": \"0-1\",\n      \"type\": \"dlog\",\n      \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n      \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n    }\n  ]\n}\nhints for inputs, key is input index, values is a set of hints for the input"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nadditionalProperties\n[oneOf]\nfalse\nnone\nnone\noneOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nCommitmentWithSecret\nfalse\nnone\ncommitment to secret along with secret (!) randomness\nxor\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nCommitment\nfalse\nnone\nbasic trait for prover commitments\nxor\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nSecretProven\nfalse\nnone\nnone"
    },
    {
      "heading": "TransactionHintsBag#",
      "content": "json\n\n\n{\n  \"secretHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ],\n  \"publicHints\": [\n    {\n      \"01\": [\n        {\n          \"hint\": \"cmtWithSecret\",\n          \"pubkey\": {\n            \"op\": -51,\n            \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n          },\n          \"position\": \"0-1\",\n          \"type\": \"dlog\",\n          \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n          \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n        }\n      ]\n    }\n  ]\n}\nprover hints extracted from a transaction"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nsecretHints\n[InputHints]\nfalse\nnone\nHints which contain secrets, do not share them!\n\n\npublicHints\n[InputHints]\nfalse\nnone\nHints which contain public data only, share them freely!"
    },
    {
      "heading": "GenerateCommitmentsRequest#",
      "content": "json\n\n\n{\n  \"tx\": {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"extension\": {\n          \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ]\n  },\n  \"secrets\": {\n    \"dlog\": [\n      \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\"\n    ],\n    \"dht\": [\n      {\n        \"secret\": \"433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f\",\n        \"g\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"h\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"u\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\",\n        \"v\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n      }\n    ]\n  },\n  \"inputsRaw\": [\n    \"string\"\n  ],\n  \"dataInputsRaw\": [\n    \"string\"\n  ]\n}\nrequest to generate commitments to sign a transaction"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntx\nUnsignedErgoTransaction\ntrue\nnone\nUnsigned transaction to sign\n\n\nsecrets\nobject\nfalse\nnone\nOptionally, external secrets used for signing\n\n\n\u00c2\u00bb dlog\n[DlogSecret]\nfalse\nnone\nSequence of secret exponents (DLOG secrets)\n\n\n\u00c2\u00bb dht\n[DhtSecret]\nfalse\nnone\nSequence of secret Diffie-Hellman tuple exponents (DHT secrets)\n\n\ninputsRaw\n[string]\nfalse\nnone\nOptional list of inputs to be used in serialized form\n\n\ndataInputsRaw\n[string]\nfalse\nnone\nOptional list of inputs to be used in serialized form"
    },
    {
      "heading": "PaymentRequest#",
      "content": "json\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"value\": 1,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ],\n  \"registers\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  }\n}\nRequest for generation of payment transaction to a given address"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\nvalue\ninteger(int64)\ntrue\nnone\nPayment amount\n\n\nassets\n[Asset]\nfalse\nnone\nAssets list in the transaction\n\n\nregisters\nRegisters\nfalse\nnone\nErgo box registers"
    },
    {
      "heading": "BurnTokensRequest#",
      "content": "json\n\n\n{\n  \"assetsToBurn\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ]\n}\nRequest for burning tokens in wallet"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nassetsToBurn\n[Asset]\ntrue\nnone\nAssets list to burn in the transaction"
    },
    {
      "heading": "AssetIssueRequest#",
      "content": "json\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"ergValue\": 0,\n  \"amount\": 1000000,\n  \"name\": \"TST\",\n  \"description\": \"Test token\",\n  \"decimals\": 8,\n  \"registers\": {\n    \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n  }\n}\nRequest for generation of asset issue transaction"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nErgoAddress\nfalse\nnone\nOptional, first address in the wallet will be used if not defined\n\n\nergValue\ninteger(int64)\nfalse\nnone\nOptional, amount of ergs to be put into box with issued assets\n\n\namount\ninteger(int64)\ntrue\nnone\nSupply amount\n\n\nname\nstring\ntrue\nnone\nAssets name\n\n\ndescription\nstring\ntrue\nnone\nAssets description\n\n\ndecimals\ninteger(int32)\ntrue\nnone\nNumber of decimal places\n\n\nregisters\nRegisters\nfalse\nnone\nOptional, possible values for registers R7...R9"
    },
    {
      "heading": "FullBlock#",
      "content": "json\n\n\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"blockTransactions\": {\n    \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactions\": [\n      {\n        \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"inputs\": [\n          {\n            \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"spendingProof\": {\n              \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"extension\": {\n                \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n              }\n        ..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheader\nBlockHeader\ntrue\nnone\nHeader of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.\n\n\nblockTransactions\nBlockTransactions\ntrue\nnone\nSection of a block which contains transactions.\n\n\nadProofs\nBlockADProofs\ntrue\nnone\nnone\n\n\nextension\nExtension\ntrue\nnone\nSection of a block which contains extension data.\n\n\nsize\ninteger(int32)\ntrue\nnone\nSize in bytes"
    },
    {
      "heading": "PowSolutions#",
      "content": "json\n\n\n{\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n  \"n\": \"0000000000000000\",\n  \"d\": 987654321\n}\nAn object containing all components of pow solution"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\npk\nstring\ntrue\nnone\nBase16-encoded public key\n\n\nw\nstring\ntrue\nnone\nnone\n\n\nn\nstring\ntrue\nnone\nnone\n\n\nd\nnumber\ntrue\nnone\nnone"
    },
    {
      "heading": "BlockHeaderWithoutPow#",
      "content": "json\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"height\": 667,\n  \"difficulty\": 62,\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"size\": 0,\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\ntimestamp\nTimestamp\ntrue\nnone\nBasic timestamp definition\n\n\nversion\nVersion\ntrue\nnone\nErgo blockchain protocol version\n\n\nadProofsRoot\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\nstateRoot\nADDigest\ntrue\nnone\nBase16-encoded 33 byte digest - digest with extra byte with tree height\n\n\ntransactionsRoot\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\nnBits\ninteger(int64)\ntrue\nnone\nnone\n\n\nextensionHash\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\nheight\ninteger(int32)\ntrue\nnone\nnone\n\n\ndifficulty\ninteger(int32)\ntrue\nnone\nnone\n\n\nparentId\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\nvotes\nVotes\ntrue\nnone\nBase16-encoded votes for a soft-fork and parameters\n\n\nsize\ninteger(int32)\nfalse\nnone\nSize in bytes\n\n\nextensionId\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\ntransactionsId\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id\n\n\nadProofsId\nModifierId\nfalse\nnone\nBase16-encoded 32 byte modifier id"
    },
    {
      "heading": "PopowHeader#",
      "content": "json\n\n\n{\n  \"header\": {\n    \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"timestamp\": 1524143059077,\n    \"version\": 2,\n    \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"nBits\": 19857408,\n    \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"powSolutions\": {\n      \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n      \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n      \"n\": \"0000000000000000\",\n      \"d\": 987654321\n    },\n    \"height\": 667,\n    \"difficulty\": \"9575989248\",\n    \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"votes\": \"000000\",\n    \"size\": 0,\n    \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  },\n  \"interlinks\": [\n    \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheader\nBlockHeader\ntrue\nnone\nHeader of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data.\n\n\ninterlinks\n[ModifierId]\ntrue\nnone\nArray of header interlinks"
    },
    {
      "heading": "NipopowProof#",
      "content": "json\n\n\n{\n  \"m\": 0,\n  \"k\": 0,\n  \"prefix\": [\n    {\n      \"header\": {\n        \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"timestamp\": 1524143059077,\n        \"version\": 2,\n        \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"nBits\": 19857408,\n        \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"powSolutions\": {\n          \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n          \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n          \"n\": \"0000000000000000\",\n          \"d\": 987654321\n        },\n        \"height\": 667,\n        \"difficulty\": \"9575989248\",\n        \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"votes\": \"000000\",\n        \"size\": 0,\n        \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      },\n      \"interlinks\": [\n        \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      ]\n    }\n  ],\n  \"suffixHead\": {\n    \"header\": {\n      \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"timestamp\": 1524143059077,\n      \"version\": 2,\n      \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"nBits\": 19857408,\n      \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5f..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nm\nnumber\ntrue\nnone\nsecurity parameter (min \u00ce\u00bc-level superchain length)\n\n\nk\nnumber\ntrue\nnone\nsecurity parameter (min suffix length, >= 1)\n\n\nprefix\n[PopowHeader]\ntrue\nnone\nproof prefix headers\n\n\nsuffixHead\nPopowHeader\ntrue\nnone\nnone\n\n\nsuffixTail\n[BlockHeader]\ntrue\nnone\ntail of the proof suffix headers"
    },
    {
      "heading": "BlockHeader#",
      "content": "json\n\n\n{\n  \"id\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"version\": 2,\n  \"adProofsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsRoot\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"powSolutions\": {\n    \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n    \"w\": \"0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12\",\n    \"n\": \"0000000000000000\",\n    \"d\": 987654321\n  },\n  \"height\": 667,\n  \"difficulty\": \"9575989248\",\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"votes\": \"000000\",\n  \"size\": 0,\n  \"extensionId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"adProofsId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n}\nHeader of a block. It authenticates link to a previous block, other block sections (transactions, UTXO set transformation proofs, extension), UTXO set, votes for blockchain parameters to be changed and proof-of-work related data."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nid\nModifierId\ntrue\nnone\nBlock id\n\n\ntimestamp\nTimestamp\ntrue\nnone\nBlock generation time reported by a miner\n\n\nversion\nVersion\ntrue\nnone\nProtocol version used to generate the block\n\n\nadProofsRoot\nDigest32\ntrue\nnone\nDigest of UTXO set transformation proofs\n\n\nstateRoot\nADDigest\ntrue\nnone\nAVL+ tree digest of UTXO set (after the block is applied)\n\n\ntransactionsRoot\nDigest32\ntrue\nnone\nMerkle tree digest of transactions in the block (BlockTransactions section)\n\n\nnBits\ninteger(int64)\ntrue\nnone\nProof-of-work target (difficulty encoded)\n\n\nextensionHash\nDigest32\ntrue\nnone\nMerkle tree digest of the extension section of the block\n\n\npowSolutions\nPowSolutions\ntrue\nnone\nSolution for the proof-of-work puzzle\n\n\nheight\ninteger(int32)\ntrue\nnone\nHeight of the block (genesis block height == 1)\n\n\ndifficulty\nstring\ntrue\nnone\nnone\n\n\nparentId\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\nvotes\nVotes\ntrue\nnone\nVotes for changing system parameters\n\n\nsize\ninteger(int32)\nfalse\nnone\nSize of the header in bytes\n\n\nextensionId\nModifierId\nfalse\nnone\nHash of the extension section of the block == hash(modifier type id, header id, extensionHash)\n\n\ntransactionsId\nModifierId\nfalse\nnone\nHash of the transactions section of the block == hash(modifier type id, header id, transactionsRoot)\n\n\nadProofsId\nModifierId\nfalse\nnone\nHash of the UTXO set transformation proofs section of the block == hash(modifier type id, header id, adProofsRoot)"
    },
    {
      "heading": "BlockTransactions#",
      "content": "json\n\n\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactions\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n          },\n          \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"index\": 0\n        }\n      ],\n      \"size\": 0\n    }\n  ],\n  \"size\": 0\n}\nSection of a block which contains transactions."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheaderId\nModifierId\ntrue\nnone\nIdentifier of a header of a corresponding block\n\n\ntransactions\nTransactions\ntrue\nnone\nTransactions of the block\n\n\nsize\ninteger(int32)\ntrue\nnone\nSize in bytes of all block transactions"
    },
    {
      "heading": "BlockADProofs#",
      "content": "json\n\n\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"proofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"size\": 0\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheaderId\nModifierId\ntrue\nnone\nIdentifier of a header of the block which contains the proofs\n\n\nproofBytes\nSerializedAdProof\ntrue\nnone\nSerialized bytes of the authenticated dictionary proof\n\n\ndigest\nDigest32\ntrue\nnone\nHash of the proofBytes\n\n\nsize\ninteger(int32)\ntrue\nnone\nSize in bytes"
    },
    {
      "heading": "Extension#",
      "content": "json\n\n\n{\n  \"headerId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"digest\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"fields\": [\n    [\n      \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n    ]\n  ]\n}\nSection of a block which contains extension data."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheaderId\nModifierId\ntrue\nnone\nIdentifier of a header of a corresponding block\n\n\ndigest\nDigest32\ntrue\nnone\nRoot hash (aka digest) merkelized list of key-value records\n\n\nfields\n[KeyValueItem]\u00c2\u00a6null\ntrue\nnone\nList of key-value records"
    },
    {
      "heading": "KeyValueItem#",
      "content": "json\n\n\n[\n  \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n]\nKey-value record represented as a pair of hex strings in an array."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[HexString]\nfalse\nnone\nKey-value record represented as a pair of hex strings in an array."
    },
    {
      "heading": "CandidateBlock#",
      "content": "json\n\n\n{\n  \"version\": 2,\n  \"extensionHash\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"timestamp\": 1524143059077,\n  \"stateRoot\": \"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"nBits\": 19857408,\n  \"adProofBytes\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"parentId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"transactionsNumber\": 2,\n  \"transactions\": [\n    {\n      \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"inputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"spendingProof\": {\n            \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"extension\": {\n              \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n            }\n          }\n        }\n      ],\n      \"dataInputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"value\": 147,\n          \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n          \"creationHeight\": 9149,\n          \"assets\": [\n            {\n              \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n              \"amount\": 1000\n            }\n          ],\n          \"additionalRegisters\": {\n            \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a701730..."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nversion\ninteger(int8)\nfalse\nnone\nnone\n\n\nextensionHash\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\ntimestamp\nTimestamp\nfalse\nnone\nBasic timestamp definition\n\n\nstateRoot\nADDigest\nfalse\nnone\nBase16-encoded 33 byte digest - digest with extra byte with tree height\n\n\nnBits\ninteger(int64)\nfalse\nnone\nnone\n\n\nadProofBytes\nSerializedAdProof\nfalse\nnone\nBase16-encoded ad proofs\n\n\nparentId\nModifierId\ntrue\nnone\nBase16-encoded 32 byte modifier id\n\n\ntransactionsNumber\ninteger(int32)\nfalse\nnone\nnone\n\n\ntransactions\nTransactions\nfalse\nnone\nList of ErgoTransaction objects\n\n\nvotes\nVotes\nfalse\nnone\nBase16-encoded votes for a soft-fork and parameters"
    },
    {
      "heading": "PassphraseMatch#",
      "content": "json\n\n\n{\n  \"matched\": true\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nmatched\nboolean\ntrue\nnone\ntrue if passphrase matches wallet, false otherwise"
    },
    {
      "heading": "WalletStatus#",
      "content": "json\n\n\n{\n  \"isInitialized\": true,\n  \"isUnlocked\": true,\n  \"changeAddress\": \"3WzCFq7mkykKqi4Ykdk8BK814tkh6EsPmA42pQZxU2NRwSDgd6yB\",\n  \"walletHeight\": 0,\n  \"error\": \"string\"\n}\nStatus of the node wallet"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nisInitialized\nboolean\ntrue\nnone\ntrue if wallet is initialized, false otherwise\n\n\nisUnlocked\nboolean\ntrue\nnone\ntrue if wallet is unlocked, false otherwise\n\n\nchangeAddress\nstring\ntrue\nnone\naddress to send change to. Empty when wallet is not initialized or locked. By default change address correponds to root key address, could be set via /wallet/updateChangeAddress method.\n\n\nwalletHeight\ninteger\ntrue\nnone\nlast scanned height for the wallet (and external scans)\n\n\nerror\nstring\ntrue\nnone\nlast wallet error caught"
    },
    {
      "heading": "InitWallet#",
      "content": "json\n\n\n{\n  \"pass\": \"string\",\n  \"mnemonicPass\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\npass\nstring\ntrue\nnone\nPassword to encrypt wallet file with\n\n\nmnemonicPass\nstring\nfalse\nnone\nOptional pass to password-protect mnemonic seed"
    },
    {
      "heading": "InitWalletResult#",
      "content": "json\n\n\n{\n  \"mnemonic\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nmnemonic\nstring\ntrue\nnone\nMnemonic seed phrase"
    },
    {
      "heading": "RestoreWallet#",
      "content": "json\n\n\n{\n  \"pass\": \"string\",\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\",\n  \"usePre1627KeyDerivation\": true\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\npass\nstring\ntrue\nnone\nPassword to encrypt wallet file with\n\n\nmnemonic\nstring\ntrue\nnone\nMnemonic seed\n\n\nmnemonicPass\nstring\nfalse\nnone\nOptional pass to password-protect mnemonic seed\n\n\nusePre1627KeyDerivation\nboolean\ntrue\nnone\nuse incorrect(previous) BIP32 key derivation (see https://github.com/ergoplatform/ergo/issues/1627 for details). It's recommended to set to 'true' if the original wallet was created by ergo node before v4.0.105."
    },
    {
      "heading": "CheckWallet#",
      "content": "json\n\n\n{\n  \"mnemonic\": \"string\",\n  \"mnemonicPass\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nmnemonic\nstring\ntrue\nnone\nMnemonic seed (optional)\n\n\nmnemonicPass\nstring\nfalse\nnone\nOptional pass to password-protect mnemonic seed"
    },
    {
      "heading": "UnlockWallet#",
      "content": "json\n\n\n{\n  \"pass\": \"string\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\npass\nstring\ntrue\nnone\nPassword to decrypt wallet file with"
    },
    {
      "heading": "DeriveKey#",
      "content": "json\n\n\n{\n  \"derivationPath\": \"m/1/2\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nderivationPath\nstring\ntrue\nnone\nDerivation path for a new secret to derive"
    },
    {
      "heading": "DeriveKeyResult#",
      "content": "json\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address"
    },
    {
      "heading": "DeriveNextKeyResult#",
      "content": "json\n\n\n{\n  \"derivationPath\": \"m/1/2\",\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nderivationPath\nstring\ntrue\nnone\nDerivation path of the resulted secret\n\n\naddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address"
    },
    {
      "heading": "MerkleProof#",
      "content": "json\n\n\n{\n  \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n  \"levels\": [\n    [\n      \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n      0\n    ]\n  ]\n}\nMerkle proof for a leaf, which is an array of bytes (e.g. a transaction identifier)"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nleaf\nstring\ntrue\nnone\nBase16-encoded Merkle tree leaf bytes\n\n\nlevels\n[array]\ntrue\nnone\nnone\nanyOf\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\nstring\nfalse\nnone\nhash\nor\nName\nType\nRequired\nRestrictions\nDescription\n\n\n\n\n\u00c2\u00bb anonymous\ninteger\nfalse\nnone\nside of hash"
    },
    {
      "heading": "ProofOfUpcomingTransactions#",
      "content": "json\n\n\n{\n  \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n  \"txProofs\": [\n    {\n      \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n      \"levels\": [\n        [\n          \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n          0\n        ]\n      ]\n    }\n  ]\n}\nProof that a block corresponding to given header without PoW contains some transactions"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nmsgPreimage\nstring\ntrue\nnone\nBase16-encoded serialized header without Proof-of-Work\n\n\ntxProofs\n[MerkleProof]\ntrue\nnone\nMerkle proofs of transactions included into blocks (not necessarily all the block transactions)"
    },
    {
      "heading": "WorkMessage#",
      "content": "json\n\n\n{\n  \"msg\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"b\": 987654321,\n  \"pk\": \"0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5\",\n  \"proof\": {\n    \"msgPreimage\": \"0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000\",\n    \"txProofs\": [\n      {\n        \"leaf\": \"cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3\",\n        \"levels\": [\n          [\n            \"018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337\",\n            0\n          ]\n        ]\n      }\n    ]\n  }\n}\nBlock candidate related data for external miner to perform work"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nmsg\nstring\ntrue\nnone\nBase16-encoded block header bytes without PoW solution\n\n\nb\ninteger\ntrue\nnone\nWork target value\n\n\npk\nstring\ntrue\nnone\nBase16-encoded miner public key\n\n\nproof\nProofOfUpcomingTransactions\nfalse\nnone\nProof that a block corresponding to given header without PoW contains some transactions"
    },
    {
      "heading": "Peer#",
      "content": "json\n\n\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"restApiUrl\": \"https://example.com\",\n  \"name\": \"mynode\",\n  \"lastSeen\": 1524143059077,\n  \"connectionType\": \"Incoming\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nstring\ntrue\nnone\nnone\n\n\nrestApiUrl\nstring\u00c2\u00a6null\nfalse\nnone\nnone\n\n\nname\nstring\u00c2\u00a6null\nfalse\nnone\nnone\n\n\nlastSeen\nTimestamp\nfalse\nnone\nBasic timestamp definition\n\n\nconnectionType\nstring\u00c2\u00a6null\nfalse\nnone\nnone"
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nconnectionType\nIncoming\n\n\nconnectionType\nOutgoing"
    },
    {
      "heading": "PeersStatus#",
      "content": "json\n\n\n{\n  \"lastIncomingMessage\": 1524143059077,\n  \"currentNetworkTime\": 1524143059077\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nlastIncomingMessage\nTimestamp\ntrue\nnone\nBasic timestamp definition\n\n\ncurrentNetworkTime\nTimestamp\ntrue\nnone\nBasic timestamp definition"
    },
    {
      "heading": "PeerMode#",
      "content": "json\n\n\n{\n  \"state\": \"utxo\",\n  \"verifyingTransactions\": true,\n  \"fullBlocksSuffix\": 2880\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nstate\nstring\ntrue\nnone\nnone\n\n\nverifyingTransactions\nboolean\ntrue\nnone\nnone\n\n\nfullBlocksSuffix\ninteger\ntrue\nnone\nnone"
    },
    {
      "heading": "SyncInfo#",
      "content": "json\n\n\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"mode\": {\n    \"state\": \"utxo\",\n    \"verifyingTransactions\": true,\n    \"fullBlocksSuffix\": 2880\n  },\n  \"version\": \"4.0.16\",\n  \"status\": \"Older\",\n  \"height\": 65780\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nstring\ntrue\nnone\nnone\n\n\nmode\nPeerMode\ntrue\nnone\nPeer operating mode parameters\n\n\nversion\nstring\ntrue\nnone\nnone\n\n\nstatus\nstring\ntrue\nnone\nnone\n\n\nheight\ninteger\ntrue\nnone\nnone"
    },
    {
      "heading": "RequestedInfo#",
      "content": "json\n\n\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"version\": \"4.0.26\",\n  \"checks\": 4\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nstring\nfalse\nnone\nnone\n\n\nversion\nstring\nfalse\nnone\nnone\n\n\nchecks\ninteger\ntrue\nnone\nHow many times we checked for modifier delivery status"
    },
    {
      "heading": "RequestedInfoByModifierId#",
      "content": "json\n\n\n{\n  \"property1\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"checks\": 4\n  },\n  \"property2\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"checks\": 4\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nadditionalProperties\nRequestedInfo\nfalse\nnone\nnone"
    },
    {
      "heading": "ConnectedPeer#",
      "content": "json\n\n\n{\n  \"address\": \"127.0.0.1:5673\",\n  \"version\": \"4.0.26\",\n  \"lastMessage\": 1524143059077\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nstring\ntrue\nnone\nnone\n\n\nversion\nstring\nfalse\nnone\nnone\n\n\nlastMessage\nTimestamp\nfalse\nnone\nBasic timestamp definition"
    },
    {
      "heading": "ConnectedPeerByModifierId#",
      "content": "json\n\n\n{\n  \"property1\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"lastMessage\": 1524143059077\n  },\n  \"property2\": {\n    \"address\": \"127.0.0.1:5673\",\n    \"version\": \"4.0.26\",\n    \"lastMessage\": 1524143059077\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nadditionalProperties\nConnectedPeer\nfalse\nnone\nnone"
    },
    {
      "heading": "TrackInfo#",
      "content": "json\n\n\n{\n  \"invalidModifierApproxSize\": 65780,\n  \"requested\": {\n    \"property1\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      }\n    },\n    \"property2\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"checks\": 4\n      }\n    }\n  },\n  \"received\": {\n    \"property1\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      }\n    },\n    \"property2\": {\n      \"property1\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      },\n      \"property2\": {\n        \"address\": \"127.0.0.1:5673\",\n        \"version\": \"4.0.26\",\n        \"lastMessage\": 1524143059077\n      }\n    }\n  }\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ninvalidModifierApproxSize\ninteger\ntrue\nnone\nnone\n\n\nrequested\nobject\ntrue\nnone\nCurrently requested modifiers\n\n\n\u00c2\u00bb additionalProperties\nRequestedInfoByModifierId\nfalse\nnone\nnone\n\n\nreceived\nobject\ntrue\nnone\nReceived modifiers\n\n\n\u00c2\u00bb additionalProperties\nConnectedPeerByModifierId\nfalse\nnone\nnone"
    },
    {
      "heading": "BlacklistedPeers#",
      "content": "json\n\n\n{\n  \"addresses\": [\n    \"string\"\n  ]\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddresses\n[string]\ntrue\nnone\nnone"
    },
    {
      "heading": "NodeInfo#",
      "content": "json\n\n\n{\n  \"name\": \"my-node-1\",\n  \"appVersion\": \"0.0.1\",\n  \"fullHeight\": 667,\n  \"headersHeight\": 667,\n  \"maxPeerHeight\": 706162,\n  \"bestFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"previousFullHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"bestHeaderId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateRoot\": \"dab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"stateType\": \"digest\",\n  \"stateVersion\": \"fab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"isMining\": true,\n  \"peersCount\": 327,\n  \"unconfirmedCount\": 327,\n  \"difficulty\": 667,\n  \"currentTime\": 1524143059077,\n  \"launchTime\": 1524143059077,\n  \"headersScore\": 0,\n  \"fullBlocksScore\": 0,\n  \"genesisBlockId\": \"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"parameters\": {\n    \"height\": 667,\n    \"storageFeeFactor\": 100000,\n    \"minValuePerByte\": 360,\n    \"maxBlockSize\": 1048576,\n    \"maxBlockCost\": 104876,\n    \"blockVersion\": 2,\n    \"tokenAccessCost\": 100,\n    \"inputCost\": 100,\n    \"dataInputCost\": 100,\n    \"outputCost\": 100\n  },\n  \"eip27Supported\": true,\n  \"restApiUrl\": \"https://example.com\"\n}\nData container for /info API request output. Contains information about node's state and configuration. Contains data about best block, best header, state, etc. Best block is the block with the maximum height."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nname\nstring\ntrue\nnone\nNode's (peer) self-chosen name from config\n\n\nappVersion\nstring\ntrue\nnone\nNode's application version\n\n\nfullHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nHeight of the best block known to the node. Can be 'null' if state is empty (no full block is applied since node launch)\n\n\nheadersHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nThe height of the best header (i.e. the one with the maximum height). Can be 'null' if state is empty (no header applied since node launch)\n\n\nmaxPeerHeight\ninteger(int32)\u00c2\u00a6null\ntrue\nnone\nMaximum block height of connected peers. Can be 'null' if state is empty (no peer connected since node launch)\n\n\nbestFullHeaderId\nModifierId\u00c2\u00a6null\ntrue\nnone\nBest full-block id (header id of such block). Can be 'null' if no full block is applied since node launch.\n\n\npreviousFullHeaderId\nModifierId\u00c2\u00a6null\ntrue\nnone\nHeader id of the parent block of the best full-block (i.e. previous block in the blockchain). Can be 'null' if no full block is applied since node launch\n\n\nbestHeaderId\nModifierId\u00c2\u00a6null\ntrue\nnone\nBest header ID (hex representation). Can be 'null' if no header applied since node launch.\n\n\nstateRoot\nstring\u00c2\u00a6null\ntrue\nnone\nCurrent UTXO set digest. Can be 'null' if state is empty (no full block is applied since node launch)\n\n\nstateType\nstring\ntrue\nnone\nWhether the node is storing UTXO set or only its digest. Equals digest if only digest is stored, utxo if full UTXO set is stored.\n\n\nstateVersion\nstring\u00c2\u00a6null\ntrue\nnone\nId of a block where UTXO set digest is taken from. Can be 'null' if no full block is applied since node launch.\n\n\nisMining\nboolean\ntrue\nnone\nWhether the node is mining (i.e. generating blocks).\n\n\npeersCount\ninteger(int32)\ntrue\nnone\nNumber of peers this node is connected with.\n\n\nunconfirmedCount\ninteger(int32)\ntrue\nnone\nNumber of unconfirmed transactions in the mempool.\n\n\ndifficulty\ninteger\u00c2\u00a6null\ntrue\nnone\nDifficulty on current bestFullHeaderId. Can be 'null' if no full block is applied since..."
    },
    {
      "heading": "Enumerated Values#",
      "content": "Property\nValue\n\n\n\n\nstateType\ndigest\n\n\nstateType\nutxo"
    },
    {
      "heading": "Parameters#",
      "content": "json\n\n\n{\n  \"height\": 667,\n  \"storageFeeFactor\": 100000,\n  \"minValuePerByte\": 360,\n  \"maxBlockSize\": 1048576,\n  \"maxBlockCost\": 104876,\n  \"blockVersion\": 2,\n  \"tokenAccessCost\": 100,\n  \"inputCost\": 100,\n  \"dataInputCost\": 100,\n  \"outputCost\": 100\n}\nSystem parameters which could be readjusted via collective miners decision."
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheight\ninteger(int32)\ntrue\nnone\nHeight when current parameters were considered(not actual height). Can be '0' if state is empty\n\n\nstorageFeeFactor\ninteger(int32)\ntrue\nnone\nStorage fee coefficient (per byte per storage period ~4 years)\n\n\nminValuePerByte\ninteger(int32)\ntrue\nnone\nMinimum value per byte of an output\n\n\nmaxBlockSize\ninteger(int32)\ntrue\nnone\nMaximum block size (in bytes)\n\n\nmaxBlockCost\ninteger(int32)\ntrue\nnone\nMaximum cumulative computational cost of input scripts in block transactions\n\n\nblockVersion\nVersion\ntrue\nnone\nErgo blockchain protocol version\n\n\ntokenAccessCost\ninteger(int32)\ntrue\nnone\nValidation cost of a single token\n\n\ninputCost\ninteger(int32)\ntrue\nnone\nValidation cost per one transaction input\n\n\ndataInputCost\ninteger(int32)\ntrue\nnone\nValidation cost per one data input\n\n\noutputCost\ninteger(int32)\ntrue\nnone\nValidation cost per one transaction output"
    },
    {
      "heading": "Version#",
      "content": "json\n\n\n2\nErgo blockchain protocol version"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\ninteger(int8)\nfalse\nnone\nErgo blockchain protocol version"
    },
    {
      "heading": "TransactionBoxId#",
      "content": "json\n\n\n\"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded transaction box id bytes. Should be 32 bytes long"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded transaction box id bytes. Should be 32 bytes long"
    },
    {
      "heading": "TransactionId#",
      "content": "json\n\n\n\"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded transaction id bytes"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded transaction id bytes"
    },
    {
      "heading": "ErgoTree#",
      "content": "json\n\n\n\"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\"\nBase16-encoded ergo tree bytes"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded ergo tree bytes"
    },
    {
      "heading": "ErgoTreeObject#",
      "content": "json\n\n\n{\n  \"tree\": \"02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3\"\n}"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntree\nstring\nfalse\nnone\nserialized Ergo tree"
    },
    {
      "heading": "Transactions#",
      "content": "json\n\n\n[\n  {\n    \"id\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n    \"inputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"spendingProof\": {\n          \"proofBytes\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n          \"extension\": {\n            \"1\": \"a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0\"\n          }\n        }\n      }\n    ],\n    \"dataInputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"boxId\": \"1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"value\": 147,\n        \"ergoTree\": \"0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041\",\n        \"creationHeight\": 9149,\n        \"assets\": [\n          {\n            \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n            \"amount\": 1000\n          }\n        ],\n        \"additionalRegisters\": {\n          \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n        },\n        \"transactionId\": \"2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n        \"index\": 0\n      }\n    ],\n    \"size\": 0\n  }\n]\nList of ErgoTransaction objects"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[ErgoTransaction]\nfalse\nnone\nList of ErgoTransaction objects"
    },
    {
      "heading": "FeeHistogramBin#",
      "content": "json\n\n\n{\n  \"nTxns\": 0,\n  \"totalFee\": 0\n}\nFee histogram bin"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nnTxns\ninteger(int32)\nfalse\nnone\nnone\n\n\ntotalFee\ninteger(int64)\nfalse\nnone\nnone"
    },
    {
      "heading": "FeeHistogram#",
      "content": "json\n\n\n[\n  {\n    \"nTxns\": 0,\n    \"totalFee\": 0\n  }\n]\nFee histogram for transactions in mempool"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\n[FeeHistogramBin]\nfalse\nnone\nFee histogram for transactions in mempool"
    },
    {
      "heading": "Asset#",
      "content": "json\n\n\n{\n  \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n  \"amount\": 1000\n}\nToken detail in the transaction"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\ntokenId\nDigest32\ntrue\nnone\nBase16-encoded 32 byte digest\n\n\namount\ninteger(int64)\ntrue\nnone\nAmount of the token"
    },
    {
      "heading": "Registers#",
      "content": "json\n\n\n{\n  \"R4\": \"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\n}\nErgo box registers"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nadditionalProperties\nSValue\nfalse\nnone\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "SValue#",
      "content": "json\n\n\n\"100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301\"\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase-16 encoded serialized Sigma-state value"
    },
    {
      "heading": "Votes#",
      "content": "json\n\n\n\"000000\"\nBase16-encoded votes for a soft-fork and parameters"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded votes for a soft-fork and parameters"
    },
    {
      "heading": "ModifierId#",
      "content": "json\n\n\n\"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded 32 byte modifier id"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded 32 byte modifier id"
    },
    {
      "heading": "Digest32#",
      "content": "json\n\n\n\"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded 32 byte digest"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded 32 byte digest"
    },
    {
      "heading": "HexString#",
      "content": "json\n\n\n\"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded bytes"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded bytes"
    },
    {
      "heading": "ADDigest#",
      "content": "json\n\n\n\"333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded 33 byte digest - digest with extra byte with tree height"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded 33 byte digest - digest with extra byte with tree height"
    },
    {
      "heading": "SerializedAdProof#",
      "content": "json\n\n\n\"3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded ad proofs"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded ad proofs"
    },
    {
      "heading": "SpendingProofBytes#",
      "content": "json\n\n\n\"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded spending proofs"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded spending proofs"
    },
    {
      "heading": "BlockSignature#",
      "content": "json\n\n\n\"5ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\"\nBase16-encoded block signature"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\nstring(base16)\nfalse\nnone\nBase16-encoded block signature"
    },
    {
      "heading": "Timestamp#",
      "content": "json\n\n\n1524143059077\nBasic timestamp definition"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nanonymous\ninteger(int64)\nfalse\nnone\nBasic timestamp definition"
    },
    {
      "heading": "EmissionInfo#",
      "content": "json\n\n\n{\n  \"minerReward\": 0,\n  \"totalCoinsIssued\": 0,\n  \"totalRemainCoins\": 0,\n  \"reemitted\": 0\n}\nEmission info for height"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nminerReward\ninteger(int64)\nfalse\nnone\nnone\n\n\ntotalCoinsIssued\ninteger(int64)\nfalse\nnone\nnone\n\n\ntotalRemainCoins\ninteger(int64)\nfalse\nnone\nnone\n\n\nreemitted\ninteger(int64)\nfalse\nnone\nnone"
    },
    {
      "heading": "EmissionScripts#",
      "content": "json\n\n\n{\n  \"emission\": \"string\",\n  \"reemission\": \"string\",\n  \"pay2Reemission\": \"string\"\n}\nEmission related scripts"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nemission\nstring\nfalse\nnone\nnone\n\n\nreemission\nstring\nfalse\nnone\nnone\n\n\npay2Reemission\nstring\nfalse\nnone\nnone"
    },
    {
      "heading": "BalancesSnapshot#",
      "content": "json\n\n\n{\n  \"height\": 0,\n  \"balance\": 0,\n  \"assets\": [\n    {\n      \"tokenId\": \"4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117\",\n      \"amount\": 1000\n    }\n  ]\n}\nAmount of Ergo tokens and assets"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nheight\ninteger(int32)\ntrue\nnone\nnone\n\n\nbalance\ninteger(int64)\ntrue\nnone\nnone\n\n\nassets\n[Asset]\nfalse\nnone\n[Token detail in the transaction]"
    },
    {
      "heading": "AddressValidity#",
      "content": "json\n\n\n{\n  \"address\": \"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\",\n  \"isValid\": true,\n  \"error\": \"string\"\n}\nValidity status of Ergo address"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\naddress\nErgoAddress\ntrue\nnone\nEncoded Ergo Address\n\n\nisValid\nboolean\ntrue\nnone\nnone\n\n\nerror\nstring\nfalse\nnone\nnone"
    },
    {
      "heading": "ApiError#",
      "content": "json\n\n\n{\n  \"error\": 500,\n  \"reason\": \"Internal server error\",\n  \"detail\": \"string\"\n}\nError response from API"
    },
    {
      "heading": "Properties#",
      "content": "Name\nType\nRequired\nRestrictions\nDescription\n\n\n\n\nerror\ninteger\ntrue\nnone\nError code\n\n\nreason\nstring\ntrue\nnone\nError message explaining the reason of the error\n\n\ndetail\nstring\u00c2\u00a6null\ntrue\nnone\nDetailed error description"
    }
  ],
  "qa_pairs": []
}