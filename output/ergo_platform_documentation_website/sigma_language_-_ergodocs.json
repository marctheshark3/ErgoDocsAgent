{
  "title": "Sigma Language - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/scs/sigma-lang/",
  "summary": "The sigmastate-interpreter repository contains implementations of ErgoScript compiler and ErgoTree Interpreter for a family of Sigma-protocol based authentication languages (or simply Sigma language). Every coin in Bitcoin is protected by a program in the stack-based Script language. An interpreter for the language evaluates the program against a context (a few variables containing information about a spending transaction and the blockchain), producing a single boolean value. While Bitcoin Script allows some contracts to be programmed, its abilities are limited. Also, a hard fork would be required to add new cryptographic primitives, such as ring signatures.",
  "keywords": [
    "sigmastate",
    "interpreter",
    "repository",
    "implementation",
    "ergoscript",
    "compiler",
    "ergotree",
    "family",
    "sigma",
    "protocol",
    "authentication",
    "language",
    "coin",
    "bitcoin",
    "program",
    "stack",
    "script",
    "context",
    "variable",
    "information",
    "spending",
    "transaction",
    "blockchain",
    "value",
    "contract",
    "ability",
    "fork",
    "primitive",
    "ring",
    "signature",
    "developer",
    "condition",
    "source",
    "code",
    "byte",
    "utxo",
    "turn",
    "bytecode",
    "memory",
    "representation",
    "proposition",
    "formula",
    "predicate",
    "statement",
    "\u00ee\u00a3-protocol",
    "connective"
  ],
  "sections": [
    {
      "heading": "The 'Sigma Language'#",
      "content": "The sigmastate-interpreter repository contains implementations of ErgoScript compiler and ErgoTree Interpreter for a family of Sigma-protocol based authentication languages (or simply Sigma language)."
    },
    {
      "heading": "Sigma Language Background#",
      "content": "Every coin in Bitcoin is protected by a program in the stack-based Script language. An interpreter for the language evaluates the program against a context (a few variables containing information about a spending transaction and the blockchain), producing a single boolean value. While Bitcoin Script allows some contracts to be programmed, its abilities are limited. Also, a hard fork would be required to add new cryptographic primitives, such as ring signatures.\nGeneralizing the Bitcoin Script, ErgoScript compiler and ErgoTree interpreter implement an authentication language which allows developers to specify coin spending conditions. The ErgoScript Compiler compiles the source code into ErgoTree byte code, which can be saved in UTXO coins to protect their spending (same as in Bitcoin).\nErgoTree, in turn, is a bytecode language and memory representation that can be deterministically interpreted in the given blockchain context.\nPlease note\nErgoTree defines guarding proposition for a coin as a logic formula which combines predicates over a context and cryptographic statements provable via \u00ce\u00a3-protocols with AND, OR, k-out-of-n connectives."
    }
  ],
  "qa_pairs": []
}