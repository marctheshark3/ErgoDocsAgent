{
  "title": "GraphQL - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/stack/explorer/graphql/",
  "summary": "GraphQL queries allow flexible data fetching, reducing over-fetching and under-fetching. gql.ergoplatform.com is a GraphQL server on top of Ergo Platform's explorer database schema. Public community/partner-maintained explorer instances with GraphQL support: Play around with Apollo Studio on the GraphQL instance to explore the schema and make queries easily. Here are some query categories based on the schema: Let's start with basic queries and gradually move to more complex ones. Query to fetch details about a particular box including its associated assets: Query to fetch transactions associated with a list of addresses: Query to fetch the balance for a list of addresses: Query to fetch details of specific tokens: Query to fetch the current state of the blockchain: Query to fetch details about a particular box including its associated assets: Query to fetch the first 10 transactions in the database: Query to fetch a list of boxes created between specific block heights: Query to fetch the first 5 transactions and the boxes linked to them: In this query, we're asking for the first 5 transactions (take: 5).",
  "keywords": [
    "graphql",
    "query",
    "datum",
    "fetching",
    "under",
    "server",
    "ergo",
    "platform",
    "explorer",
    "database",
    "schema",
    "community",
    "partner",
    "instance",
    "support",
    "apollo",
    "studio",
    "category",
    "detail",
    "asset",
    "transaction",
    "list",
    "address",
    "balance",
    "token",
    "state",
    "blockchain",
    "block",
    "height",
    "transactionid",
    "timestamp",
    "output",
    "tokenid",
    "amount",
    "mutation",
    "input",
    "signedtransaction",
    "type"
  ],
  "sections": [
    {
      "heading": "GraphQL#",
      "content": "GraphQL queries allow flexible data fetching, reducing over-fetching and under-fetching. gql.ergoplatform.com is a GraphQL server on top of Ergo Platform's explorer database schema."
    },
    {
      "heading": "Instances#",
      "content": "Public community/partner-maintained explorer instances with GraphQL support:\ngql.ergoplatform.com\nexplore.sigmaspace.io/api/graphql\ngraphql.erg.zelcore.io/\nsigmaexplorer.org/"
    },
    {
      "heading": "Testnet Instances#",
      "content": "gql-testnet.ergoplatform.com/"
    },
    {
      "heading": "Resources#",
      "content": "Ergo GraphQL Github"
    },
    {
      "heading": "Examples#",
      "content": "Play around with Apollo Studio on the GraphQL instance to explore the schema and make queries easily.\nHere are some query categories based on the schema:\nFetching Box Details\nFetching Multiple Boxes with Specific Conditions\nFetching Specific Tokens\nFetching Tokens Associated with a Box\nFetching Inputs by Transaction or Box ID\nFetching Transactions with Specific Conditions\nFetching Data Inputs by Transaction or Box ID\nFetching Block Headers by Height or Header ID\nFetching Addresses with Balance and Transaction Count\nFetching the State of the Mempool\nFetching Blocks by Height or Header ID\nFetching the Current State of the Blockchain\nFetching Information about the Blockchain\nFetching the Balance for a List of Addresses\nFetching Transactions for Specific Addresses\nFetching Box Details with Assets\nFetching Unconfirmed Transactions from the Mempool\nFetching Unconfirmed Boxes from the Mempool\nFetching Unconfirmed Inputs from the Mempool\nFetching Unconfirmed Addresses from the Mempool\nLet's start with basic queries and gradually move to more complex ones."
    },
    {
      "heading": "Fetching Box Details with Assets#",
      "content": "Query to fetch details about a particular box including its associated assets:\nquery {\n  boxes(boxId: \"your_box_id\") {\n    boxId\n    transactionId\n    value\n    address\n    assets {\n      tokenId\n      amount\n    }\n  }\n}"
    },
    {
      "heading": "Fetching Transactions for Specific Addresses#",
      "content": "Query to fetch transactions associated with a list of addresses:\nquery {\n  transactions(addresses: [\"address1\", \"address2\"]) {\n    transactionId\n    inclusionHeight\n    timestamp\n  }\n}"
    },
    {
      "heading": "Fetching Balance for a List of Addresses#",
      "content": "Query to fetch the balance for a list of addresses:\nquery {\n  addresses(addresses: [\"address1\", \"address2\"]) {\n    address\n    balance {\n      nanoErgs\n      assets(tokenId: \"your_token_id\") {\n        amount\n        tokenId\n      }\n    }\n  }\n}"
    },
    {
      "heading": "Fetching Details of Specific Tokens#",
      "content": "Query to fetch details of specific tokens:\nquery {\n  tokens(tokenIds: [\"token_id1\", \"token_id2\"]) {\n    tokenId\n    boxId\n    name\n    description\n  }\n}"
    },
    {
      "heading": "Fetching State of the Blockchain#",
      "content": "Query to fetch the current state of the blockchain:\nquery {\n  state {\n    blockId\n    height\n    boxGlobalIndex\n    transactionGlobalIndex\n    network\n    difficulty\n  }\n}"
    },
    {
      "heading": "Fetching Box Details with Assets#",
      "content": "Query to fetch details about a particular box including its associated assets:\nquery {\n  boxes(boxId: \"your_box_id\") {\n    boxId\n    transactionId\n    value\n    address\n    assets {\n      tokenId\n      amount\n    }\n  }\n}"
    },
    {
      "heading": "Transactions#",
      "content": "Query to fetch the first 10 transactions in the database:\nquery {\n  transactions(take: 10) {\n    transactionId\n    size\n    inclusionHeight\n    timestamp\n    inputs {\n      boxId\n      transactionId\n    }\n    outputs {\n      boxId\n      value\n    }\n  }\n}"
    },
    {
      "heading": "Advanced Query Example 1#",
      "content": "Query to fetch a list of boxes created between specific block heights:\nquery {\n  boxes(minHeight\n\n: 1000, maxHeight: 2000) {\n    boxId\n    creationHeight\n    value\n    address\n  }\n}"
    },
    {
      "heading": "Advanced Query Example 2#",
      "content": "Query to fetch the first 5 transactions and the boxes linked to them:\nquery {\n  transactions(take: 5) {\n    transactionId\n    timestamp\n    outputs {\n      boxId\n      value\n      assets {\n        tokenId\n        amount\n      }\n    }\n  }\n}\nIn this query, we're asking for the first 5 transactions (take: 5). For each transaction, we're requesting transactionId, timestamp, and the outputs (which are boxes). For each box in outputs, we also want to fetch the assets related to that box, including the tokenId and amount."
    },
    {
      "heading": "Mutation Example#",
      "content": "Mutations are used to modify data. Let's submit a transaction using a mutation:\nmutation {\n  submitTransaction(signedTransaction: {\n    id: \"your_transaction_id\",\n    inputs: [\n      {\n        boxId: \"your_box_id\",\n        spendingProof: {\n          proofBytes: \"your_proof_bytes\",\n          extension: {}\n        }\n      }\n    ],\n    dataInputs: [\n      {\n        boxId: \"your_data_input_box_id\"\n      }\n    ],\n    outputs: [\n      {\n        value: \"1000\",\n        ergoTree: \"your_ergo_tree\",\n        creationHeight: 1000,\n        assets: [\n          {\n            tokenId: \"your_token_id\",\n            amount: \"100\"\n          }\n        ],\n        additionalRegisters: {},\n        index: 0\n      }\n    ],\n    size: 100\n  }) \n}\nIn this mutation, we're submitting a transaction with a single input, data input, and output. For each of these, we fill in the necessary data according to the SignedTransaction input type in the schema."
    }
  ],
  "qa_pairs": []
}