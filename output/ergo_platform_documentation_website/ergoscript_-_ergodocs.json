{
  "title": "ErgoScript - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/scs/ergoscript/",
  "summary": "ErgoScript is a powerful, developer-friendly programming language designed specifically for writing smart contracts on the Ergo blockchain. Think of it as a specialized language that allows you to create complex financial contracts and applications with unprecedented flexibility and security. Designed as a subset of Scala, it allows developers to define complex conditions for spending funds. ErgoScript code is translated into a lower-level representation called ErgoTree before being stored on the blockchain. During transaction validation, ErgoTree is interpreted using cryptographic protocols based on Sigma Protocols.",
  "keywords": [
    "ergoscript",
    "developer",
    "programming",
    "language",
    "contract",
    "ergo",
    "blockchain",
    "application",
    "flexibility",
    "security",
    "subset",
    "scala",
    "condition",
    "fund",
    "code",
    "level",
    "representation",
    "ergotree",
    "transaction",
    "validation",
    "protocol",
    "sigma",
    "protocols",
    "architecture",
    "functionality",
    "ring",
    "signature",
    "threshold",
    "scripting",
    "core",
    "change",
    "support",
    "schnorr",
    "proof",
    "feature",
    "building",
    "block",
    "knowledge",
    "diffie",
    "hellman",
    "tuple",
    "default",
    "potential",
    "community",
    "fork",
    "principle",
    "bitcoin",
    "script",
    "ability",
    "state",
    "logic",
    "turing",
    "complete",
    "computation",
    "interaction",
    "account",
    "model",
    "ethereum",
    "coin",
    "balance",
    "storage",
    "utxo",
    "validity",
    "check",
    "chain",
    "execution",
    "load",
    "node",
    "nature",
    "graph",
    "optimization",
    "throughput",
    "design",
    "facilitate",
    "verifying",
    "nipopows",
    "network",
    "scalability",
    "accessibility",
    "system",
    "concept",
    "environment",
    "simplifie",
    "development",
    "client",
    "limitation",
    "bloat",
    "cost",
    "limit",
    "complexity",
    "power",
    "predictability",
    "example",
    "alice",
    "height",
    "alicepubkey",
    "bobpubkey",
    "context",
    "variable",
    "concepts",
    "explore",
    "data",
    "inputs",
    "approach",
    "datum",
    "input",
    "access",
    "information",
    "oracle",
    "price",
    "feed",
    "parameter",
    "distinction",
    "simplicity",
    "inspection",
    "testing",
    "tool",
    "process",
    "implementation",
    "pattern",
    "discussion",
    "discord",
    "rust",
    "appkit",
    "fleet",
    "telegram",
    "forum",
    "question",
    "collaborate",
    "foundation",
    "primitive",
    "structure",
    "consideration"
  ],
  "sections": [
    {
      "heading": "Overview#",
      "content": "ErgoScript is a powerful, developer-friendly programming language designed specifically for writing smart contracts on the Ergo blockchain. Think of it as a specialized language that allows you to create complex financial contracts and applications with unprecedented flexibility and security. Designed as a subset of Scala, it allows developers to define complex conditions for spending funds.\nErgoScript code is translated into a lower-level representation called ErgoTree before being stored on the blockchain. During transaction validation, ErgoTree is interpreted using cryptographic protocols based on Sigma Protocols. This unique architecture enables Ergo to support advanced cryptographic functionalities like ring signatures and threshold signatures directly within the scripting language, without requiring special core protocol changes.\nSigma Protocols\nErgo's support for Sigma Protocols (aka generalized Schnorr proofs) is a key feature, providing efficient and composable building blocks for zero-knowledge proofs. Schnorr proofs and proofs of Diffie-Hellman tuples are supported by default, with the potential for the community to add more through soft forks.\nErgoScript builds upon the security principles of Bitcoin while enabling much more complex financial contracts. Unlike Bitcoin Script, ErgoScript supports features necessary for advanced applications, including the ability to reference blockchain state and implement complex logic, effectively enabling Turing-Complete computations through multi-stage contract interactions.\nBackground Reading\n\nContract Model Comparison: Ergo (eUTXO) vs. Ethereum (Account)\nParadigm#\nThe account model (used by Ethereum) is imperative: sending coins involves changing balances in a global storage state. Ergo's eUTXO-based programming model is declarative: ErgoScript contracts specify conditions under which funds (UTXOs) can be spent, rather than dictating state changes.\nScalability#\nIn the account model, both storage changes and validity..."
    },
    {
      "heading": "Paradigm#",
      "content": "The account model (used by Ethereum) is imperative: sending coins involves changing balances in a global storage state. Ergo's eUTXO-based programming model is declarative: ErgoScript contracts specify conditions under which funds (UTXOs) can be spent, rather than dictating state changes."
    },
    {
      "heading": "Scalability#",
      "content": "In the account model, both storage changes and validity checks happen on-chain during contract execution. In Ergo, transactions are typically created off-chain, and only the validation checks occur on-chain. This significantly reduces the computational load on validating nodes. The immutable nature of the transaction graph also allows for various optimizations to improve throughput. Furthermore, Ergo's design facilitates light verifying nodes (via NIPoPoWs), enhancing network scalability and accessibility."
    },
    {
      "heading": "Shared State#",
      "content": "The account-based model relies on a shared mutable state, which can lead to complex interactions and subtle bugs in concurrent systems. Ergo's model, based on Bitcoin's UTXO concept, uses an immutable graph of transactions, which is inherently more suitable for distributed environments and simplifies the development of light clients."
    },
    {
      "heading": "Expressive Power#",
      "content": "While Ethereum's Turing-complete language offers theoretical flexibility, it has practical limitations like blockchain bloat, complex bugs, unpredictable gas costs, and limits on contract complexity. Ergo achieves similar expressive power through its eUTXO model and multi-stage contracts, but intentionally keeps the core ErgoScript language itself non-Turing-complete to enhance security and predictability."
    },
    {
      "heading": "Experimenting & Tooling#",
      "content": "While ErgoScript aims for simplicity and security, debugging complex contracts can still be challenging. Currently, developers often rely on manual inspection and testing using the tools below. Tools are emerging to improve this process:\nDebugging Guide: Covers current best practices, tools, and techniques for debugging ErgoScript.\nErgoscript Simulator: A community-developed tool that allows simulating ErgoScript execution.\nErgoScript P2S Playground: Experiment and generate Ergo addresses.\nescript.online: Online editor and compiler.\nScastie: Online Scala compiler suitable for ErgoScript snippets.\nKiosk: Web-based UI to explore ErgoScript.\nErgo-Puppet: Advanced tool for off-chain experimentation and testing."
    },
    {
      "heading": "Advanced Patterns & Tutorials#",
      "content": "ErgoScript's features enable the implementation of complex contract patterns:\nFinite State Machines (FSMs): Learn how to model multi-stage contracts where behavior depends on the current state encoded within a box.\nMerkleized Abstract Syntax Trees (MAST): Explore techniques to improve privacy and efficiency for contracts with many spending conditions by revealing only the executed script branch."
    },
    {
      "heading": "Common Use Cases#",
      "content": "ErgoScript's flexibility enables various applications:\nMulti-Signature Wallets: Create wallets requiring multiple parties to approve transactions.\nTime-Locked Contracts: Define contracts that can only be executed after a specific time or block height.\nConditional Spending: Set complex conditions for spending funds based on various parameters (e.g., oracle data, specific inputs).\nAtomic Swaps: Facilitate trustless peer-to-peer exchange of different assets across blockchains or within Ergo.\nCrowdfunding: Implement secure and transparent crowdfunding campaigns.\nComplex Financial Derivatives: Build sophisticated financial instruments on the blockchain."
    },
    {
      "heading": "Best Practices#",
      "content": "Keep contracts simple and readable.\nUse built-in cryptographic primitives where possible.\nAlways consider transaction validation overhead and potential costs.\nTest contracts thoroughly using playgrounds and SDK testing frameworks.\nReason carefully about all possible execution paths and potential economic exploits.\nLeverage data inputs for accessing shared state efficiently."
    },
    {
      "heading": "Common Pitfalls to Avoid#",
      "content": "Overcomplicating contract logic unnecessarily.\nIgnoring performance implications and transaction costs.\nNeglecting comprehensive error handling and edge cases in off-chain code interacting with contracts.\nNot fully understanding the nuances of the eUTXO model (e.g., box lifecycle, state transitions).\nInsecure handling of secrets or assumptions about context in off-chain components."
    },
    {
      "heading": "Learning Paths & Next Steps#",
      "content": "Beginner:\nUnderstand the Core Concepts.\nExperiment with the P2S Playground.\nStudy simple example contracts.\n\n\nIntermediate:\nLearn about Sigma Protocols.\nExplore Multi-Stage Contract patterns.\nWork through SDK tutorials (AppKit, Fleet, SigmaRust).\n\n\nAdvanced:\nUnderstand ErgoTree Compilation & Serialization.\nExplore advanced cryptographic protocols.\nContribute to open-source projects or build your own dApp.\nJoin community discussions on Discord (#ergoscript, #sigma-rust, #appkit, #fleet), Telegram, or the Ergo Forum to ask questions and collaborate."
    },
    {
      "heading": "Advanced Cryptography & Structures#",
      "content": "ErgoScript's foundation on Sigma Protocols allows for powerful cryptographic primitives. However, some advanced structures have specific considerations:\nMerkle Trees: While Merkle Trees are fundamental to Ergo's data integrity (e.g., for transactions and extension data), direct verification of arbitrary Merkle proofs within an ErgoScript contract is not natively supported by a single built-in function. Verification typically happens off-chain or relies on specific protocol designs where roots are checked. The MAST pattern leverages Merkle trees conceptually, often using executeFromVar for on-chain execution of proven branches rather than full proof verification within the script. Developers interested in the general concept and off-chain usage should consult the main Merkle Tree documentation."
    },
    {
      "heading": "Related Technical Resources#",
      "content": "ErgoTree Documentation\nSigma Protocols Overview\nSchnorr Signatures\nLight Verifying Nodes\neUTXO Model Explanation\nErgo Whitepaper\nErgoScript Language Specification (Detailed reference)\nAdvanced ErgoScript Tutorial"
    },
    {
      "heading": "Comparative Analysis#",
      "content": "ErgoScript stands out by:\nEnabling complex logic via the eUTXO model without full on-chain Turing-completeness risks.\nNatively supporting advanced cryptographic protocols (Sigma Protocols).\nAllowing complex financial contracts with predictable execution costs.\nMaintaining a declarative, secure programming model based on UTXOs."
    },
    {
      "heading": "Performance Considerations#",
      "content": "Off-chain transaction creation minimizes on-chain computation.\nOn-chain validation focuses only on script conditions.\nImmutable transaction graph allows for optimizations.\nNative support for light verifying nodes enhances accessibility.\nNon-Turing complete base language prevents infinite loops and simplifies cost analysis.\nSee the Interpreter Performance Style Guide for tips on writing efficient scripts."
    }
  ],
  "qa_pairs": []
}