{
  "title": "Registers - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/data-model/box/registers/",
  "summary": "(Back to: Box Overview) In Ergo's blockchain model, a box is a versatile entity that not only holds the value of cryptocurrency but also contains additional data in the form of registers. This makes it a more functional and flexible version of the Unspent Transaction Output (UTXO) found in Bitcoin and many other cryptocurrencies. Each box contains at least four essential pieces of information: These pieces of information are stored in the first four registers (R0-R3) of the box. The remaining registers, from R4 to R9, can be used to store custom data for use in smart contracts.",
  "keywords": [
    "overview",
    "ergo",
    "model",
    "entity",
    "value",
    "cryptocurrency",
    "datum",
    "form",
    "register",
    "version",
    "unspent",
    "transaction",
    "output",
    "utxo",
    "bitcoin",
    "cryptocurrencie",
    "piece",
    "information",
    "custom",
    "contract",
    "script",
    "input",
    "spending",
    "mind",
    "nanoergs",
    "box.value",
    "access",
    "self",
    "collection",
    "store",
    "proposition",
    "byte",
    "ergotree",
    "ergoscript",
    "box.propositionbyte",
    "tokens",
    "token",
    "element",
    "coll[byte",
    "quantity",
    "long",
    "box.token",
    "coll[(coll[byte",
    "creation",
    "index",
    "box.creationinfo",
    "height",
    "block",
    "box.creationinfo._2",
    "part",
    "storage",
    "rent",
    "feature",
    "year",
    "miner",
    "recycle",
    "blockchain",
    "originate",
    "type",
    "pairs",
    "sigmaprop",
    "groupelement",
    "avltree",
    "boxid",
    "content",
    "txid",
    "vout",
    "pair",
    "note",
    "message",
    "signature",
    "segwit",
    "confirmation",
    "bracket",
    "instance",
    "example",
    "expression",
    "option[int",
    "self.r4[int",
    "scenario",
    "case",
    "context"
  ],
  "sections": [
    {
      "heading": "Ergo Box Registers#",
      "content": "(Back to: Box Overview)\nIn Ergo's blockchain model, a box is a versatile entity that not only holds the value of cryptocurrency but also contains additional data in the form of registers. This makes it a more functional and flexible version of the Unspent Transaction Output (UTXO) found in Bitcoin and many other cryptocurrencies.\nEach box contains at least four essential pieces of information:\nThe value in NanoErgs (1 Erg = 1000000000 NanoErgs).\nThe protection script (similar to Bitcoin's scriptPubKey) or \"smart contract\", which secures the box's expenditure.\nAny additional assets or tokens contained within the box.\nDetails about the box's creation, including the txId (the ID of the transaction that created the box) and an output index. This information also includes a maxCreation height parameter set by the box creator (note: this is not the actual creation height; it aids in the creation of \"payment channels\").\nThese pieces of information are stored in the first four registers (R0-R3) of the box. The remaining registers, from R4 to R9, can be used to store custom data for use in smart contracts. Scripts can access their own registers and the registers of input and output boxes of the spending transaction.\nRegister\nValue\nAccess via ErgoScript (Box. prefix)\n\n\n\n\nR0\nValue (in nanoErgs)\nvalue\n\n\nR1\nProtection script (ErgoTree)\npropositionBytes\n\n\nR2\nAssets (Tokens)\ntokens\n\n\nR3\nCreation details ((txId, outputIndex))\ncreationInfo\n\n\nR4-R9\nAvailable for custom use\nR4[T], R5[T], ... R9[T]\nKeep in mind!\nRegisters must be densely packed; you cannot place an empty register between non-empty ones (e.g., you cannot define R5 if R4 is empty)."
    },
    {
      "heading": "Register R0#",
      "content": "Register R0 holds the monetary value of the box in nanoERGs. Use Box.value to access this register, where Box could signify SELF, or any box in the INPUTS or OUTPUTS collections."
    },
    {
      "heading": "Register R1#",
      "content": "Register R1 stores the proposition bytes (the compiled ErgoTree) of the guarding ErgoScript contract associated with the box. Use Box.propositionBytes to access this register."
    },
    {
      "heading": "Register R2#",
      "content": "Register R2 contains a collection of tokens stored in the box. Each token is identified by two elements: a unique token id (Coll[Byte]) and the quantity (Long) of the specific token. Use Box.tokens to access this collection (Coll[(Coll[Byte], Long)])."
    },
    {
      "heading": "Register R3#",
      "content": "Register R3 holds information about the box\u00e2\u0080\u0099s creation: (txId: Coll[Byte], index: Short). Use Box.creationInfo to access this register. The creation height (the block height when the box was created) is accessible via Box.creationInfo._2 and is part of Ergo's unique storage rent feature, where boxes can be spent after four years, allowing miners to charge a small fee and recycle ERGs back into the blockchain."
    },
    {
      "heading": "Optional Registers R4-R9#",
      "content": "These registers can contain any data defined when the box first originates from a transaction. The data could be of any common type found in ErgoScript, along with more complex types built from Pairs and Collections. These registers may also contain complex types such as Box, SigmaProp, GroupElement, and AVLTree.\nThe optional registers can hold any of the following data types:\nInt, Long with standard Scala semantics.\nBigInt - a 256-bit integer (all computations are modulo 2^256).\nGroupElement - a point on the Secp256k1 curve represented in compressed format.\nColl[Byte] - a byte collection, conceptually similar to Scala's Array[Byte].\nCollection of the above (i.e., Coll[Int], Coll[GroupElement], Coll[Coll[Byte]], and so forth).\nA boxId is calculated based on the contents of all the registers, uniquely defining a box. This can be compared to Bitcoin's (txId, vOut) pairs.\nNote\nErgo txId is dependent solely on the message and not on signatures (similar to Bitcoin SegWit transactions). Hence, a txId is accessible even before signing. Like Bitcoin, Ergo supports chained transactions, meaning boxes with 0 confirmations can be spent."
    },
    {
      "heading": "Typed Registers#",
      "content": "Both ErgoScript and ErgoTree are typed, meaning that when a script accesses a register, it expects a specific type which is denoted in brackets.\nFor instance,\n// Assign the value of the R4 register of the current box (SELF) to the variable x\n// The script expects R4 to contain an Int.\nval x = SELF.R4[Int]\nIn the above example, the register is expected to have an Int type. Therefore, the expression SELF.R4[Int] returns an Option[Int] type value.\nWhen you try to retrieve the value of the register SELF.R4[Int], there are three potential scenarios:\nThe register R4 does not exist (was not defined when the box was created), hence SELF.R4[Int].isDefined will return false.\nThe register R4 exists and has an Int type value, thus SELF.R4[Int].get will fetch that value, and SELF.R4[Int].isDefined will be true.\nThe register R4 exists but carries a value of a different type (e.g., Coll[Byte]), in which case accessing it as SELF.R4[Int] will fail the script execution during validation.\nIn some use cases, a register may contain values of various types depending on context. An additional register can be employed as a tag to facilitate the access of such a register safely.\n// Example using R5 as a type tag for data in R4\nval tagOpt = SELF.R5[Int] // Retrieve the value of the register R5 of type Int and assign it to the variable `tagOpt`\nval res = if (tagOpt.isDefined) { // Check if `tagOpt` is not empty\n  val tag = tagOpt.get // Obtain the value of `tagOpt` and assign it to the variable `tag`\n  if (tag == 1) { // Check if `tag` equals 1, indicating R4 holds an Int\n    val x = SELF.R4[Int].get // Retrieve the value of the register R4 of type Int and assign it to the variable `x`\n    // Compute `res` using the value `x` of type Int\n    sigmaProp(x > 10) // Example condition\n  } else if (tag == 2) { // Check if `tag` equals 2, indicating R4 holds a GroupElement\n    val x = SELF.R4[GroupElement].get // Retrieve the value of the register R4 of type GroupElement and assign it to the variab..."
    }
  ],
  "qa_pairs": []
}