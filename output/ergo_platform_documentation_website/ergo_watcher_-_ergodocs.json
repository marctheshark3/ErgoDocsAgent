{
  "title": "Ergo Watcher - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/eco/rosen/ergo-watcher/",
  "summary": "Watchers are integral to Rosen Bridge, serving as cross-chain oracles. They observe and report deposit events on their network to Ergo, contributing to the network's security and expansion. This section is adapted from the deploy-docker.md section on the Rosen Bridge documentation. First, clone the operational repository and navigate to the appropriate directory: Create and configure the environment file from the template provided: Set up necessary environment variables in the .env file and adjust file permissions: For MacOS users, adjust the permissions for the logs directory: If you're running on a Raspberry Pi ARM device, specify an ARM-compatible Docker image and adjust the volume mapping in the docker-compose file: Before starting the watcher, pull the necessary Docker images and run the service: Set up the local.yaml configuration file specifically for the Ergo network: Make sure to use the actual values and URLs as per your setup requirements.",
  "keywords": [
    "watcher",
    "rosen",
    "bridge",
    "oracle",
    "deposit",
    "event",
    "network",
    "ergo",
    "security",
    "expansion",
    "section",
    "documentation",
    "repository",
    "directory",
    "environment",
    "file",
    "template",
    "variable",
    ".env",
    "permission",
    "macos",
    "user",
    "logs",
    "raspberry",
    "device",
    "docker",
    "image",
    "volume",
    "mapping",
    "service",
    "configuration",
    "value",
    "setup",
    "requirement",
    "access",
    "information",
    "health",
    "status",
    "troubleshooting",
    "faqs"
  ],
  "sections": [
    {
      "heading": "Ergo Rosen Bridge Watcher Setup#",
      "content": "Watchers are integral to Rosen Bridge, serving as cross-chain oracles. They observe and report deposit events on their network to Ergo, contributing to the network's security and expansion.\nThis section is adapted from the deploy-docker.md section on the Rosen Bridge documentation."
    },
    {
      "heading": "Clone the Repository and Prepare the Environment#",
      "content": "First, clone the operational repository and navigate to the appropriate directory:\ngit clone https://github.com/rosen-bridge/operation.git\ncd operation/watcher/\nCreate and configure the environment file from the template provided:\ncp env.template .env\n# Edit the .env file to set POSTGRES_PASSWORD, POSTGRES_USER, POSTGRES_DB, and POSTGRES_PORT"
    },
    {
      "heading": "Configure Environment Variables and Permissions#",
      "content": "Set up necessary environment variables in the .env file and adjust file permissions:\n# Example environment variables setting\nPOSTGRES_PASSWORD=your_password # a random alphanumeric password without special characters (like $%!-#)\nPOSTGRES_USER=your_user # a random name\nPOSTGRES_DB=your_db # a random name\nPOSTGRES_PORT=5432 # 5432 is set as default, you can change it\n# Set permissions and create local.yaml\nsudo chown -R 3000:3000 logs\ntouch config/local.yaml\nFor MacOS users, adjust the permissions for the logs directory:\nsudo chmod -R 707 logs"
    },
    {
      "heading": "Configure Docker for ARM Devices (if applicable)#",
      "content": "Raspberry Pi ARM\nIf you're running on a Raspberry Pi ARM device, specify an ARM-compatible Docker image and adjust the volume mapping in the docker-compose file:\n# Example docker-compose configuration for ARM64v8\ndb:\n  image: arm64v8/postgres:16.0\n  env_file:\n    - .env\n  volumes:\n    - postgres-data:/var/lib/postgresql/data/\n  networks:\n    - rosen_network\n  restart: always\n  healthcheck:\n    test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']\n    interval: 10s\n    timeout: 5s\n    retries: 3"
    },
    {
      "heading": "Pull Docker Images and Start the Watcher#",
      "content": "Before starting the watcher, pull the necessary Docker images and run the service:\ndocker compose pull\ndocker compose up -d"
    },
    {
      "heading": "Configure the local.yaml File for Ergo#",
      "content": "Set up the local.yaml configuration file specifically for the Ergo network:\nnetwork: ergo\napi:\n  apiKeyHash: 'YOUR_API_KEY_HASH'\nergo:\n  type: node\n  initialHeight: <latest height>\n  mnemonic: 'YOUR_WALLET_MNEMONIC'\n  node:\n    url: 127.0.0.1:9053\nobservation:\n  confirmation: 10\n  validThreshold: 720\nMake sure to use the actual values and URLs as per your setup requirements."
    },
    {
      "heading": "Start the Watcher and Monitor#",
      "content": "After configuring all files and setting up the environment, start the watcher:\ndocker compose up -d\nAccess the watcher UI by visiting http://localhost:3030 to monitor network information and health status."
    },
    {
      "heading": "Note#",
      "content": "Adjust the apiKeyHash and mnemonic in the local.yaml or through the .env file for added security.\nEnsure your Docker environment is properly configured, especially when deploying on different architectures like ARM.\nRegularly update your configuration files and Docker images to keep up with network changes and software updates.\nFor tips, troubleshooting, FAQs, and other information, please refer to the main watcher documentation."
    }
  ],
  "qa_pairs": []
}