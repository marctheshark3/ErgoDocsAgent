{
  "title": "Predefined Types - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/scs/ergotree/types/",
  "summary": "Values of SigmaProp type hold sigma propositions, which can be proved and verified using Sigma protocols. Each sigma proposition is represented as an expression where sigma protocol primitives such as ProveDlog and ProveDHTuple are used as constants, and special sigma protocol connectives like AND, OR, and THRESHOLD are used as operations. The abstract syntax of sigma propositions is shown below. Every well-formed tree of sigma proposition is a value of type \\(\\lst{SigmaProp}\\), thus following the notation of the evaluation section we can define denotation of \\(\\lst{SigmaProp}\\) The following methods can be called on all instances of \\(\\lst{SigmaProp}\\) type.",
  "keywords": [
    "value",
    "sigmaprop",
    "type",
    "hold",
    "sigma",
    "proposition",
    "protocol",
    "expression",
    "primitive",
    "provedlog",
    "provedhtuple",
    "constant",
    "threshold",
    "operation",
    "syntax",
    "tree",
    "\\(\\lst{sigmaprop}\\",
    "notation",
    "evaluation",
    "section",
    "denotation",
    "method",
    "instance",
    "list",
    "appendix"
  ],
  "sections": [
    {
      "heading": "Byte.toByte (106.1)#",
      "content": "Description: Converts this numeric value to Byte, throwing an exception on overflow.\nSignature: def toByte: Byte\nSerialized as: Downcast"
    },
    {
      "heading": "Byte.toShort (106.2)#",
      "content": "Description: Converts this numeric value to Short, throwing an exception on overflow.\nSignature: def toShort: Short\nSerialized as: Upcast"
    },
    {
      "heading": "Byte.toInt (106.3)#",
      "content": "Description: Converts this numeric value to Int, throwing an exception on overflow.\nSignature: def toInt: Int\nSerialized as: Upcast"
    },
    {
      "heading": "Byte.toLong (106.4)#",
      "content": "Description: Converts this numeric value to Long, throwing an exception on overflow.\nSignature: def toLong: Long\nSerialized as: Upcast"
    },
    {
      "heading": "Byte.toBigInt (106.5)#",
      "content": "Description: Converts this numeric value to BigInt.\nSignature: def toBigInt: BigInt\nSerialized as: Upcast"
    },
    {
      "heading": "Short.toByte (106.1)#",
      "content": "Description: Converts this numeric value to Byte, throwing an exception on overflow.\nSignature: def toByte: Byte\nSerialized as: Downcast"
    },
    {
      "heading": "Short.toShort (106.2)#",
      "content": "Description: Converts this numeric value to Short, throwing an exception on overflow.\nSignature: def toShort: Short\nSerialized as: Downcast"
    },
    {
      "heading": "Short.toInt (106.3)#",
      "content": "Description: Converts this numeric value to Int, throwing an exception on overflow.\nSignature: def toInt: Int\nSerialized as: Downcast"
    },
    {
      "heading": "Short.toLong (106.4)#",
      "content": "Description: Converts this numeric value to Long, throwing an exception on overflow.\nSignature: def toLong: Long\nSerialized as: Upcast"
    },
    {
      "heading": "Short.toBigInt (106.5)#",
      "content": "Description: Converts this numeric value to BigInt.\nSignature: def toBigInt: BigInt\nSerialized as: Upcast"
    },
    {
      "heading": "Int.toByte (106.1)#",
      "content": "Description: Converts this numeric value to Byte, throwing an exception on overflow.\nSignature: def toByte: Byte\nSerialized as: Downcast"
    },
    {
      "heading": "Int.toShort (106.2)#",
      "content": "Description: Converts this numeric value to Short, throwing an exception on overflow.\nSignature: def toShort: Short\nSerialized as: Downcast"
    },
    {
      "heading": "Int.toInt (106.3)#",
      "content": "Description: Converts this numeric value to Int, throwing an exception on overflow.\nSignature: def toInt: Int\nSerialized as: Downcast"
    },
    {
      "heading": "Int.toLong (106.4)#",
      "content": "Description: Converts this numeric value to Long, throwing an exception on overflow.\nSignature: def toLong: Long\nSerialized as: Upcast"
    },
    {
      "heading": "Int.toBigInt (106.5)#",
      "content": "Description: Converts this numeric value to BigInt.\nSignature: def toBigInt: BigInt\nSerialized as: Upcast"
    },
    {
      "heading": "Long.toByte (106.1)#",
      "content": "Description: Converts this numeric value to Byte, throwing an exception on overflow.\nSignature: def toByte: Byte\nSerialized as: Downcast"
    },
    {
      "heading": "Long.toShort (106.2)#",
      "content": "Description: Converts this numeric value to Short, throwing an exception on overflow.\nSignature: def toShort: Short\nSerialized as: Downcast"
    },
    {
      "heading": "Long.toInt (106.3)#",
      "content": "Description: Converts this numeric value to Int, throwing an exception on overflow.\nSignature: def toInt: Int\nSerialized as: Downcast"
    },
    {
      "heading": "Long.toLong (106.4)#",
      "content": "Description: Converts this numeric value to Long, throwing an exception on overflow.\nSignature: def toLong: Long\nSerialized as: Downcast"
    },
    {
      "heading": "Long.toBigInt (106.5)#",
      "content": "Description: Converts this numeric value to BigInt.\nSignature: def toBigInt: BigInt\nSerialized as: Upcast"
    },
    {
      "heading": "BigInt.toBigInt (106.5)#",
      "content": "Description: Converts this numeric value to BigInt.\nSignature: def toBigInt: BigInt\nSerialized as: Downcast"
    },
    {
      "heading": "GroupElement.getEncoded (7.2)#",
      "content": "Description: Returns an encoding of the point value.\nSignature: def getEncoded: Coll[Byte]\nSerialized as: PropertyCall"
    },
    {
      "heading": "GroupElement.exp (7.3)#",
      "content": "Description: Exponentiates this GroupElement to the given number. Returns this group element raised to the power of k.\nSignature: def exp(k: BigInt): GroupElement\nParameters: k The power\nSerialized as: Exponentiate"
    },
    {
      "heading": "GroupElement.multiply (7.4)#",
      "content": "Description: Performs the group operation (multiplication) with another element.\nSignature: def multiply(other: GroupElement): GroupElement\nParameters: other The other element of the group.\nSerialized as: MultiplyGroup"
    },
    {
      "heading": "GroupElement.negate (7.5)#",
      "content": "Description: Returns the inverse element in the group.\nSignature: def negate: GroupElement\nSerialized as: PropertyCall"
    },
    {
      "heading": "SigmaProp#",
      "content": "Values of SigmaProp type hold sigma propositions, which can be proved and verified using Sigma protocols. Each sigma proposition is represented as an expression where sigma protocol primitives such as ProveDlog and ProveDHTuple are used as constants, and special sigma protocol connectives like AND, OR, and THRESHOLD are used as operations.\nThe abstract syntax of sigma propositions is shown below.\nSet\n\nSyntax\nMnemonic\nDescription\n\n\n\n\n\\(Tree \\ni t\\)\n:=\n\\(\\lst{Trivial(b)}\\)\n\\(\\lst{TrivialProp}\\)\nboolean value \\(\\lst{b}\\) as sigma proposition\n\n\n\n\\(\\mid\\)\n\\(\\lst{Dlog(ge)}\\)\n\\(\\lst{ProveDLog}\\)\nknowledge of discrete logarithm of \\(\\lst{ge}\\)\n\n\n\n\\(\\mid\\)\n\\(\\lst{DHTuple(g,h,u,v)}\\)\n\\(\\lst{ProveDHTuple}\\)\nknowledge of Diffie-Hellman tuple\n\n\n\n\\(\\mid\\)\n\\(\\lst{THRESHOLD}(k,t_1,\\dots,t_n)\\)\n\\(\\lst{THRESHOLD}\\)\nknowledge of \\(k\\) out of \\(n\\) secrets\n\n\n\n\\(\\mid\\)\n\\(\\lst{OR}(t_1,\\dots,t_n)\\)\n\\(\\lst{OR}\\)\nknowledge of any one of \\(n\\) secrets\n\n\n\n\\(\\mid\\)\n\\(\\lst{AND}(t_1,\\dots,t_n)\\)\n\\(\\lst{AND}\\)\nknowledge of all \\(n\\) secrets\nEvery well-formed tree of sigma proposition is a value of type \\(\\lst{SigmaProp}\\), thus following the notation of the evaluation section we can define denotation of \\(\\lst{SigmaProp}\\)\n\\[\\Denot{\\lst{SigmaProp}} = \\Set{t \\in Tree}\\]\nThe following methods can be called on all instances of \\(\\lst{SigmaProp}\\) type."
    },
    {
      "heading": "SigmaProp.propBytes (8.1)#",
      "content": "Description: Returns the serialized bytes of this sigma proposition represented as ErgoTree.\nParameters: \nResult: Coll[Byte]\nSerialized as: SigmaPropBytes"
    },
    {
      "heading": "SigmaProp.isProven (8.2)#",
      "content": "Description: Verifies that the sigma proposition is proven. (FRONTEND ONLY)\nParameters: \nResult: Boolean\nFor a full list of primitive operations on  \\(\\lst{SigmaProp}\\) type, see Appendix B"
    },
    {
      "heading": "Box.value (99.1)#",
      "content": "Description: Monetary value in nanoErgs.\nParameters: \nResult: \\(\\lst{Long}\\)\nSerialized as: ExtractAmount"
    },
    {
      "heading": "Box.propositionBytes (99.2)#",
      "content": "Description: Serialized bytes of the guarding script. This script must evaluate to true to spend the box.\nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: ExtractScriptBytes"
    },
    {
      "heading": "Box.bytes (99.3)#",
      "content": "Description: Returns the serialized bytes of this box's content, including proposition bytes.\nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: ExtractBytes"
    },
    {
      "heading": "Box.bytesWithoutRef (99.4)#",
      "content": "Description: Returns the serialized bytes of this box's content, excluding the transactionId and output index.\nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: ExtractBytesWithNoRef"
    },
    {
      "heading": "Box.id (99.5)#",
      "content": "Description: Returns the Blake2b256 hash of this box's content (blake2b256(bytes)).\nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: ExtractId"
    },
    {
      "heading": "Box.creationInfo (99.6)#",
      "content": "Description: Returns the height and transaction/output index where the box was created. creationInfo._1 is the block height, and creationInfo._2 is the transaction identifier concatenated with the box index.\nParameters: \nResult: \\(\\lst{(Int,Coll[Byte])}\\)\nSerialized as: ExtractCreationInfo"
    },
    {
      "heading": "Box.getReg (99.7)#",
      "content": "Description: Extracts register regId by ID and expected type T. Returns Some(value) if the register exists and has the specified type, None otherwise.\nParameters: \\(\\lst{regId : Int}\\) // zero-based identifier of the register.\nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.tokens (99.8)#",
      "content": "Description: Returns the collection of secondary tokens held in the box.\nParameters: \nResult: \\(\\lst{Coll[(Coll[Byte],Long)]}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "Box.R0 (99.9)#",
      "content": "Description: Register R0: Monetary value in nanoErgs. Use ExtractAmount (value property).\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R1 (99.10)#",
      "content": "Description: Register R1: Guarding script bytes. Use ExtractScriptBytes (propositionBytes property).\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R2 (99.11)#",
      "content": "Description: Register R2: Secondary tokens [(TokenId, Amount)]. Use ExtractTokens (tokens property).\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R3 (99.12)#",
      "content": "Description: Register R3: Box creation information (height, txId, index). Use ExtractCreationInfo (creationInfo property).\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R4 (99.13)#",
      "content": "Description: Optional register R4 for arbitrary data storage. Use ExtractRegisterAs.\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R5 (99.14)#",
      "content": "Description: Optional register R5 for arbitrary data storage. Use ExtractRegisterAs.\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R6 (99.15)#",
      "content": "Description: Optional register R6 for arbitrary data storage. Use ExtractRegisterAs.\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R7 (99.16)#",
      "content": "Description: Optional register R7 for arbitrary data storage. Use ExtractRegisterAs.\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R8 (99.17)#",
      "content": "Description: Optional register R8 for arbitrary data storage. Use ExtractRegisterAs.\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "Box.R9 (99.18)#",
      "content": "Description: Optional register R9 for arbitrary data storage. Use ExtractRegisterAs.\nParameters: \nResult: \\(\\lst{Option[T]}\\)\nSerialized as: ExtractRegisterAs"
    },
    {
      "heading": "AvlTree.digest (100.1)#",
      "content": "Description: Returns the digest of the state represented by this tree (root hash bytes ++ tree height).\nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "AvlTree.enabledOperations (100.2)#",
      "content": "Description: Returns the flags of enabled operations packed into a single byte.\nParameters: \nResult: \\(\\lst{Byte}\\)\nSerialized as: PropertyCall\nisInsertAllowed == (enabledOperations & 0x01) != 0\nisUpdateAllowed == (enabledOperations & 0x02) != 0\nisRemoveAllowed == (enabledOperations & 0x04) != 0"
    },
    {
      "heading": "AvlTree.keyLength (100.3)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Int}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "AvlTree.valueLengthOpt (100.4)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "AvlTree.isInsertAllowed (100.5)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Coll[Byte]}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "AvlTree.isUpdateAllowed (100.6)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Boolean}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "AvlTree.isRemovedAllowed (100.7)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Boolean}\\)\nSerialized as: PropertyCall"
    },
    {
      "heading": "AvlTree.updateOperations (100.8)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{AvlTree}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.contains (100.9)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Boolean}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.get (100.10)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Option[Coll[Byte]]}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.getMeny (100.11)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Coll[Option[Coll[Byte]]]}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.insert (100.12)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Option[AvlTree]}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.update (100.13)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{Option[AvlTree]}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.remove (100.14)#",
      "content": "Description:\nParameters: \nResult: \\(\\lst{Option[AvlTree]}\\)\nSerialized as: MethodCall"
    },
    {
      "heading": "AvlTree.updateDigest (100.15)#",
      "content": "Description: \nParameters: \nResult: \\(\\lst{AvlTree}\\)\nSerialized as: MethodCall"
    }
  ],
  "qa_pairs": []
}