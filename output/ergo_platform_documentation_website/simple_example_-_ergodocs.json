{
  "title": "Simple Example - ErgoDocs",
  "source_url": "https://docs.ergoplatform.com/dev/tokens/nfts/nft-examples/",
  "summary": "minting-for-dummies is a basic tool for NFT minting quickly in Scala. You can see the mint() logic here To mint an NFT using the Ergo Python Appkit, you can utilize the mintToken method provided by the ErgoAppKit class. First, you need to initialize the ErgoAppKit instance with the appropriate parameters such as nodeUrl, networkType, explorerUrl, and nodeApiKey. Then, you can call the mintToken method with the required parameters, including the value, tokenId, tokenName, tokenDesc, mintAmount, decimals, and contract. Here's an example of how to mint an NFT using the ergo-python-appkit: After minting the NFT, you can use other methods provided by the ErgoAppKit class to interact with the NFT, such as transferring it to another address or querying its properties.",
  "keywords": [
    "dummies",
    "tool",
    "scala",
    "mint",
    "logic",
    "ergo",
    "python",
    "appkit",
    "method",
    "class",
    "instance",
    "parameter",
    "nodeurl",
    "explorerurl",
    "nodeapikey",
    "value",
    "tokenid",
    "mintamount",
    "decimal",
    "contract",
    "example",
    "address",
    "property",
    "reference",
    "link"
  ],
  "sections": [
    {
      "heading": "Using Scala#",
      "content": "minting-for-dummies is a basic tool for NFT minting quickly in Scala.\nYou can see the mint() logic here"
    },
    {
      "heading": "Using Ergo Python Appkit#",
      "content": "To mint an NFT using the Ergo Python Appkit, you can utilize the mintToken method provided by the ErgoAppKit class. First, you need to initialize the ErgoAppKit instance with the appropriate parameters such as nodeUrl, networkType, explorerUrl, and nodeApiKey. Then, you can call the mintToken method with the required parameters, including the value, tokenId, tokenName, tokenDesc, mintAmount, decimals, and contract.\nHere's an example of how to mint an NFT using the ergo-python-appkit:\nfrom ergo_python_appkit import ErgoAppKit\nfrom org.ergoplatform.appkit import ErgoContract\n\n# Initialize ErgoAppKit instance\nappKit = ErgoAppKit(nodeUrl=\"https://ergo-node-url\", networkType=\"mainnet\", explorerUrl=\"https://ergo-explorer-url\", nodeApiKey=\"your-node-api-key\")\n\n# Define the NFT parameters\nvalue = 1000000\ntokenId = \"your-token-id\"\ntokenName = \"Your Token Name\"\ntokenDesc = \"Your Token Description\"\nmintAmount = 1\ndecimals = 0\n\n# Compile the contract\ncontract = ErgoContract.compile(\"sigmaProp(true)\")\n\n# Mint the NFT\nappKit.mintToken(value, tokenId, tokenName, tokenDesc, mintAmount, decimals, contract)\nAfter minting the NFT, you can use other methods provided by the ErgoAppKit class to interact with the NFT, such as transferring it to another address or querying its properties.\nReference links:\nErgoBox\nErgoAppKit\nErgoTransaction\nergo-python-appkit module\nBuilding transaction and minting a token using AppKit from Python."
    },
    {
      "heading": "More Examples#",
      "content": "Bulk Mint with Royalties using v1 design in Python\nOn-Chain NFTs"
    },
    {
      "heading": "References#",
      "content": "Eip4TokenBuilder on GitHub\nEip4Token on GitHub"
    }
  ],
  "qa_pairs": []
}